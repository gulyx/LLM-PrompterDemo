package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.Arrays;
import java.util.PriorityQueue;

public class 2136_DescriptionOnlyTest {

    public int minDays(int[] plantTime, int[] growTime) {
        int n = plantTime.length;
        long[][] dp = new long[n + 1][n + 1];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Long.MAX_VALUE);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[j][i] != Long.MAX_VALUE) {
                    pq.add(new int[]{j, dp[j][i]});
                }
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[j][i] + plantTime[i]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (dp[n][i] != Long.MAX_VALUE) {
                pq.add(new int[]{i, dp[n][i]});
            } else {
                break;
            }
        }

        while (!pq.isEmpty()) {
            int[] arr = pq.poll();
            for (int i = 0; i < n; i++) {
                if (dp[i][arr[0]] != Long.MAX_VALUE && dp[arr[0]][i] == Long.MAX_VALUE) {
                    dp[arr[0]][i] = dp[i][arr[0]] + growTime[i];
                    pq.add(new int[]{arr[0], dp[arr[0]][i]});
                }
            }
        }

        long ans = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            ans = Math.min(ans, dp[n][i]);
        }

        return (int) ans;
    }

    public int minDays(int[] plantTime, int[] growTime) {

        return minDays(plantTime, growTime);
    }

    public void testMinDays() {
        int[] plantTime1 = {3, 3, 3, 3};
        int[] growTime1 = {3, 3, 3, 3};

        int[] plantTime2 = {1, 2, 3};
        int[] growTime2 = {1, 1, 1};

        int[] plantTime3 = {7,8,9};
        int[] growTime3 = {7,8,9};

        int[] plantTime4 = {2, 2, 2, 2, 2, 2, 2, 2};
        int[] growTime4 = {2, 2, 2, 2, 2, 2, 2, 2};

        System.out.println(minDays(plantTime1, growTime1));
        System.out.println(minDays(plantTime2, growTime2));
        System.out.println(minDays(plantTime3, growTime3));
        System.out.println(minDays(plantTime4, growTime4));
    }

}