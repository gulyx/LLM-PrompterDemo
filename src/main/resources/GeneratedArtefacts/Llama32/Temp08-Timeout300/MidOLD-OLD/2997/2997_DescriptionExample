```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void example1() {
        int[] nums = {2,1,3,4};
        int k = 1;
        assertEquals(2, minOperations(nums, k));
    }

    @Test
    public void example2() {
        int[] nums = {2,0,2,0};
        int k = 0;
        assertEquals(0, minOperations(nums, k));
    }

    @Test
    public void example3() {
        int[] nums = {1,3,5,7};
        int k = 15;
        assertEquals(4, minOperations(nums, k));
    }

    @Test
    public void example4() {
        int[] nums = {2,2,0,3};
        int k = 6;
        assertEquals(4, minOperations(nums, k));
    }

    @Test
    public void example5() {
        int[] nums = {1,1,1,1};
        int k = 8;
        assertEquals(1, minOperations(nums, k));
    }
}

public class Main {

    public static int minOperations(int[] nums, int k) {
        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }

        return binaryLifting(xor, k);
    }

    private static int binaryLifting(int x, int target) {
        if (x == target) {
            return 0;
        } else if ((~x & target) > 0) {
            return binaryLifting(~x, target) + 1;
        } else {
            return binaryLifting(x ^ (~target), target);
        }
    }
}
```