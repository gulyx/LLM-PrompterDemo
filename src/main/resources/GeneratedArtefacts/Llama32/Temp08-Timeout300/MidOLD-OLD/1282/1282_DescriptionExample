```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionExample {

    public static List<List<Integer>> groupThePeople(int[] groupSizes) {
        Map<Integer, List<Integer>> personToGroup = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            if (!personToGroup.containsKey(groupSizes[i])) {
                personToGroup.put(groupSizes[i], new ArrayList<>());
            }
            personToGroup.get(groupSizes[i]).add(i);
        }

        List<List<Integer>> groups = new ArrayList<>();
        for (List<Integer> person : personToGroup.values()) {
            if (person.size() == groupSizes[0]) {
                groups.add(person);
            } else {
                List<Integer> remainingPeople = new ArrayList<>(person);
                while (remainingPeople.size() % groupSizes[0] != 0) {
                    remainingPeople.remove(remainingPeople.size() - 1);
                }
                if (!groups.isEmpty()) {
                    groups.get(groups.size() - 1).addAll(remainingPeople);
                } else {
                    groups.add(new ArrayList<>(remainingPeople));
                }
            }
        }

        return groups;
    }

    @Test
    public void testGroupingWithOneGroupSize() {
        int[] groupSizes = {3};
        List<List<Integer>> expectedOutput = Arrays.asList(Arrays.asList(0, 1, 2));
        assertEquals(expectedOutput, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupingWithMultipleGroups() {
        int[] groupSizes = {3, 3, 3, 3, 3};
        List<List<Integer>> expectedOutput = Arrays.asList(Arrays.asList(5), Arrays.asList(0, 1, 2), Arrays.asList(3, 4, 6));
        assertEquals(expectedOutput, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupingWithNoOverlap() {
        int[] groupSizes = {2, 1};
        List<List<Integer>> expectedOutput = Arrays.asList(Arrays.asList(0), Arrays.asList(1, 4));
        assertEquals(expectedOutput, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupingWithMultipleGroupSizes() {
        int[] groupSizes = {2, 1, 3, 3, 3};
        List<List<Integer>> expectedOutput = Arrays.asList(Arrays.asList(0, 5), Arrays.asList(1), Arrays.asList(2, 3, 4));
        assertEquals(expectedOutput, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupingWithOnePerson() {
        int[] groupSizes = {1};
        List<List<Integer>> expectedOutput = Arrays.asList(Arrays.asList(0));
        assertEquals(expectedOutput, groupThePeople(groupSizes));
    }
}
```