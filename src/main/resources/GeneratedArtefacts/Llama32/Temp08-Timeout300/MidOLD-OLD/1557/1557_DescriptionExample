```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {
    public int[] findSmallestSetOfVertices(int n, int[][] edges) {
        HashSet<Integer> sourceNodes = new HashSet<>();
        for (int i = 0; i < n; i++) {
            sourceNodes.add(i);
        }

        for (int[] edge : edges) {
            sourceNodes.remove(edge[1]);
        }

        List<Integer> result = new ArrayList<>(sourceNodes);
        return result.stream().mapToInt(x -> x).toArray();
    }
}

public class SolutionTest {

    @Test
    public void testExample1() {
        Solution solution = new Solution();
        int[] result = solution.findSmallestSetOfVertices(6, new int[][]{{0,1},{0,2},{2,5},{3,4},{4,2}});
        assertArrayEquals(new int[]{0,3}, result);
    }

    @Test
    public void testExample2() {
        Solution solution = new Solution();
        int[] result = solution.findSmallestSetOfVertices(5, new int[][]{{0,1},{2,1},{3,1},{1,4},{2,4}});
        assertArrayEquals(new int[]{0,2,3}, result);
    }

    @Test
    public void testExample3() {
        Solution solution = new Solution();
        int[] result = solution.findSmallestSetOfVertices(7, new int[][]{{0,1},{1,2},{2,0}});
        assertArrayEquals(new int[]{0,2}, result);
    }

    @Test
    public void testExample4() {
        Solution solution = new Solution();
        int[] result = solution.findSmallestSetOfVertices(3, new int[][]{{0,1},{1,2},{2,0}});
        assertArrayEquals(new int[]{0,2}, result);
    }

    @Test
    public void testExample5() {
        Solution solution = new Solution();
        int[] result = solution.findSmallestSetOfVertices(4, new int[][]{{0,1},{1,2},{2,3}});
        assertArrayEquals(new int[]{0,1,2}, result);
    }
}
```