package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class 1630_DescriptionExample {

    public boolean isArithmeticSequence(int[] nums, int[] l, int[] r) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int i : l) {
            freqMap.put(nums[i], freqMap.getOrDefault(nums[i], 0) + 1);
        }
        for (int i : r) {
            freqMap.put(nums[i], freqMap.getOrDefault(nums[i], 0) - 1);
        }

        int diff = nums[l[0]] - nums[r[0]];
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            if (entry.getValue() != 0) {
                return false;
            }
            int num = entry.getKey();
            int expectedDiff = diff + (num * (r[0] - l[0]) / nums[l[0]]);
            if (!freqMap.containsKey(expectedDiff)) {
                return false;
            }
        }

        return true;
    }

    @Test
    public void testIsArithmeticSequence_Example1() {
        int[] nums = {4,6,5,9,3,7};
        int[] l = {0,0,2};
        int[] r = {2,3,5};
        assertTrue(isArithmeticSequence(nums, l, r));
    }

    @Test
    public void testIsArithmeticSequence_Example2() {
        int[] nums = {-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10};
        int[] l = {0,1,6,4,8,7};
        int[] r = {4,4,9,7,9,10};
        assertFalse(isArithmeticSequence(nums, l, r));
    }

    @Test
    public void testIsArithmeticSequence_Example3() {
        int[] nums = {1, 2, 3, 4, 5};
        int[] l = {0, 1, 2, 3};
        int[] r = {3, 4, 5};
        assertTrue(isArithmeticSequence(nums, l, r));
    }

    @Test
    public void testIsArithmeticSequence_Example4() {
        int[] nums = {1, 1, 1, 1, 1};
        int[] l = {0, 1, 2, 3};
        int[] r = {3, 4, 5};
        assertFalse(isArithmeticSequence(nums, l, r));
    }

    @Test
    public void testIsArithmeticSequence_Example5() {
        int[] nums = {-2, -3, -5, -6, -7, -8};
        int[] l = {0, 1, 2, 3, 4};
        int[] r = {4, 5, 6, 7, 8};
        assertTrue(isArithmeticSequence(nums, l, r));
    }
}