package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class 2807_DescriptionOnly {

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2807_DescriptionOnly");
    }

}

public class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class Solution {
    public ListNode addOneRow(ListNode head, int val, int depth) {

        if (depth == 1) {
            ListNode newHead = new ListNode(val);
            newHead.next = head;
            return newHead;
        }

        ListNode current = head;

        for (int i = 0; i < depth - 2; i++) {
            if (current.next == null) {
                break;
            }
            current = current.next;
        }

        ListNode newNode = new ListNode(val);
        newNode.next = current.next;
        current.next = newNode;
        return head;

    }

}

public class Test {

    @Test
    public void testAddOneRow() {
        Solution solution = new Solution();
        // Add your test cases here
    }

    @Test
    public void testAddOneRow_DifferentValues() {
        Solution solution = new Solution();

        ListNode listNode0 = new ListNode(1);
        ListNode listNode1 = new ListNode(2);
        ListNode listNode2 = new ListNode(3);
        ListNode listNode3 = new ListNode(4);

        listNode0.next = listNode1;
        listNode1.next = listNode2;
        listNode2.next = listNode3;

        ListNode result1 = solution.addOneRow(listNode0, 7, 2);
        assert(result1.val == 7 && result1.next.val == 6 && result1.next.next.val == 4);

        ListNode result2 = solution.addOneRow(listNode0, 8, 2);
        assert(result1.val == 8 && result1.next.val == 3 && result1.next.next.val == 4);

    }

    @Test
    public void testAddOneRow_DifferentValues() {
        Solution solution = new Solution();

        ListNode listNode0 = new ListNode(1);
        ListNode listNode1 = new ListNode(2);
        ListNode listNode2 = new ListNode(3);
        ListNode listNode3 = new ListNode(4);

        listNode0.next = listNode1;
        listNode1.next = listNode2;
        listNode2.next = listNode3;

        ListNode result1 = solution.addOneRow(listNode0, 7, 2);
        assert(result1.val == 7 && result1.next.val == 6 && result1.next.next.val == 4);

        ListNode result2 = solution.addOneRow(listNode0, 8, 2);
        assert(result1.val == 8 && result1.next.val == 3 && result1.next.next.val == 4);

    }

}