package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 2149_DescriptionOnly {

    @Test
    public void test_1() {
        int[] nums = {1, -2, -4, 5, 6};
        int[] result = rearrangeArray(nums);
        assertTrue(result[0] > 0);
        for (int i = 0; i < result.length / 2; i++) {
            assertTrue(Math.abs(result[i]) == Math.abs(result[result.length/2 +i]));
            if (result[i] * result[result.length/2 + i] < 0) {
                fail("Unexpected sign");
            }
        }
    }

    @Test
    public void test_2() {
        int[] nums = {-1, -2, -3, 4, 5};
        int[] result = rearrangeArray(nums);
        assertTrue(result[0] > 0);
        for (int i = 0; i < result.length / 2; i++) {
            assertTrue(Math.abs(result[i]) == Math.abs(result[result.length/2 +i]));
            if (result[i] * result[result.length/2 + i] < 0) {
                fail("Unexpected sign");
            }
        }
    }

    @Test
    public void test_3() {
        int[] nums = {1, -1, -1, -1, 5};
        int[] result = rearrangeArray(nums);
        assertTrue(result[0] > 0);
        for (int i = 0; i < result.length / 2; i++) {
            assertTrue(Math.abs(result[i]) == Math.abs(result[result.length/2 +i]));
            if (result[i] * result[result.length/2 + i] < 0) {
                fail("Unexpected sign");
            }
        }
    }

    @Test
    public void test_4() {
        int[] nums = {1, -2, 5, -6};
        int[] result = rearrangeArray(nums);
        assertTrue(result[0] > 0);
        for (int i = 0; i < result.length / 2; i++) {
            assertTrue(Math.abs(result[i]) == Math.abs(result[result.length/2 +i]));
            if (result[i] * result[result.length/2 + i] < 0) {
                fail("Unexpected sign");
            }
        }
    }

    @Test
    public void test_5() {
        int[] nums = {-1, -2, 3, 4};
        int[] result = rearrangeArray(nums);
        assertTrue(result[0] > 0);
        for (int i = 0; i < result.length / 2; i++) {
            assertTrue(Math.abs(result[i]) == Math.abs(result[result.length/2 +i]));
            if (result[i] * result[result.length/2 + i] < 0) {
                fail("Unexpected sign");
            }
        }
    }

    public int[] rearrangeArray(int[] nums) {
        int pos = 0, neg = 1;
        while (neg < nums.length) {
            if (nums[pos] > 0 && nums[neg] < 0) {
                int temp = nums[neg];
                nums[neg] = nums[pos];
                nums[pos] = temp;
                pos++;
                neg++;
            } else if (nums[pos] < 0 && nums[neg] > 0) {
                neg++;
            }
        }

        return nums;
    }

}