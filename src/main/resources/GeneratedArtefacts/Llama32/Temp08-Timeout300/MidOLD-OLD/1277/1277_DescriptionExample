```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void test_1() {
        int[][] matrix = {{0, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}};
        assertEquals(15, countSquares(matrix));
    }

    @Test
    public void test_2() {
        int[][] matrix = {{1, 0, 1}, {1, 1, 0}, {1, 1, 0}};
        assertEquals(7, countSquares(matrix));
    }

    @Test
    public void test_3() {
        int[][] matrix = {{1, 1, 0, 0}, {1, 1, 0, 0}, {0, 0, 1, 1}};
        assertEquals(8, countSquares(matrix));
    }

    @Test
    public void test_4() {
        int[][] matrix = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
        assertEquals(0, countSquares(matrix));
    }

    @Test
    public void test_5() {
        int[][] matrix = {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}};
        assertEquals(9, countSquares(matrix));
    }
}

public class Solution {

    public int countSquares(int[][] matrix) {
        int rows = matrix.length;
        if (rows == 0) return 0;

        int cols = matrix[0].length;
        int[][] dp = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 1) {
                    if (i > 0 && matrix[i - 1][j] == 1) dp[i][j] += dp[i - 1][j];
                    if (j > 0 && matrix[i][j - 1] == 1) dp[i][j] += dp[i][j - 1];
                }
                dp[i][j]++;
            }
        }

        int count = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 1) {
                    count += dp[i][j];
                }
            }
        }

        return count;
    }
}
```