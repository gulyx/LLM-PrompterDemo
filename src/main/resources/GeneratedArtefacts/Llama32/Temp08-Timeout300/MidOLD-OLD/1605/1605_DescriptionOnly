```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1605_DescriptionOnly {

    @Test
    public void testMatrixFromRowAndColSum() {
        int[][] rowSum = {{3,1},{2,2}};
        int[][] colSum = {{6},{4}};
        assertArrayEquals(new int[][]{{0,2},{2,0}}, findSolution(rowSum,colSum));
    }

    @Test
    public void testMatrixFromRowAndColSum_2() {
        int[][] rowSum = {{1,1},{1,3}};
        int[][] colSum = {{6},{8}};
        assertArrayEquals(new int[][]{{0,0},{0,4}}, findSolution(rowSum,colSum));
    }

    @Test
    public void testMatrixFromRowAndColSum_3() {
        int[][] rowSum = {{1,2},{2,5}};
        int[][] colSum = {{9},{16}};
        assertArrayEquals(new int[][]{{0,4},{3,4}}, findSolution(rowSum,colSum));
    }

    @Test
    public void testMatrixFromRowAndColSum_4() {
        int[][] rowSum = {{1,1,2},{2,2,6}};
        int[][] colSum = {{7},{8},{9}};
        assertArrayEquals(new int[][]{{0,0,5},{1,3,1},{1,2,1}}, findSolution(rowSum,colSum));
    }

    @Test
    public void testMatrixFromRowAndColSum_5() {
        int[][] rowSum = {{1,1},{1,3}};
        int[][] colSum = {{6},{8}};
        assertArrayEquals(new int[][]{{0,2},{1,4}}, findSolution(rowSum,colSum));
    }
}

public class Solution {

    public int[][] findSolution(int[][] rowSum, int[][] colSum) {
        int M = rowSum.length;
        int N = colSum[0].length;
        if(M == 0 || N == 0){
            return new int[M][N];
        }
        if(M==1 && N==1){
            return new int[][]{rowSum[0]};
        }

        int[][] ans = new int[M][N];

        for(int i = 0; i < M; i++){
            for(int j = 0; j < N; j++){
                if(i == 0 && j == 0){
                    ans[i][j] = rowSum[i][j];
                }else{
                   int minV = Math.min(rowSum[i][0], colSum[0][j]);
                   ans[i][j] = minV;
                }
            }
        }

        return ans;

    }
}
```