package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class 861_DescriptionExample {

    @Test
    public void testHighestScore() {
        int[][] grid = {{0,0,1,1},{1,0,1,0},{1,1,0,0}};
        assertEquals(39, solution(grid));
    }

    @Test
    public void testLowestScore() {
        int[][] grid = {{0}};
        assertEquals(1, solution(grid));
    }

    @Test
    public void testOneRow() {
        int[][] grid = {{1, 1, 1, 1}, {0, 0, 0, 0}};
        assertEquals(10, solution(grid));
    }

    @Test
    public void testTwoCols() {
        int[][] grid = {{0, 1, 1}, {0, 0, 0}};
        assertEquals(2, solution(grid));
    }

    @Test
    public void testZeroScore() {
        int[][] grid = {{0}};
        assertEquals(0, solution(grid));
    }
}

public class Solution {
    public int matrixScore(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        boolean[] row = new boolean[rows];
        boolean[] col = new boolean[cols];

        for (int r = 0; r < rows; ++r) {
            for (int c = 0; c < cols; ++c) {
                if (grid[r][c] == 1)
                    row[r] = true;
                else
                    col[c] = true;
            }
        }

        int score = 0;

        while (row[0]) {
            for (int i = 1; i < rows; ++i) {
                if (!row[i])
                    row[i] = true;
                else
                    break;
            }
            for (int j = 1; j < cols; ++j)
                col[j] = !col[j - 1];
            for (int i = 0; i < rows; ++i) {
                score += (int)Math.pow(2, i) * row[i]
                         + (int)Math.pow(2, i) * col[i];
            }
        }

        return score;
    }
}