package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnly {

    public List<TreeNode> allPossibleFBT(int n) {
        if (n == 1) return new ArrayList<>(Arrays.asList(new TreeNode(0)));
        else return helper(n, new int[n]);
    }

    private List<TreeNode> helper(int n, int[] dp) {
        List<TreeNode> result = new ArrayList<>();
        for (int i = 1; i < n; i++) {
            if (dp[i] == -1) {
                TreeNode root = new TreeNode(0);
                dp[i] = root;
                result.add(root);
                List<TreeNode> left = helper(i, dp);
                List<TreeNode> right = helper(n - i - 1, dp);
                for (TreeNode node : left)
                    node.left = dp[i];
                for (TreeNode node : right)
                    node.right = dp[i];
            }
        }
        return result;
    }

}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }
}