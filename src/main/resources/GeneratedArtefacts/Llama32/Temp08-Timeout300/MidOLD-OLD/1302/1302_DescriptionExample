package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class 1302_DescriptionExample {

    public TreeNode buildTree(int[] arr) {
        if (arr == null || arr.length == 0)
            return null;

        int i = 0;
        while(i < arr.length && arr[i] == 0)
            i++;

        TreeNode root = new TreeNode(arr[i]);
        arr[i] = 0;

        for (int j = i + 1; j < arr.length; j++) {
            if (arr[j] != 0) {
                int leftVal = arr[j] * -1;
                TreeNode left = buildTree(getLeftArr(leftVal, arr));
                root.left = new TreeNode(-leftVal);
                root.left.val = leftVal;

                int rightVal = arr[j] * -1;
                TreeNode right = buildTree(getRightArr(rightVal, arr));
                root.right = new TreeNode(-rightVal);
                root.right.val = rightVal;
            }
        }

        return root;
    }

    private int[] getLeftArr(int leftVal, int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == -leftVal)
                return Arrays.copyOfRange(nums, i + 1, nums.length);
        }
        return null;
    }

    private int[] getRightArr(int rightVal, int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == -rightVal)
                return Arrays.copyOfRange(nums, i + 1, nums.length);
        }
        return null;
    }

    public static class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }

    @Test
    public void test1() {
        int[] nums = new int[]{1,2,3,4,5,null,6,7,null,null,null,null,8};
        TreeNode root = buildTree(nums);
        System.out.println(findLargestValue(root));
    }

    @Test
    public void test2() {
        int[] nums = new int[]{6,7,8,2,7,1,3,9,null,1,4,null,null,null,5};
        TreeNode root = buildTree(nums);
        System.out.println(findLargestValue(root));
    }

    @Test
    public void test3() {
        int[] nums = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        TreeNode root = buildTree(nums);
        System.out.println(findLargestValue(root));
    }

    @Test
    public void test4() {
        int[] nums = new int[]{1};
        TreeNode root = buildTree(nums);
        System.out.println(findLargestValue(root));
    }
    @Test
    public void test5() {
        int[] nums = new int[]{0, 100, 0, 0, 0, 0, 0, 0, 0, 0};
        TreeNode root = buildTree(nums);
        System.out.println(findLargestValue(root));
    }

    private int findLargestValue(TreeNode root) {
       if (root == null)
           return 0;

       int leftMax = findLargestValue(root.left);
       int rightMax = findLargestValue(root.right);

       if (leftMax > rightMax)
           return root.val + leftMax;
       else
           return root.val + rightMax;
   }
}