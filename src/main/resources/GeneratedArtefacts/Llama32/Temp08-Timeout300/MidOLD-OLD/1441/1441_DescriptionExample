```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Main {

    @Test
    public void testExample1() {
        int[] target = {1, 3};
        int n = 3;
        String[] result = new Solution().buildArray(target, n);
        assertEquals("[\"Push\",\"Push\",\"Pop\",\"Push\"]", java.util.Arrays.toString(result));
    }

    @Test
    public void testExample2() {
        int[] target = {1, 2, 3};
        int n = 3;
        String[] result = new Solution().buildArray(target, n);
        assertEquals("[\"Push\",\"Push\",\"Push\"]", java.util.Arrays.toString(result));
    }

    @Test
    public void testExample3() {
        int[] target = {1, 2};
        int n = 4;
        String[] result = new Solution().buildArray(target, n);
        assertEquals("[\"Push\",\"Push\"]", java.util.Arrays.toString(result));
    }

    @Test
    public void testExample4() {
        int[] target = {1};
        int n = 1;
        String[] result = new Solution().buildArray(target, n);
        assertEquals("[\"Push\"]", java.util.Arrays.toString(result));
    }

    @Test
    public void testExample5() {
        int[] target = {};
        int n = 3;
        String[] result = new Solution().buildArray(target, n);
        assertEquals([], java.util.Arrays.toString(result));
    }
}

class Solution {

    public String[] buildArray(int[] target, int n) {
        StringBuilder sb = new StringBuilder();
        boolean stackFull = false;
        for (int i = 1; i <= n; i++) {
            if (!stackFull && Arrays.binarySearch(target, i) < 0) {
                sb.append("Push");
                sb.append(",");
                stackFull = true;
            }
            else if(stackFull && Arrays.binarySearch(target, i) >= 0){
                sb.append("Pop");
                sb.append(",");
                stackFull = false;
            }
        }

        return sb.toString().split(",");

    }
}
```