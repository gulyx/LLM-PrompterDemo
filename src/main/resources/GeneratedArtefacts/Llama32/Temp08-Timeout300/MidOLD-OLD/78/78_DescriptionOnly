package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class '78_DescriptionOnly {

    @Test
    public void testPowerSet_EmptyArray() {
        int[] nums = {};
        String[][] result = powerSet(nums);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertTrue(result[0].length == 0);
    }

    @Test
    public void testPowerSet_SingleElement() {
        int[] nums = {1};
        String[][] result = powerSet(nums);
        assertNotNull(result);
        assertEquals(2, result.length);
        assertTrue(Arrays.asList(result[0]).contains("")); 
        assertTrue(Arrays.asList(result[0]).contains("1"));
        assertTrue(Arrays.asList(result[1]).contains("")); 
        assertTrue(Arrays.asList(result[1]).contains("1"));
    }

    @Test
    public void testPowerSet_MultipleElements() {
        int[] nums = {1, 2, 3};
        String[][] result = powerSet(nums);
        assertNotNull(result);
        assertEquals(8, result.length);
        assertTrue(Arrays.asList(result[0]).contains(""));
        assertTrue(Arrays.asList(result[0]).contains("1"));
        assertTrue(Arrays.asList(result[0]).contains("2"));
        assertTrue(Arrays.asList(result[0]).contains("3"));
        assertTrue(Arrays.asList(result[1]).contains("1"));
        assertTrue(Arrays.asList(result[1]).contains("2"));
        assertTrue(Arrays.asList(result[1]).contains("3"));
        assertTrue(Arrays.asList(result[2]).contains("1 2"));
        assertTrue(Arrays.asList(result[2]).contains("1 3"));
        assertTrue(Arrays.asList(result[2]).contains("2 3"));
        assertTrue(Arrays.asList(result[3]).contains("1 2 3"));
    }

    @Test
    public void testPowerSet_InvalidInput() {
        int[] nums = {1, 1, 2};
        String[][] result = powerSet(nums);
        assertNotNull(result);
        assertEquals(7, result.length);
    }

    @Test
    public void testPowerSet_NullArray() {
        int[] nums = null;
        try {
            powerSet(nums);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // expected
        }
    }

}