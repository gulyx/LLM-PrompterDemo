```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1008_DescriptionExample {

    @Test
    public void test_1() {
        TreeNode root = new TreeNode(8);
        root.left = new TreeNode(5);
        root.right = new TreeNode(10);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(7);
        root.right.right = new TreeNode(12);
        assertEquals(root, new Solution().buildTree(new int[]{8, 5, 1, 7, 10, 12}));
    }

    @Test
    public void test_2() {
        TreeNode root = new TreeNode(1);
        root.right = new TreeNode(3);
        assertEquals(root, new Solution().buildTree(new int[]{1, 3}));
    }

    @Test
    public void test_3() {
        TreeNode root = null;
        assertEquals(root, new Solution().buildTree(new int[]{}));
    }

    @Test
    public void test_4() {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        assertEquals(root, new Solution().buildTree(new int[]{1, 2, 3}));
    }

    @Test
    public void test_5() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(5);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(7);
        root.left.right = new TreeNode(8);
        root.right.left = new TreeNode(9);
        assertEquals(root, new Solution().buildTree(new int[]{4, 5, 6, 7, 8, 9}));
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Solution {
    public TreeNode buildTree(int[] preorder) {
        if (preorder.length == 0) return null;
        TreeNode root = new TreeNode(preorder[0]);
        int i = 1;
        for (; i < preorder.length; i++) {
            if (preorder[i] != 0) {
                root.left = new TreeNode(preorder[i]);
            } else {
                break;
            }
        }
        for (i++; i < preorder.length; i++) {
            if (preorder[i] != 0) {
                root.right = new TreeNode(preorder[i]);
            } else {
                break;
            }
        }
        return root;
    }
}
```