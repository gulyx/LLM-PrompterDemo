package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1038_DescriptionOnly {

    @Test
    public void testConvertBSTtoGreaterTree_WhenRootIsNull_ReturnsNull() {
        TreeNode root = null;
        TreeNode actual = new Solution().bstToGst(root);
        assertNull(actual);
    }

    @Test
    public void testConvertBSTtoGreaterTree_WhenRootHasOneChild_ReturnsCorrectGreaterTree() {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(8);

        Solution solution = new Solution();
        TreeNode actual = solution.bstToGst(root);
        assertEquals(new TreeNode(18), actual);
    }

    @Test
    public void testConvertBSTtoGreaterTree_WhenRootHasTwoChildren_ReturnsCorrectGreaterTree() {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(8);

        Solution solution = new Solution();
        TreeNode actual = solution.bstToGst(root);
        assertEquals(new TreeNode(18), actual);
    }

    @Test
    public void testConvertBSTtoGreaterTree_WhenRootHasThreeChildren_ReturnsCorrectGreaterTree() {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(8);
        root.right.left = new TreeNode(1);

        Solution solution = new Solution();
        TreeNode actual = solution.bstToGst(root);
        assertEquals(new TreeNode(18), actual);
    }

    @Test
    public void testConvertBSTtoGreaterTree_WhenRootHasFourChildren_ReturnsCorrectGreaterTree() {
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(8);
        root.right.left = new TreeNode(1);

        Solution solution = new Solution();
        TreeNode actual = solution.bstToGst(root);
        assertEquals(new TreeNode(23), actual);
    }
}