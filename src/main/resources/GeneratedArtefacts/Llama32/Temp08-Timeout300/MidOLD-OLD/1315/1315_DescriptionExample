```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    public TreeNode buildTree(int[] nums) {
        if (nums.length == 0) return null;
        TreeNode root = new TreeNode(nums[0]);
        Integer index = 1;
        for (int num : nums) {
            TreeNode current = root;
            while (num != -1) {
                if (current.left == null) {
                    current.left = new TreeNode(num);
                    break;
                }
                else if (current.right == null) {
                    current.right = new TreeNode(num);
                    break;
                }
                current = current.left;
                num = nums[index++];
            }
        }
        return root;
    }

    @Test
    public void test1() {
        int[] nums = {6,7,8,2,7,1,3,9,null,1,4,null,null,null,5};
        TreeNode root = buildTree(nums);
        System.out.println(describe(root));
        assertEquals(18, sumEvenGrandparent(root));
    }

    @Test
    public void test2() {
        int[] nums = {1};
        TreeNode root = buildTree(nums);
        System.out.println(describe(root));
        assertEquals(0, sumEvenGrandparent(root));
    }

    @Test
    public void test3() {
        int[] nums = {8,6,10,4,7,null,2,9};
        TreeNode root = buildTree(nums);
        System.out.println(describe(root));
        assertEquals(18, sumEvenGrandparent(root));
    }

    @Test
    public void test4() {
        int[] nums = {};
        TreeNode root = buildTree(nums);
        System.out.println(describe(root));
        assertEquals(0, sumEvenGrandparent(root));
    }

    @Test
    public void test5() {
        int[] nums = {1,2};
        TreeNode root = buildTree(nums);
        System.out.println(describe(root));
        assertEquals(0, sumEvenGrandparent(root));
    }

    private int sumEvenGrandparent(TreeNode root) {
        if (root == null) return 0;
        if (root.left != null && root.left.val % 2 == 0) return root.left.val;
        if (root.right != null && root.right.val % 2 == 0) return root.right.val;
        return sumEvenGrandparent(root.left) + sumEvenGrandparent(root.right);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
```