```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
public class DescriptionExample {

    @Test
    public void test1() {
        int[] nums = {3,2,4,6};
        assertEquals(7, maxXOR(nums));
    }

    @Test
    public void test2() {
        int[] nums = {1,2,3,9,2};
        assertEquals(11, maxXOR(nums));
    }

    @Test
    public void test3() {
        int[] nums = {1,0,1};
        assertEquals(1, maxXOR(nums));
    }

    @Test
    public void test4() {
        int[] nums = {1,2,3};
        assertEquals(3, maxXOR(nums));
    }

    @Test
    public void test5() {
        int[] nums = {0,1,2};
        assertEquals(3, maxXOR(nums));
    }
}

public class Solution {

    private static final int INF = (int) 1e9;

    public int maxXOR(int[] nums) {
        int n = nums.length;
        boolean[][] dp = new boolean[n][32];

        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        for (int j = 1; j < 32; j++) {

            for (int i = 0; i < n; i++) {
                if (!dp[i][j-1]) {
                    continue;
                }
                int xorResult = nums[i] ^ j;

                for (int k = 30; k >= 0; k--) {
                    if ((xorResult >> k) % 2 == 1) {
                        dp[i][k+1] = true;
                    } else {
                        break;
                    }
                }
            }
        }

        int res = 0;
        for (int i = 30; i >= 0; i--) {
            if (dp[n-1][i]) {
                res += pow(2, i);
            }
        }

        return res;
    }

    private static final int MOD = (int) 1e9 + 7;

    public int pow(int x, int y) {
        long res = 1l;
        while(y > 0){
          if ((y&1)!=0)
              res = (res*x)%MOD;
          x = (x*x)%MOD;
          y >>= 1;
        }
        return (int)(res%MOD);
    }

}
```