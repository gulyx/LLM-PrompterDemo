package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import java.util.Arrays;

public class 3211_DescriptionOnly {

    @Test
    void testValidStrings_1() {
        int n = 3;
        String[] result = generateValidBinaryStrings(n);
        String[] expected = { "110", "101", "111" };
        assertArrayEquals(expected, result);
    }

    @Test
    void testValidStrings_2() {
        int n = 1;
        String[] result = generateValidBinaryStrings(n);
        String[] expected = { "1" };
        assertArrayEquals(expected, result);
    }

    @Test
    void testValidStrings_3() {
        int n = 10;
        String[] result = generateValidBinaryStrings(n);
        String[] expected = { "1111111111", "1010101010", "1100110011" };
        assertArrayEquals(expected, result);
    }

    @Test
    void testGenerateValidBinaryStrings_EmptyString() {
        int n = 0;
        String[] result = generateValidBinaryStrings(n);
        String[] expected = {};
        assertArrayEquals(expected, result);
    }

    @Test
    void testGenerateValidBinaryStrings_NullInput() {
        int n = -1;
        assertThrows(IllegalArgumentException.class, () -> generateValidBinaryStrings(n));
    }
}

private String[] generateValidBinaryStrings(int n) {
        if (n <= 0) return new String[0];
        if (n == 1) return new String[] { "1" };
        int cnt = 0;
        for (int i=0; i<n-2; ++i) {
            if (((~(Math.pow(2, i+1)-1))&(~(Math.pow(2,i))))!=0) cnt++;
        }
        return new String[cnt];
    }