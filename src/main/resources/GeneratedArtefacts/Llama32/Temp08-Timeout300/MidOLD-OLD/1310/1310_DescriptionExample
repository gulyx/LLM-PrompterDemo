package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class 1310_DescriptionExample {

    @Test
    public void test_first_example() {
        int[] arr = {1,3,4,8};
        int[][] queries = {{0,1},{1,2},{0,3},{3,3}};
        int[] answer = xorQueries(arr, queries);
        assertArrayEquals(new int[]{2,7,14,8}, answer);
    }

    @Test
    public void test_second_example() {
        int[] arr = {4,8,2,10};
        int[][] queries = {{2,3},{1,3},{0,0},{0,3}};
        int[] answer = xorQueries(arr, queries);
        assertArrayEquals(new int[]{8,0,4,4}, answer);
    }

    @Test
    public void test_third_example() {
        int[] arr = {1,2,3,4,5};
        int[][] queries = {{0,1},{1,2},{2,3},{3,4}};
        int[] answer = xorQueries(arr, queries);
        assertArrayEquals(new int[]{1,2,6,12}, answer);
    }

    @Test
    public void test_fourth_example() {
        int[] arr = {10,20,30,40};
        int[][] queries = {{0,3},{0,1},{3,3},{3,2}};
        int[] answer = xorQueries(arr, queries);
        assertArrayEquals(new int[]{0,10,60,18}, answer);
    }

    @Test
    public void test_fifth_example() {
        int[] arr = {5,7,12,9,1};
        int[][] queries = {{0,2},{2,3},{4,5}};
        int[] answer = xorQueries(arr, queries);
        assertArrayEquals(new int[]{15,11,8}, answer);
    }

    public static int[] xorQueries(int[] arr, int[][] queries) {
        int n = arr.length;
        int[] res = new int[queries.length];
        int curr_xor = 0;
        for (int i = 0; i < n; ++i) {
            curr_xor ^= arr[i];
            if (i + 1 == n || queries[i][0] > i) {
                res[i] = curr_xor;
                curr_xor = 0;
            }
        }

        for (int i = 0; i < queries.length; ++i) {
            int l = queries[i][0], r = queries[i][1];
            if (r - l + 1 <= n) {
                res[i] ^= arr[l] ^ arr[r];
            }
        }

        return res;
    }
}