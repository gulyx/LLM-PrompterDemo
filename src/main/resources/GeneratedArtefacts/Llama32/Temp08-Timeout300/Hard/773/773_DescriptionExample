```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

public class773_DescriptionExample {

    public static void main(String[] args) {
        System.out.println(findLeastMoves(new int[][]{{1,2,3},{4,0,5}})); // Output: 1
        System.out.println(findLeastMoves(new int[][]{{1,2,3},{5,4,0}})); // Output: -1
        System.out.println(findLeastMoves(new int[][]{{4,1,2},{5,0,3}})); // Output: 5
    }

    public static int findLeastMoves(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        boolean done = false;
        int moves = 0;

        while (!done) {

            boolean swapped = false;

            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 0) {
                        int min = Integer.MAX_VALUE;
                        int max = Integer.MIN_VALUE;
                        int tmp;

                        if (i > 0)
                            min = Math.min(min, board[i-1][j]);
                        if (i < m - 1)
                            min = Math.min(min, board[i+1][j]);
                        if (j > 0)
                            max = Math.max(max, board[i][j-1]);
                        if (j < n - 1)
                            max = Math.max(max, board[i][j+1]);

                        if ((min != Integer.MAX_VALUE && min != 0) || (max != Integer.MIN_VALUE && max != 5)) {

                            swapped = true;
                            tmp = board[i][j];
                            moves++;
                            board[i][j] = 5 - min;

                            if (i > 0)
                                board[i-1][j] = Math.min(board[i-1][j], tmp);
                            if (i < m - 1)
                                board[i+1][j] = Math.max(board[i+1][j], tmp);
                            if (j > 0)
                                board[i][j-1] = max;
                            if (j < n - 1)
                                board[i][j+1] = min;

                        }
                    }

                }
            }

            done = true;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] != (i*3+j+1)) {
                        done = false;
                        break;
                    }
                }
            }

        }

        return moves;

    }

}
```