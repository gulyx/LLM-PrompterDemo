package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1255;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int maxScoreWords(String[] words, char[] letters, int[] score) {
        Map<Character, Integer> letterMap = new HashMap<>();
        for (char c : letters) {
            letterMap.put(c, letterMap.getOrDefault(c, 0) + 1);
        }

        long[][] dp = new long[words.length][letterMap.size() + 1];
        Arrays.fill(dp[0], -1000000000);

        return findMaxScore(words, dp, score, letterMap, 0);
    }

    private int findMaxScore(String[] words, long[][] dp, int[] score, Map<Character, Integer> letterMap, int i) {
        if (i == words.length) {
            long sum = 0;
            for (int j = 0; j < dp[0].length; j++) {
                sum += dp[i][j];
            }
            return (int) sum;
        }

        int maxScore = -1000000000;
        for (int j = 1; j <= letterMap.size(); j++) {
            if (!canUse(words[i], j, dp[i], score, letterMap)) continue;
            long next = findMaxScore(words, dp, score, letterMap, i + 1) + getCost(words[i], j, score);
            maxScore = Math.max(maxScore, next);
        }

        dp[i][0] = maxScore;
        return (int) maxScore;
    }

    private boolean canUse(String word, int index, long[][] dp, int[] score, Map<Character, Integer> letterMap) {
        if (index > letterMap.size()) return false;
        char c = word.charAt(index - 1);
        if (!letterMap.containsKey(c)) return false;

        long cost = getCost(word, index, score);
        if (dp[0][index] + cost < dp[word.length()][index]) {
            letterMap.put(c, letterMap.get(c) - 1);
            dp[word.length()][index] = dp[word.length()][index] + cost;
            return true;
        }

        return false;
    }

    private int getCost(String word, int index, int[] score) {
        char c = word.charAt(index - 1);
        if (letterMap.containsKey(c)) {
            letterMap.put(c, letterMap.get(c) - 1);
            return score[c - 'a'];
        }
        throw new RuntimeException();
    }

}