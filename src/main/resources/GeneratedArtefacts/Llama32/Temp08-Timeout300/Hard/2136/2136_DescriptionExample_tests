```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void [--Example 1--]void testOne() {
        int[] plantTime = {1,4,3};
        int[] growTime = {2,3,1};
        assertEquals(9, earliestDayTo Bloom(plantTime, growTime));
    }

    @Test
    public void [--Example 2--]void testTwo() {
        int[] plantTime = {1,2,3,2};
        int[] growTime = {2,1,2,1};
        assertEquals(9, earliestDayToBloom(plantTime, growTime));
    }

    @Test
    public void [--Example 3--]void testThree() {
        int[] plantTime = {1};
        int[] growTime = {1};
        assertEquals(2, earliestDayToBloom(plantTime, growTime));
    }

    @Test
    public void [--Example 4--]void testFour() {
        int[] plantTime = {3,1,2};
        int[] growTime = {2,1,3};
        assertEquals(6, earliestDayToBloom(plantTime, growTime));
    }

    @Test
    public void [--Example 5--]void testFive() {
        int[] plantTime = {5,1,1,3};
        int[] growTime = {2,1,4,2};
        assertEquals(9, earliestDayToBloom(plantTime, growTime));
    }

    private int earliestDayToBloom(int[] plantTime, int[] growTime) {
        int n = plantTime.length;
        int day = 0;
        boolean[] donePlanting = new boolean[n];
        while (!isAllDone(donePlanting)) {
            for (int i = 0; i < n; i++) {
                if (!donePlanting[i] && plantTime[i] > 0) {
                    plantTime[i]--;
                } else if (plantTime[i] == 0) {
                    donePlanting[i] = true;
                }
            }
            day++;
        }
        for (int i = 0; i < n; i++) {
            day += growTime[i];
        }
        return day;
    }

    private boolean isAllDone(boolean[] array) {
        for (boolean b : array) {
            if (!b) {
                return false;
            }
        }
        return true;
    }
}
```