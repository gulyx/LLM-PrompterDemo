package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1284;

public class Solution {
    public int minFlips(int[][] mat) {
        return findMat(mat, 0);
    }

    private int findMat(int[][] mat, int curRow) {
        if (curRow == mat.length) {
            for (int i = 0; i < mat[0].length; i++) {
                if (mat[curRow][i] != 0)
                    return -1;
            }
            return 0;
        }

        int res = 0, cnt = 0;
        for (int j = 0; j < mat[0].length; j++) {
            cnt += mat[curRow][j];
            if (mat[curRow][j] == 0) continue;

            boolean flag = true;
            for (int i = -1; i <= 1; i++) {
                int trow = curRow + i, tcol = j + i;
                if (trow >= 0 && trow < mat.length && tcol >= 0 && tcol < mat[0].length) {
                    if (mat[trow][tcol] == 1)
                        flag = false;
                }
            }

            if (!flag) {
                res += cnt - 1;
                for (int i = 0; i < mat[0].length; i++) {
                    mat[curRow][i] ^= 1;
                    if (mat[curRow][i] == 0)
                        continue;
                    for (int j = -1; j <= 1; j++) {
                        int trow = curRow + j, tcol = i + j;
                        if (trow >= 0 && trow < mat.length && tcol >= 0 && tcol < mat[0].length) {
                            mat[trow][tcol] ^= 1;
                        }
                    }
                }

                res += findMat(mat, curRow + 1);
            } else {
                res = Math.min(res, cnt);
            }
        }
        return res;
    }
}