```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DescriptionExample {

    public int minFlipsBinaryMatrix(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;
        boolean[][] directions = {{0,1},{-1,0},{0,-1},{1,0}};
        int steps = 0;
        boolean[][] visited = new boolean[rows][cols];
        java.util.Queue<int[]> queue = new java.util.ArrayDeque<>();
        queue.add(new int[]{0,0});
        while(!queue.isEmpty()){
            int[] currentCell = queue.poll();
            if(mat[currentCell[0]][currentCell[1]] == 0) continue;
            mat[currentCell[0]][currentCell[1]] = 0;
            visited[currentCell[0]][currentCell[1]] = true;

            for(int i=0;i<4;i++){
                int newRow = currentCell[0]+directions[i][0];
                int newCol = currentCell[1] + directions[i][1];

                if(newRow>=0 &&newRow<rows && newCol >= 0 && newCol < cols && !visited[newRow][newCol]){
                    queue.add(new int[]{newRow, newCol});
                }
            }

            steps++;
        }

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++)if(mat[i][j] == 1) return -1;
        }
        return steps;
    }

    @Test
    public void testMinFlipsBinaryMatrixExample1() {
        int[][] mat = {{0, 0}, {0, 1}};
        assertEquals(3, new DescriptionExample().minFlipsBinaryMatrix(mat));
    }

    @Test
    public void testMinFlipsBinaryMatrixExample2() {
        int[][] mat = {{0}};
        assertEquals(0, new DescriptionExample().minFlipsBinaryMatrix(mat));
    }

    @Test
    public void testMinFlipsBinaryMatrixExample3() {
        int[][] mat = {{1, 0, 0}, {1, 0, 0}};
        assertEquals(-1, new DescriptionExample().minFlipsBinaryMatrix(mat));
    }
}
```