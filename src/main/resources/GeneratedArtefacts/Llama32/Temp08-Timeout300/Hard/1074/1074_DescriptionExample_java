package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1074;

import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        long[][] dp = new long[rows][cols];

        for (int j = 0; j < cols; j++) {
            Map<Long, Integer> sumMap = new HashMap<>();
            sumMap.put(0L, 1);
            dp[0][j] = matrix[0][j];
            for (int i = 1; i < rows; i++) {
                dp[i][j] = dp[i - 1][j] + matrix[i][j];
                long sum = dp[i][j];
                if (!sumMap.containsKey(sum)) {
                    sumMap.put(sum, 0);
                }
                sumMap.put(sum, sumMap.get(sum) + 1);
            }
        }

        int count = 0;
        for (int j = 0; j < cols; j++) {
            Map<Long, Integer> sumMap = new HashMap<>();
            sumMap.put(0L, 1);
            for (int i = 0; i < rows; i++) {
                dp[i][j] += dp[i - 1][j];
                long sum = dp[i][j];
                if (!sumMap.containsKey(sum)) {
                    sumMap.put(sum, 0);
                }
                count += sumMap.get(sum);
                sumMap.put(sum, sumMap.get(sum) + 1);
            }
        }

        return count - rows * cols;
    }

}