```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class DescriptionOnlyTest {
    @Test
    public void test_1() {
        int[][] grid = {{1,2},{3,0}};
        assertEquals(1, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{1,2},{0,0}};
        assertEquals(2, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{-1,-1},{0,0}};
        assertEquals(-1, numUniquePaths(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{1,2},{1,2}};
        assertEquals(6, numUniquePaths(grid));
    }

    @Test
    public void test_5() {
        int[][] grid = {{1,-1},{-1,2}};
        assertEquals(-1, numUniquePaths(grid));
    }
}

public class Solution {

    private static final int[] DX = {-1,0,1,0};
    private static final int[] DY = {0,1,0,-1};

    public int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean[][] visited = new boolean[m][n];

        return dfs(grid, 0, 0, -1, 0, visited);
    }

    private int dfs(int[][] grid, int x, int y, int lastX, int lastY, boolean[][] visited) {
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || visited[x][y] || grid[x][y] == -1)
            return 0;

        if (grid[x][y] != 0 && lastX != -1) {
            visited[lastX][lastY] = true;
            int count = 1;
            for (int i = 0; i < 4; i++) {
                int newX = x + DX[i];
                int newY = y + DY[i];
                if (!visited[newX][newY]) {
                    count += dfs(grid, newX, newY, x, y, visited);
                }
            }

            return count;
        } else if (grid[x][y] == 1) {
            return 0;
        } else if (grid[x][y] == 2) {
            return 1;
        } else {
            int result = 0;
            for (int i = 0; i < 4; i++) {
                int newX = x + DX[i];
                int newY = y + DY[i];
                if (!visited[newX][newY]) {
                    visited[newX][newY] = true;
                    result += dfs(grid, newX, newY, x, y, visited);
                }
            }

            return result;
        }
    }
}
```