package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.980;

public class Solution {
    public int uniquePathsIII(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int startRow = -1;
        int startCol = -1;
        int emptyCellsCount = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    startRow = i;
                    startCol = j;
                } else if (grid[i][j] != -1 && grid[i][j] != 2) {
                    emptyCellsCount++;
                }
            }
        }

        int result = dfs(grid, rows, cols, startRow, startCol, emptyCellsCount);

        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int dfs(int[][] grid, int rows, int cols, int row, int col, int emptyCells) {
        if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] == -1) return Integer.MAX_VALUE;

        if (grid[row][col] == 2) {
            return emptyCells == 0 ? 1 : Integer.MAX_VALUE;
        }

        int temp = grid[row][col];
        grid[row][col] = -1;
        int result = dfs(grid, rows, cols, row + 1, col, emptyCells - 1);
        if (result != Integer.MAX_VALUE) return result;

        result = dfs(grid, rows, cols, row - 1, col, emptyCells - 1);
        if (result != Integer.MAX_VALUE) return result;

        result = dfs(grid, rows, cols, row, col + 1, emptyCells - 1);
        if (result != Integer.MAX_VALUE) return result;

        result = dfs(grid, rows, cols, row, col - 1, emptyCells - 1);
        if (result != Integer.MAX_VALUE) return result;

        grid[row][col] = temp;
        return Integer.MAX_VALUE;
    }
}