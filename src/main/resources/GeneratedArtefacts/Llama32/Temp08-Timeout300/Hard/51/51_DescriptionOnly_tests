package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class SolutionTest {
 

     public void testPlaceQueenAtBeginningOfBoard() {
 
         int[][] solution = new int[5][8];
 
         solution[0][0] = 1;
         solution[0][1] = 2;
         solution[0][4] = 6;
         solution[0][3] = 7;
         solution[0][7] = 8;
 
         assertEquals(2, getSolutionCount(solution));
     }
 
 
     public void testPlaceQueenInMiddleOfBoard() {
 
         int[][] solution = new int[5][8];
 
         solution[1][4] = 3;
         solution[1][0] = 2;
         solution[1][7] = 6;
         solution[1][3] = 7;
         solution[1][5] = 8;
         solution[1][2] = 1;
 
         assertEquals(2, getSolutionCount(solution));
     }
 
 
     public void testPlaceQueenAtEndOfBoard() {
 
         int[][] solution = new int[5][8];
 
         solution[4][0] = 2;
         solution[4][1] = 3;
         solution[4][7] = 6;
         solution[4][3] = 7;
         solution[4][5] = 8;
         solution[4][2] = 1;
 
         assertEquals(2, getSolutionCount(solution));
     }
 
 
     public void testPlaceQueenInFirstColumn() {
 
         int[][] solution = new int[5][8];
 
         solution[0][0] = 3;
         solution[0][1] = 4;
         solution[0][7] = 6;
         solution[0][3] = 7;
         solution[0][5] = 8;
         solution[0][2] = 1;
 
         assertEquals(2, getSolutionCount(solution));
     }
 
 
     public void testPlaceQueenInLastColumn() {
 
         int[][] solution = new int[5][8];
 
         solution[4][7] = 3;
         solution[4][0] = 2;
         solution[4][1] = 4;
         solution[4][3] = 6;
         solution[4][5] = 7;
         solution[4][2] = 8;
 
         assertEquals(2, getSolutionCount(solution));
     }
 
 
     private int getSolutionCount(int[][] board) {
 
         int count = 0;
         boolean isValid = false
 
             for (int col = 0; col < board.length; col++) {
                 int row = findRow(board, col);
                 if (row == -1) continue;
                 else {
                     for (int r2 = row + 1; r2 < board.length; r2++) {
                         int rightPos = findRightPos(board, r2, col);
                         if (rightPos != -1 && rightPos < board.length)
                             isValid = false
                             break;
                     }
                     if (!isValid) continue;
                     else count++;
                 }
             }
         return count;
 
     }
 
 
     private int findRow(int[][] board, int col) {
 
         for (int r = 0; r < board[0].length; r++) {
 
             if (board[r][col] == 1) {
                 return -1;
             } else
             if (r != 0 && board[r-1][col] == 1) {
                 return -1;
             }
         }
         return r;
     }
 
 
     private int findRightPos(int[][] board, int row, int col) {
 
         for (int i = col + 1; i < board[0].length; i++) {
 
             if (board[row][i] == 1)
                 return -1;
         }
 
         return i;
     }
 }