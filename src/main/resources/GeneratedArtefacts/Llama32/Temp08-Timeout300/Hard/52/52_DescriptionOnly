```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Solution {

    public int totalNQueens(int n) {
        boolean[] col = new boolean[n];
        boolean[] posDiag1 = new boolean[2 * n - 1];
        boolean[] posDiag2 = new boolean[2 * n - 1];

        int count = 0;
        backtrack(col, posDiag1, posDiag2, n, 0, count);
        return count;
    }

    private void backtrack(boolean[] col, boolean[] posDiag1, boolean[] posDiag2, int row, int colPos, int count) {
        for (int i = 0; i < col.length; i++) {
            if (col[i] || posDiag1[row + i] || posDiag2[row - i]) {
                continue;
            }
            boolean[][] tempCol = new boolean[col.length][];
            System.arraycopy(col, 0, tempCol, 0, i);
            tempCol[i] = true;
            boolean[][] tempPosDiag1 = new boolean[posDiag1.length][];
            System.arraycopy(posDiag1, 0, tempPosDiag1, 0, row + i);
            tempPosDiag1[row + i] = true;
            boolean[][] tempPosDiag2 = new boolean[posDiag2.length][];
            System.arraycopy(posDiag2, 0, tempPosDiag2, 0, row - i);
            tempPosDiag2[row - i] = true;

            count++;

            backtrack(tempCol, tempPosDiag1, tempPosDiag2, row + 1, colPos, count);

            // Backtrack
            for (int j = 0; j <= col.length; j++) {
                col[j] = tempCol[j];
                posDiag1[row + i] = tempPosDiag1[row + i];
                posDiag2[row - i] = tempPosDiag2[row - i];
            }
        }
    }

}

```