```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class 1944_DescriptionExample {

    @Test
    public void testCanSeePersonsRight() {
        int[] heights = {10,6,8,5,11,9};
        int[] expectedOutput = {3,1,2,1,1,0};
        assertEquals(expectedOutput, canSeePersonsRight(heights));
    }

    @Test
    public void testCanSeePersonsRight_2() {
        int[] heights = {5,1,2,3,10};
        int[] expectedOutput = {4,1,1,1,0};
        assertEquals(expectedOutput, canSeePersonsRight(heights));
    }

    @Test
    public void testCanSeePersonsRight_3() {
        int[] heights = {6,5,4,8,9,10,5};
        int[] expectedOutput = {2,1,1,0,0,0,1};
        assertEquals(expectedOutput, canSeePersonsRight(heights));
    }

    @Test
    public void testCanSeePersonsRight_4() {
        int[] heights = {1,3,2,2,5,4};
        int[] expectedOutput = {2,1,1,0,0,1};
        assertEquals(expectedOutput, canSeePersonsRight(heights));
    }

    @Test
    public void testCanSeePersonsRight_5() {
        int[] heights = {6,11,4,8,10,5};
        int[] expectedOutput = {2,1,0,1,0,1};
        assertEquals(expectedOutput, canSeePersonsRight(heights));
    }

    private int[] canSeePersonsRight(int[] heights) {
        int n = heights.length;
        int[] answer = new int[n];
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[stack.peekLast()] < heights[i]) {
                stack.removeLast();
            }
            if (!stack.isEmpty()) {
                answer[i] = i - stack.peekLast();
            } else {
                answer[i] = 0;
            }
            stack.addLast(i);
        }
        return answer;
    }
}
```