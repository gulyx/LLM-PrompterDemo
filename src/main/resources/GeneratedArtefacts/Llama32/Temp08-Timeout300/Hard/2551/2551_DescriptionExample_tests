```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void test_maxScoreMinScoreDiff() {
        int[] weights = {1, 3, 5, 1};
        int k = 2;
        assertEquals(4, maxMinScoreDiff(weights, k));
    }

    @Test
    public void test_minScoreMaxScoreDiff() {
        int[] weights = {1, 3};
        int k = 2;
        assertEquals(0, maxMinScoreDiff(weights, k));
    }

    @Test
    public void test_maxScoreNoBags() {
        int[] weights = {1000000000, 1000000000};
        int k = 2;
        assertEquals(2000000000, maxMinScoreDiff(weights, k));
    }

    @Test
    public void test_minScoreOneBag() {
        int[] weights = {1, 3};
        int k = 1;
        assertEquals(4, maxMinScoreDiff(weights, k));
    }

    @Test
    public void test_maxMinScoreDiffNoBags() {
        int[] weights = {1000000000, 1000000000};
        int k = 2;
        assertEquals(2000000000 - 2000000000, maxMinScoreDiff(weights, k));
    }
}

public class Solution {

    public long maxMinScoreDiff(int[] weights, int k) {
        int n = weights.length;
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (i == 0) {
                    dp[i][j] = 0;
                } else if (j > 0) {
                    int left = i - 1;
                    int right = i;
                    dp[i][j] = Long.MAX_VALUE;
                    for (int l = left; l >= 0 && l <= right; l--) {
                        long costL = weights[l];
                        long costR = weights[right];
                        if (right == left) {
                            costR += costL;
                        } else {
                            int mid = (left + right) / 2;
                            dp[mid][j - 1] = Math.min(dp[mid][j - 1], costL);
                            dp[left][j - 1] = Math.min(dp[left][j - 1], costR);
                        }
                        if (dp[i][j] > costL + costR) {
                            dp[i][j] = costL + costR;
                        }
                    }
                } else {
                    int right = i;
                    for (int r = right; r >= 0; r--) {
                        long costR = weights[r];
                        if (r == left) {
                            costR += costL;
                        } else {
                            int mid = (left + r) / 2;
                            dp[mid][j - 1] = Math.min(dp[mid][j - 1], costR);
                        }
                        if (dp[i][j] > costR) {
                            dp[i][j] = costR;
                        }
                    }
                }
            }
        }

        long maxScore = Long.MIN_VALUE;
        for (int i = 0; i < k; i++) {
            maxScore = Math.max(maxScore, dp[n - 1][i]);
        }
        long minScore = Long.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            minScore = Math.min(minScore, dp[i][k - 1]);
        }

        return maxScore - minScore;
    }
}
```