```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2551;

public class Solution {
    public int minCost(int[] weights, int k) {
        int n = weights.length;
        long[] prefixSum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + weights[i];
        }
        
        long minCost = Long.MAX_VALUE;
        long maxCost = 0;
        for (int l = 0; l < n; l++) {
            int r = l + 1;
            while (r <= n) {
                int range = r - l;
                long cost = prefixSum[l] + prefixSum[n] - prefixSum[r];
                maxCost = Math.max(maxCost, cost);
                minCost = Math.min(minCost, cost + weights[l] + weights[r - 1]);
                
                if (r == n) break;
                r += range;
            }
        }
        
        return (int)(maxCost - minCost);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] weights1 = {1,3,5,1};
        int k1 = 2;
        System.out.println(solution.minCost(weights1, k1)); // Output: 4

        int[] weights2 = {1,3};
        int k2 = 2;
        System.out.println(solution.minCost(weights2, k2)); // Output: 0
    }
}
```