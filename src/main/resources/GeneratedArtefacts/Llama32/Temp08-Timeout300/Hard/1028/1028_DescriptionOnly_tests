package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1028_DescriptionOnlyTest {

    @Test
    public void testRecoverFromPreorderDepthFirstSearch_DifferentNodesSameVal() {
        // Create the binary tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);

        String traversal = "D1D2D3";
        TreeNode reconstructedRoot = recoverFromPreorderDepthFirstSearch(traversal, 0, 1);
        assertEquals(root.val, reconstructedRoot.val, 0.0);
        assertEquals(root.left, reconstructedRoot.left, 0.0);
        assertEquals(root.right, reconstructedRoot.right, 0.0);
    }

    @Test
    public void testRecoverFromPreorderDepthFirstSearch_SameNodeDifferentVals() {
        // Create the binary tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(1);

        String traversal = "D1D21D";
        TreeNode reconstructedRoot = recoverFromPreorderDepthFirstSearch(traversal, 0, 1);
        assertEquals(root.val, reconstructedRoot.val, 0.0);
        assertEquals(root.left, reconstructedRoot.left, 0.0);
        assertEquals(root.right, reconstructedRoot.right, 0.0);
    }

    @Test
    public void testRecoverFromPreorderDepthFirstSearch_SameNodeAndChildrenSameVal() {
        // Create the binary tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);

        String traversal = "D1DD21DD";
        TreeNode reconstructedRoot = recoverFromPreorderDepthFirstSearch(traversal, 0, 1);
        assertEquals(root.val, reconstructedRoot.val, 0.0);
        assertEquals(root.left, reconstructedRoot.left, 0.0);
        assertEquals(root.right, reconstructedRoot.right, 0.0);
    }

    @Test
    public void testRecoverFromPreorderDepthFirstSearch_SingleNodeTree() {
        // Create the binary tree
        TreeNode root = new TreeNode(1);

        String traversal = "D1";
        TreeNode reconstructedRoot = recoverFromPreorderDepthFirstSearch(traversal, 0, 1);
        assertEquals(root.val, reconstructedRoot.val, 0.0);
    }

    @Test
    public void testRecoverFromPreorderDepthFirstSearch_EmptyTree() {
        String traversal = "";
        TreeNode reconstructedRoot = recoverFromPreorderDepthFirstSearch(traversal, 0, 1);
        assertNull(reconstructedRoot);
    }
}