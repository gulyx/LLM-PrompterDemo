```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

public class BinaryTreeRecovery {
    public TreeNode recoverFromTraversal(String traversal) {
        String[] nodes = traversal.split("-");
        int n = nodes.length;
        int index = 0;
        return dfs(1, 0, nodes, index);
    }

    private TreeNode dfs(int depth, int index, String[] nodes, int& i) {
        if (nodes[i].isEmpty()) {
            i++;
            return null;
        }
        if (nodes[i].charAt(0) == '-') {
            i++;
            return dfs(depth + 1, index, nodes, i);
        } else {
            TreeNode node = new TreeNode(nodes[i].charAt(0) - '0');
            node.left = dfs(depth + 1, i + 1, nodes, i + 1);
            if (nodes[index].length() > index + 1 && nodes[index + 1].equals("-")) {
                node.right = null;
            } else {
                node.right = dfs(depth + 1, i + 2, nodes, i + 2);
            }
            return node;
        }
    }

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) { val = x; }
    }
}
```