package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1368_DescriptionOnlyTest {

    @Test
    public void testMinimumCost() {
        int[][] grid = {{2,3,4},{1,5,8},{4,2,-1}};
        assertEquals(9, minimumCost(grid));
    }

    @Test
    public void testMinimumCost_2() {
        int[][] grid = {{4, 6}, {4, 6}};
        assertEquals(10, minimumCost(grid));
    }

    @Test
    public void testMinimumCost_3() {
        int[][] grid = {};
        assertEquals(-1, minimumCost(grid));
    }

    @Test
    public void testMinimumCost_4() {
        int[][] grid = {{2},{4},{6}};
        assertEquals(5, minimumCost(grid));
    }

    @Test
    public void testMinimumCost_5() {
        int[][] grid = {{1, 3}, {2, 4}};
        assertEquals(8, minimumCost(grid));
    }
}

public class Solution {
    public int minimumCost(int[][] grid) {
        if (grid.length == 0) return -1;
        int m = grid.length;
        int n = grid[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                switch (grid[i][j]) {
                    case 1:
                        grid[i][j] = 2;
                        break;
                    case 4:
                        grid[i][j] = 3;
                        break;
                    case 2:
                        grid[i][j] = 1;
                        break;
                    case 3:
                        grid[i][j] = 4;
                        break;
                }
            }
        }
        return helper(grid);
    }

    public int helper(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        boolean flag = false;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if ((grid[i][j] == 1 && j == n - 1) || 
                    (grid[i][j] == 2 && j == 0) || 
                    (grid[i][j] == 3 && i == m - 1) || 
                    (grid[i][j] == 4 && i == 0)) {
                     flag = true;
                     break;
                }
            }
        }
        if (!flag) return -1;

        int sum = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                switch (grid[i][j]) {
                    case 1:
                        grid[i][j] = 2;
                        break;
                    case 4:
                        grid[i][j] = 3;
                        break;
                    case 2:
                        grid[i][j] = 1;
                        break;
                    case 3:
                        grid[i][j] = 4;
                        break;
                }
            }
        }

        return minCost(grid);
    }

    public int minCost(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        boolean flag = false;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if ((grid[i][j] == 1 && j == n - 1) || 
                    (grid[i][j] == 2 && j == 0) || 
                    (grid[i][j] == 3 && i == m - 1) || 
                    (grid[i][j] == 4 && i == 0)) {
                     flag = true;
                     break;
                }
            }
        }
        if (!flag) return -1;

        int sum = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                switch (grid[i][j]) {
                    case 1:
                        grid[i][j] = 2;
                        break;
                    case 4:
                        grid[i][j] = 3;
                        break;
                    case 2:
                        grid[i][j] = 1;
                        break;
                    case 3:
                        grid[i][j] = 4;
                        break;
                }
            }
        }

        if (m == n) {
            return sum;
        }

        int[][] left = new int[m][n-1];
        int[][] down = new int[m-1][n];

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                switch (grid[i][j]) {
                    case 2:
                        left[i][j] = grid[i][j+1];
                        break;
                    default:
                        left[i][j] = Integer.MAX_VALUE / 10;
                }
            }
        }

        for (int i = 0; i < m - 1; ++i) {
            for (int j = 0; j < n; ++j) {
                switch (grid[i+1][j]) {
                    case 3:
                        down[i][j] = grid[i][j];
                        break;
                    default:
                        down[i][j] = Integer.MAX_VALUE / 10;
                }
            }
        }

        int[][] dp = new int[m-1][n];

        for (int i = 0; i < m - 1; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == 0 && j > 0) {
                    dp[i][j] = down[0][j-1];
                } else if (dp[i][j - 1] != Integer.MAX_VALUE / 10) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + down[i][j]);
                }
            }
        }

        int ans = Integer.MAX_VALUE / 10;
        for (int i = 0; i < m-1; ++i) {
            for (int j = 0; j < n; ++j) {
                if (left[i][j] != Integer.MAX_VALUE / 10 && dp[i][j] != Integer.MAX_VALUE / 10)
                    ans = Math.min(ans, left[i][j] + dp[i][j]);
            }
        }

        return sum + ans;
    }

}