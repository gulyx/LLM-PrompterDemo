package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1442_DescriptionOnly {

    @Test
    public void test1() {
        int[] nums = {1, 3, 5, 7};
        int k = 2;
        int result = findTriplets(nums, k);
        assertEquals(4, result);
    }

    @Test
    public void test2() {
        int[] nums = {2, 12, 34, 56, 78, 90};
        int k = 3;
        int result = findTriplets(nums, k);
        assertEquals(6, result);
    }

    @Test
    public void test3() {
        int[] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int k = 2;
        int result = findTriplets(nums, k);
        assertEquals(9, result);
    }

    @Test
    public void test4() {
        int[] nums = {10, 20, 30, 40, 50, 60, 70, 80, 90};
        int k = 2;
        int result = findTriplets(nums, k);
        assertEquals(18, result);
    }

    @Test
    public void test5() {
        int[] nums = {1, 1, 1, 1, 1, 1, 1, 1, 1};
        int k = 2;
        int result = findTriplets(nums, k);
        assertEquals(36, result);
    }

    private int findTriplets(int[] nums, int k) {
        int n = nums.length;
        int count = 0;

        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int t = j + 1; t < n; t++) {

                    int a = nums[i];
                    int b = nums[j];

                    for (int l = j + 1, r = t; l <= r; ) {
                        int x = nums[l] ^ nums[r];

                        if (x == a && x == b) {
                            count++;
                            l++;
                            r--;
                        } else if (x < a || x > b) {
                            l++;
                        } else {
                            r--;
                        }
                    }

                }
            }
        }

        return count;
    }
}