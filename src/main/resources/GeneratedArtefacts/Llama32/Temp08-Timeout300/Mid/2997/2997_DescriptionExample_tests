package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testOperation1() {
        int[] nums = {2, 1, 3, 4};
        int k = 1;
        assertEquals(2, minOperations(nums, k));
    }

    @Test
    public void testOperation2() {
        int[] nums = {2, 0, 2, 0};
        int k = 0;
        assertEquals(0, minOperations(nums, k));
    }

    @Test
    public void testOperation3() {
        int[] nums = {1, 2, 3, 4};
        int k = 5;
        assertEquals(4, minOperations(nums, k));
    }

    @Test
    public void testOperation4() {
        int[] nums = {0, 1, 0, 2};
        int k = 6;
        assertEquals(6, minOperations(nums, k));
    }

    @Test
    public void testOperation5() {
        int[] nums = {3, 4, 5, 6};
        int k = 12;
        assertEquals(14, minOperations(nums, k));
    }
}

public class Solution {

    private static final int MAX = (int) 1e6 + 10;

    public int minOperations(int[] nums, int k) {
        int xorK = k ^ nums[0];
        int ans = findFirst(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            xorK ^= nums[i];
            if (findFirst(xorK) != -1)
                continue;
            ans++;
        }
        return ans + findFirst(k);
    }

    private static int findFirst(int num) {
        while (num % 2 == 0 && num > 0) {
            num /= 2;
        }
        if (num == 0)
            return -1;
        return num;
    }
}