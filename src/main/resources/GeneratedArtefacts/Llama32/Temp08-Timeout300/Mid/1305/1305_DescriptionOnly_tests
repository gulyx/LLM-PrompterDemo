package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1305;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1305.Solution;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

public class SolutionTest {

    @Test
    public void test_inOrderTraversal_Root1LeftNodeHasLessThanRoot2() {
        Solution solution = new Solution();
        TreeNode root1 = new TreeNode(7);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(15);
        TreeNode root2 = new TreeNode(9);
        root2.right = new TreeNode(20);
        ArrayList<Integer> actual = solution.inOrderTraversal(root1, root2);
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(3, 7, 9, 15, 20));
        assertEquals(expected, actual);
    }

    @Test
    public void test_inOrderTraversal_Root1Empty() {
        Solution solution = new Solution();
        TreeNode root2 = new TreeNode(9);
        root2.right = new TreeNode(20);
        ArrayList<Integer> actual = solution.inOrderTraversal(root2, null);
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(9, 20));
        assertEquals(expected, actual);
    }

    @Test
    public void test_inOrderTraversal_Root2Empty() {
        Solution solution = new Solution();
        TreeNode root1 = new TreeNode(7);
        root1.left = new TreeNode(3);
        TreeNode root2 = null;
        ArrayList<Integer> actual = solution.inOrderTraversal(root1, root2);
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(3, 7));
        assertEquals(expected, actual);
    }

    @Test
    public void test_inOrderTraversal_Root1EmptyAndRoot2Empty() {
        Solution solution = new Solution();
        TreeNode root1 = null;
        TreeNode root2 = null;
        ArrayList<Integer> actual = solution.inOrderTraversal(root1, root2);
        ArrayList<Integer> expected = new ArrayList<>();
        assertEquals(expected, actual);
    }

    @Test
    public void test_inOrderTraversal_RootNodesAreEqual() {
        Solution solution = new Solution();
        TreeNode root1 = new TreeNode(7);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(15);
        TreeNode root2 = new TreeNode(3);
        ArrayList<Integer> actual = solution.inOrderTraversal(root1, root2);
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(3, 7, 15));
        assertEquals(expected, actual);
    }
}