```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int n = 9;
        boolean result = isStrictlyPalindromic(n);
        assertFalse(result);
    }

    @Test
    public void test_2() {
        int n = 4;
        boolean result = isStrictlyPalindromic(n);
        assertFalse(result);
    }

    @Test
    public void test_3() {
        int n = 5;
        boolean result = isStrictlyPalindromic(n);
        assertTrue(result);
    }

    @Test
    public void test_4() {
        int n = 11;
        boolean result = isStrictlyPalindromic(n);
        assertTrue(result);
    }

    @Test
    public void test_5() {
        int n = 1;
        boolean result = isStrictlyPalindromic(n);
        assertTrue(result);
    }
}

public class Solution {

    public boolean isStrictlyPalindromic(int n) {
        for (int b = 2; b < n - 1; b++) {
            String numInBaseB = convertToBase(n, b);
            if (!isPalindrome(numInBaseB)) {
                return false;
            }
        }
        return true;
    }

    private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }

    private String convertToBase(int n, int b) {
        StringBuilder sb = new StringBuilder();
        while (n > 0) {
            sb.append(n % b);
            n /= b;
        }
        return sb.reverse().toString();
    }
}
```