package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.885;

import java.util.*;

public class Solution {
    public int[] spiralMatrixIII(int R, int C) {
        Set<Integer> rowSet = new HashSet<>();
        Set<Integer> colSet = new HashSet<>();

        List<int[]> res = new ArrayList<>();
        List<int[]> visited = new ArrayList<>();

        for (int i = 0; i < 4 * R + 4 * C - 2; i++) {
            int dr[] = {0,1,0,-1};
            int dc[] = {-1,0,1,0};

            boolean rValid = rowSet.isEmpty() || i % 4 == 0;
            boolean cValid = colSet.isEmpty() || i % 4 == 0;

            for (int j = 0; j < 4; j++) {
                if ((rValid && rowSet.contains(i / 4 + dr[j] * (i % 4)) &&
                        cValid && colSet.contains((i % 4) * C + dc[j])) {

                    res.add(new int[]{i / 4 + dr[j], (i % 4) * C + dc[j]});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 - dr[j] * ((i+1)%4)) &&
                    cValid && colSet.contains((i % 4) * C + dc[j])) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C + dc[j]});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j] * ((i+1)%4)) &&
                    cValid && colSet.contains((i % 4) * C - dc[j])) {

                        res.add(new int[]{i / 4 + dr[j], (i % 4) * C - dc[j]});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 - dr[j] * ((i+1)%4)) &&
                    cValid && colSet.contains((i % 4) * C - dc[j])) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C - dc[j]});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 + dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 - dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 + dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 - dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 + dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 - dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i % 4) * C)) {

                        res.add(new int[]{i / 4 - dr[j], (i % 4) * C});
                }
            }

            for (int j = 0; j < 2; j++) {
                if (rValid && rowSet.contains(i / 4 + dr[j]) &&
                    cValid && colSet.contains((i %