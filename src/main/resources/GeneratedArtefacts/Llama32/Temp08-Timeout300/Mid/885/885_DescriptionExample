package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 885_DescriptionExample {

    @Test
    public void test_4x3 Spiral() {
        int[][] result = new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}};
        int rows = 1;
        int cols = 4;
        int rStart = 0;
        int cStart = 0;

        Result res = new Result(rows, cols, rStart, cStart);
        List<List<Integer>> actual = res spirally();

        assertEquals(result.length, actual.size());
        for (int i = 0; i < result.length; i++) {
            assertEquals(result[i], actual.get(i));
        }
    }

    @Test
    public void test_5x6 Spiral() {
        int[][] result = new int[][]{
                {1, 4}, {1, 5}, {2, 5}, {2, 4}, {2, 3},
                {1, 3}, {0, 3}, {0, 4}, {0, 5},
                {3, 5}, {3, 4}, {3, 3}, {3, 2},
                {2, 2}, {1, 2}, {0, 2}, {4, 5},
                {4, 4}, {4, 3}, {4, 2}, {4, 1},
                {3, 1}, {2, 1}, {1, 1}, {0, 1},
                {4, 0}, {3, 0}, {2, 0}, {1, 0}, {0, 0}
        };

        int rows = 5;
        int cols = 6;
        int rStart = 1;
        int cStart = 4;

        Result res = new Result(rows, cols, rStart, cStart);
        List<List<Integer>> actual = res spirally();

        assertEquals(result.length, actual.size());
        for (int i = 0; i < result.length; i++) {
            assertEquals(result[i], actual.get(i));
        }
    }

    @Test
    public void test_3x4 Spiral() {
        int[][] result = new int[][]{{0, 1}, {0, 2}, {0, 3}, {0, 4}};

        int rows = 3;
        int cols = 4;
        int rStart = 0;
        int cStart = 0;

        Result res = new Result(rows, cols, rStart, cStart);
        List<List<Integer>> actual = res spirally();

        assertEquals(result.length, actual.size());
        for (int i = 0; i < result.length; i++) {
            assertEquals(result[i], actual.get(i));
        }
    }

    @Test
    public void test_6x5 Spiral() {
        int[][] result = new int[][]{
                {1, 4}, {1, 5}, {2, 5}, {2, 4},
                {2, 3}, {1, 3}, {0, 3}, {0, 4},
                {0, 5}, {3, 5}, {3, 4}, {3, 3},
                {3, 2}, {2, 2}, {1, 2}, {0, 2},
                {4, 5}, {4, 4}, {4, 3}, {4, 2},
                {4, 1}, {3, 1}, {2, 1}, {1, 1},
                {0, 1}, {0, 0}
        };

        int rows = 6;
        int cols = 5;
        int rStart = 0;
        int cStart = 4;

        Result res = new Result(rows, cols, rStart, cStart);
        List<List<Integer>> actual = res spirally();

        assertEquals(result.length, actual.size());
        for (int i = 0; i < result.length; i++) {
            assertEquals(result[i], actual.get(i));
        }
    }

    @Test
    public void test_2x3 Spiral() {
        int[][] result = new int[][]{{0,1},{0,2},{0,3}};

        int rows = 2;
        int cols = 3;
        int rStart = 0;
        int cStart = 0;

        Result res = new Result(rows, cols, rStart, cStart);
        List<List<Integer>> actual = res spirally();

        assertEquals(result.length, actual.size());
        for (int i = 0; i < result.length; i++) {
            assertEquals(result[i], actual.get(i));
        }
    }

}