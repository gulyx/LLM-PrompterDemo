```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class DescriptionExampleTest {

    @Test
    public void testOneBall() {
        int[] boxes = {0, 1, 0};
        int[][] expected = {{1}, {2}, {1}};
        assertEquals(expected, solution(boxes));
    }

    @Test
    public void testMultipleBallLeftSide() {
        int[] boxes = {0, 0, 1, 0, 1};
        int[][] expected = {{3}, {4}, {1}, {2}, {1}};
        assertEquals(expected, solution(boxes));
    }

    @Test
    public void testMultipleBallRightSide() {
        int[] boxes = {1, 1, 1, 0, 0};
        int[][] expected = {{1}, {3}, {4}, {0}, {0}};
        assertEquals(expected, solution(boxes));
    }

    @Test
    public void testAllZeroes() {
        int[] boxes = {0, 0, 0, 0, 0};
        int[][] expected = {{5}, {5}, {5}, {5}, {5}};
        assertEquals(expected, solution(boxes));
    }

    @Test
    public void testAllOnes() {
        int[] boxes = {1, 1, 1, 1, 1};
        int[][] expected = {{0}, {1}, {2}, {3}, {4}};
        assertEquals(expected, solution(boxes));
    }
}

public class Solution {

    public static int[] solution(String boxes) {
        char[] boxArray = boxes.toCharArray();
        int length = boxArray.length;
        int[] result = new int[length];

        for (int i = 0; i < length; i++) {
            if (boxArray[i] == '1') {
                result[i]++;
            }
        }

        for (int i = 0; i < length; i++) {
            int leftSum = 0;
            int rightSum = 0;

            for (int j = -1; j <= 1; j++) {
                if (i + j >= 0 && i + j < length) {
                    if (boxArray[i + j] == '1') {
                        leftSum++;
                    }
                }
            }

            for (int j = -1; j <= 1; j++) {
                if (i + j >= 0 && i + j < length) {
                    if (boxArray[i + j] == '1') {
                        rightSum++;
                    }
                }
            }

            result[i] += Math.min(leftSum, rightSum);
        }

        return result;
    }
}
```