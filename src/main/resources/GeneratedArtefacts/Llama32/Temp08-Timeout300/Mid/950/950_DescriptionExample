```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] deck = {17, 13, 11, 2, 3, 5, 7};
        int[] result = revealDeck(deck);
        assertArrayEquals(new int[]{2, 13, 3, 11, 5, 17, 7}, result);
    }

    @Test
    public void test_2() {
        int[] deck = {1, 1000};
        int[] result = revealDeck(deck);
        assertArrayEquals(new int[]{1, 1000}, result);
    }

    @Test
    public void test_3() {
        int[] deck = {5, 4, 6, 2, 1, 8, 3, 7};
        int[] result = revealDeck(deck);
        assertArrayEquals(new int[]{2, 4, 1, 5, 8, 3, 6, 7}, result);
    }

    @Test
    public void test_4() {
        int[] deck = {10, 20, 30, 40};
        int[] result = revealDeck(deck);
        assertArrayEquals(new int[]{10, 20, 30, 40}, result);
    }

    @Test
    public void test_5() {
        int[] deck = {};
        int[] result = revealDeck(deck);
        assertArrayEquals(new int[]{}, result);
    }
}

public class Solution {

    public int[] revealDeck(int[] deck) {
        int n = deck.length;
        int pos = 0;
        for (int i = 1; i < n; i++) {
            if (deck[i] > deck[pos]) {
                int temp = deck[i];
                deck[i] = deck[pos];
                deck[pos] = temp;
            }
        }

        List<Integer> result = new ArrayList<>();
        while (pos < n) {
            for (int i = pos + 1; i < n; i++) {
                if (deck[i] > deck[pos]) {
                    int temp = deck[i];
                    deck[i] = deck[pos];
                    deck[pos] = temp;
                }
            }

            result.add(deck[pos]);
            pos++;
            pos %= n - 1;

        }
        return result.stream().mapToInt(x -> x).toArray();
    }
}
```