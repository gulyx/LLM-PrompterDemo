package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1261_DescriptionExampleTest {

    @Test
    public void testFindElements() {
        FindElements solution = new FindElements(new TreeNode(-1, null, -1));
        boolean[] res = solution.find(2);
        assertTrue(res[0]);
        assertFalse(res[1]);
    }

    @Test
    public void testFindElements_2() {
        FindElements solution = new FindElements(new TreeNode(-1, new TreeNode(1, null, new TreeNode(3)), -1));
        boolean[] res = solution.find(1);
        assertTrue(res[0]);
        assertFalse(res[1]);

        boolean[] res2 = solution.find(3);
        assertTrue(res[1]);
        assertFalse(res[2]);
    }

    @Test
    public void testFindElements_3() {
        FindElements solution = new FindElements(new TreeNode(-1, new TreeNode(-1, null, -1), new TreeNode(-1, null, -1)));
        boolean[] res = solution.find(5);
        assertTrue(res[0]);
        assertFalse(res[1]);
    }

    @Test
    public void testFindElements_4() {
        FindElements solution = new FindElements(new TreeNode(-1, new TreeNode(2, null, new TreeNode(4)), -1));
        boolean[] res = solution.find(3);
        assertTrue(res[0]);
        assertFalse(res[1]);

        boolean[] res2 = solution.find(5);
        assertTrue(res[1]);
        assertFalse(res[2]);
    }

    @Test
    public void testFindElements_5() {
        FindElements solution = new FindElements(new TreeNode(-1, new TreeNode(3, null, -1), new TreeNode(4, null, -1)));
        boolean[] res = solution.find(6);
        assertTrue(res[0]);
        assertFalse(res[1]);

        boolean[] res2 = solution.find(5);
        assertTrue(res[1]);
        assertFalse(res[2]);
    }
}

class FindElements {
    Set<Integer> set;

    public FindElements(TreeNode root) {
        set = new HashSet<>();
        dfs(root, 0);
    }

    private void dfs(TreeNode node, int val) {
        if (node == null) return;
        set.add(val);
        dfs(node.left, 2 * val + 1);
        dfs(node.right, 2 * val + 2);
    }

    public boolean find(int target) {
        return set.contains(target);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) { val = x; }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        if (left != null) {
            sb.append(left.val);
        }
        sb.append("-").append(val).append("-");
        if (right != null) {
            sb.append(right.val);
        }
        return sb.toString();
    }
}