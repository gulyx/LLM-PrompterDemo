package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1329;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1329.Solution;

public class 1329_DescriptionExample_testsTest {

    public static void main(String[] args) {
        Solution solution = new Solution();
        test1(solution);
        test2(solution);
        test3(solution);
        test4(solution);
        test5(solution);
    }

    private static void test5(Solution solution) {
        int[][] mat = {{11,25,66,1,69,7},{23,55,17,45,15,52},{75,31,36,44,58,8},{22,27,33,25,68,4},{84,28,14,11,5,50}};
        int[][] result = solution.diagonalSort(mat);
        assertResult(result, new int[][]{{5,17,4,1,52,7},{11,11,25,45,8,69},{14,23,25,44,58,15},{22,27,31,36,50,66},{84,28,75,33,55,68}});
    }

    private static void test4(Solution solution) {
        int[][] mat = {{3,3,1,1},{2,2,1,2},{1,1,1,2}};
        int[][] result = solution.diagonalSort(mat);
        assertResult(result, new int[][]{{1,1,1,1},{1,2,2,2},{1,2,3,3}});
    }

    private static void test3(Solution solution) {
        int[][] mat = {{11,25,66,1,69,7},{23,55,17,45,15,52},{75,31,36,44,58,8},{22,27,33,25,68,4},{84,28,14,11,5,50}};
        int[][] result = solution.diagonalSort(mat);
        assertResult(result, new int[][]{{5,17,4,1,52,7},{11,11,25,45,8,69},{14,23,25,44,58,15},{22,27,31,36,50,66},{84,28,75,33,55,68}});
    }

    private static void test2(Solution solution) {
        int[][] mat = {{11,25,66,1,69,7},{23,55,17,45,15,52},{75,31,36,44,58,8},{22,27,33,25,68,4},{84,28,14,11,5,50}};
        int[][] result = solution.diagonalSort(mat);
        assertResult(result, new int[][]{{5,17,4,1,52,7},{11,11,25,45,8,69},{14,23,25,44,58,15},{22,27,31,36,50,66},{84,28,75,33,55,68}});
    }

    private static void test1(Solution solution) {
        int[][] mat = {{3,3,1,1},{2,2,1,2},{1,1,1,2}};
        int[][] result = solution.diagonalSort(mat);
        assertResult(result, new int[][]{{1,1,1,1},{1,2,2,2},{1,2,3,3}});
    }

    private static void assertResult(int[][] actual, int[][] expected) {
        for (int i = 0; i < actual.length; i++) {
            for (int j = 0; j < actual[i].length; j++) {
                if (actual[i][j] != expected[i][j]) {
                    throw new AssertionError("Test failed: " + Arrays.toString(actual[i]) + " != " + Arrays.toString(expected[i]));
                }
            }
        }
    }
}