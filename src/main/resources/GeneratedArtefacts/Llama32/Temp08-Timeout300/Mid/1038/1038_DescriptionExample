```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class1038_DescriptionExample {

    public TreeNode buildTree(int[] arr) {
        if (arr.length == 0) return null;
        TreeNode root = new TreeNode(arr[0]);
        int i = 1;
        while (i < arr.length && arr[i] != -1) {
            root.left = buildTree helperArr(arr, i++, arr);
            root.right = buildTree helperArr(arr, i++, arr);
        }
        return root;
    }

    public void inorder(TreeNode node) {
        if(node == null) return;
        inorder(node.left);
        System.out.print(node.val + " ");
        inorder(node.right);
    }

    public TreeNode convertBST(TreeNode root) {

        int sum = 0;
        Stack<TreeNode> stack = new Stack<>();
        while (root != null || !stack.isEmpty()) {
            while(root != null) {
                stack.push(root);
                root = root.right;
            }
            TreeNode node = stack.pop();
            int tempSum = sum;
            sum += node.val;
            node.val = tempSum;

            root = node.left;
        }

        return root;
    }

    @Test
    public void testConvertBST() {
        TreeNode root = buildTree(new int[]{4,1,6,0,2,5,7,null,null,null,3,null,null,null,8});
        convertBST(root);
        inorder(root);
    }

    @Test
    public void testEmptyTree() {
        TreeNode root = buildTree(new int[]{});
        convertBST(root);
        assertNull(root);
    }

    @Test
    public void testSingleNodeTree() {
        TreeNode root = new TreeNode(1);
        convertBST(root);
        assertEquals(1, root.val);
    }

    @Test
    public void testRootIsZero() {
        TreeNode root = buildTree(new int[]{0});
        convertBST(root);
        assertEquals(0, root.val);
    }
}
```