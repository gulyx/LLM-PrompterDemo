package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnlyTest {

    public static void main(String[] args) {
        GroupingPeopleTest test = new GroupingPeopleTest();
        test.test_empty_group();
        test.test_single_size();
        test.test_multiple_sizes();
        test.test_unique_elements();
        test.test_no_solution();
    }
}

class GroupingPeopleTest {

    private List<List<Integer>> groups;

    public void test_empty_group() {
        int[] groupSizes = new int[0];
        groups = groupingPeople(groupSizes);
        assertEquals(0, groups.size());
    }

    public void test_single_size() {
        int[] groupSizes = {1};
        groups = groupingPeople(groupSizes);
        assertEquals(1, groups.get(0).size());
    }

    public void test_multiple_sizes() {
        int[] groupSizes = {2, 3, 3};
        groups = groupingPeople(groupSizes);
        assertEquals(2, groups.size());
        assertEquals(2, groups.get(0).size());
        assertEquals(3, groups.get(1).size());
    }

    public void test_unique_elements() {
        int[] groupSizes = {5, 4, 6};
        groups = groupingPeople(groupSizes);
        assertEquals(3, groups.size());
        assertTrue(groups.stream().allMatch(group -> group.stream().distinct().count() == 1));
    }

    public void test_no_solution() {
        int[] groupSizes = new int[]{1, 2, 3};
        groups = groupingPeople(groupSizes);
        assertThrows(Exception.class, () -> {
            // no solution should throw an exception
            return null;
        });
    }

    private List<List<Integer>> groupingPeople(int[] groupSizes) {
        Map<Integer, List<Integer>> personToGroup = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            if (!personToGroup.containsKey(groupSizes[i])) {
                personToGroup.put(groupSizes[i], new ArrayList<>());
            }
            personToGroup.get(groupSizes[i]).add(i);
        }

        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> list : personToGroup.values()) {
            if (list.size() == groupSizes[0]) {
                result.add(list);
            } else if (result.stream().anyMatch(group -> group.size() >= list.size())) {
                int minSize = Collections.min(result, Comparator.comparingInt(group -> group.size())).size();
                while (minSize < list.size()) {
                    List<Integer> smallestGroup = result.get(result.indexOf(minSize));
                    for (int i : list) {
                        if (!smallestGroup.contains(i)) {
                            break;
                        } else {
                            smallestGroup.add(i);
                        }
                    }
                    minSize++;
                }
            } else {
                throw new RuntimeException("no solution");
            }
        }

        return result;
    }
}