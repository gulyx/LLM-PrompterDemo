package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnly {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            map.computeIfAbsent(groupSizes[i], k -> new ArrayList<>()).add(i);
        }
        List<List<Integer>> result = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            if (entry.getValue().size() == entry.getKey()) {
                result.add(entry.getValue());
            } else {
                int size = entry.getValue().size();
                for (int i = 0; i < size - entry.getKey(); i += entry.getKey()) {
                    List<Integer> newGroup = new ArrayList<>(entry.getValue().subList(i, i + entry.getKey()));
                    result.add(newGroup);
                }
            }
        }
        return result;
    }

    @Test
    public void test1() {
        int[] groupSizes = {3, 3, 3, 3, 3};
        List<List<Integer>> result = groupThePeople(groupSizes);
        assertEquals(2, result.size());
    }

    @Test
    public void test2() {
        int[] groupSizes = {2, 7, 2, 9, 5, 1, 9, 4};
        List<List<Integer>> result = groupThePeople(groupSizes);
        assertEquals(3, result.size());
    }

    @Test
    public void test3() {
        int[] groupSizes = {6, 7, 8, 9, 10};
        List<List<Integer>> result = groupThePeople(groupSizes);
        assertEquals(1, result.size());
    }

    @Test
    public void test4() {
        int[] groupSizes = {2, 3, 5, 4, 6};
        List<List<Integer>> result = groupThePeople(groupSizes);
        assertEquals(2, result.size());
    }

    @Test
    public void test5() {
        int[] groupSizes = {1, 1, 1, 1};
        List<List<Integer>> result = groupThePeople(groupSizes);
        assertEquals(4, result.size());
    }
}