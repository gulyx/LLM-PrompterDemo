package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2317;

public class Solution {

    private int[] prefixXOR;
    private int maxVal;

    public int max bitwiseXor(int[] nums) {
        maxVal = Integer.MAX_VALUE;
        prefixXOR = new int[nums.length];
        prefixXOR[0] = nums[0];
        for (int i=1; i<nums.length; i++) {
            prefixXOR[i] = prefixXOR[i-1]^nums[i];
        }

        findMax();

        return maxVal;
    }
    public void findMax() {

       int left = 0, right = Integer.highestOneBit(maxVal);
       while (left <= maxVal && right > 0) {
           int mid = (left + right)/2;

            if (bitwiseXOR(mid)) {
                left = mid+1;
            } else {
                right = mid-1;
            }
       }

        maxVal = left;

    }
    public boolean bitwiseXOR(int x) {

       for (int i=0; i<prefixXOR.length; i++) {
           if ((prefixXOR[i] ^ x)>maxVal)
               return false;

       }
       return true;
   }
}