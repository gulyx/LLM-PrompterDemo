```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Arrays;
import static org.junit.Assert.*;

public class 2482_DescriptionExampleTest {

    @Test
    public void testDiffMatrix1() {
        int[][] grid = { {0, 1, 1}, {1, 0, 1}, {0, 0, 1} };
        int[][] expectedOutput = {{0, 0, 4}, {0, 0, 4}, {-2, -2, 2}};
        int[][] actualOutput = diffMatrix(grid);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testDiffMatrix2() {
        int[][] grid = {{1, 1, 1}, {1, 1, 1}};
        int[][] expectedOutput = {{5, 5, 5}, {5, 5, 5}};
        int[][] actualOutput = diffMatrix(grid);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testDiffMatrix3() {
        int[][] grid = {{0, 1, 0}, {1, 0, 1}, {0, 1, 0}};
        int[][] expectedOutput = {{0, 0, 4}, {0, 0, 4}, {-2, -2, 2}};
        int[][] actualOutput = diffMatrix(grid);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testDiffMatrix4() {
        int[][] grid = {{1, 1, 1}, {0, 1, 1}, {1, 1, 1}};
        int[][] expectedOutput = {{5, 3, 3}, {2, 5, 5}, {3, 2, 5}};
        int[][] actualOutput = diffMatrix(grid);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testDiffMatrix5() {
        int[][] grid = {{0, 1, 0}, {1, 0, 1}, {1, 1, 0}};
        int[][] expectedOutput = {{2, 0, 4}, {0, 2, 4}, {-2, -2, 0}};
        int[][] actualOutput = diffMatrix(grid);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    public static int[][] diffMatrix(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] diff = new int[m][n];

        for (int i = 0; i < m; i++) {
            int onesRow = 0;
            int zerosRow = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    onesRow++;
                } else {
                    zerosRow++;
                }
            }

            diff[i][0] = onesRow + grid[0].length - zerosRow;

            for (int k = 1; k < n; k++) {
                diff[i][k] = diff[i][k-1];
            }
        }

        for (int j = 0; j < n; j++) {
            int onesCol = 0;
            int zerosCol = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    onesCol++;
                } else {
                    zerosCol++;
                }
            }

            diff[0][j] = onesCol + grid.length - zerosCol;

            for (int k = 1; k < m; k++) {
                diff[k][j] = diff[k-1][j];
            }
        }

        return diff;
    }
}
```