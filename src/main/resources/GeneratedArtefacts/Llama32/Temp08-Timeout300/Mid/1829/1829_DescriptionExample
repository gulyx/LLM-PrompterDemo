package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] nums = {0, 1, 1, 3};
        int maximumBit = 2;
        assertArrayEquals(new int[]{0, 3, 2, 3}, solution(nums, maximumBit));
    }

    @Test
    public void test_2() {
        int[] nums = {2, 3, 4, 7};
        int maximumBit = 3;
        assertArrayEquals(new int[]{5, 2, 6, 5}, solution(nums, maximumBit));
    }

    @Test
    public void test_3() {
        int[] nums = {0, 1, 2, 2, 5, 7};
        int maximumBit = 3;
        assertArrayEquals(new int[]{4, 3, 6, 4, 6, 7}, solution(nums, maximumBit));
    }

    @Test
    public void test_4() {
        int[] nums = {1, 2, 3, 4};
        int maximumBit = 1;
        assertArrayEquals(new int[]{1, 1, 1, 1}, solution(nums, maximumBit));
    }

    @Test
    public void test_5() {
        int[] nums = {};
        int maximumBit = 2;
        assertArrayEquals(new int[]{0}, solution(nums, maximumBit));
    }

    public static int[] solution(int[] nums, int maximumBit) {
        int n = nums.length;
        int maxVal = 1 << maximumBit - 1;
        long[] ans = new long[n];
        for (int i = n - 1; i >= 0; --i) {
            long k = 0;
            for (int j = 0; j < n - i; ++j) {
                k ^= nums[j];
            }
            int bitIndex = Integer.numberOfTrailingZeros(k);
            ans[i] = maxVal + ((1L << bitIndex) * (i == n - 1 ? 0 : (k ^ nums[n - i - 1])));
        }
        return ans;
    }
}