package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionOnlyTest {

    @Test
    public void testSingleElement() {
        int[] arr = {2};
        int[][] queries = {{0}};
        int[][] expected = {{2}};
        int result = xorQuery(arr, queries);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testTwoElements() {
        int[] arr = {1, 2};
        int[][] queries = {{0, 1}};
        int[][] expected = {{1}};
        int result = xorQuery(arr, queries);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testMultipleElements() {
        int[] arr = {1, 3, 5};
        int[][] queries = {{0, 2}};
        int[][] expected = {{6}};
        int result = xorQuery(arr, queries);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testOverlap() {
        int[] arr = {1, 2, 3, 4};
        int[][] queries = {{0, 2}, {1, 3}};
        int[][] expected = {{3, 6}};
        int result = xorQuery(arr, queries);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testEmptyQueries() {
        int[] arr = {1, 2, 3};
        int[][] queries = {};
        int[][] expected = {};
        int result = xorQuery(arr, queries);
        assertArrayEquals(expected, result);
    }
}

int xorQuery(int[] arr, int[][] queries) {
    int n = arr.length;
    int[] prefixXor = new int[n];
    prefixXor[0] = arr[0];

    for (int i = 1; i < n; i++) {
        prefixXor[i] = prefixXor[i - 1] ^ arr[i];
    }

    int m = queries.length;
    int[] result = new int[m];

    for (int i = 0; i < m; i++) {
        int left = queries[i][0];
        int right = queries[i][1];
        if (left == 0) {
            result[i] = prefixXor[right];
        } else {
            result[i] = prefixXor[right] ^ prefixXor[left - 1];
        }
    }

    return result;
}