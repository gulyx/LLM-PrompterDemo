```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class1310_DescriptionOnly {

    @Test
    public void test1() {
        int[] arr = {1, 3};
        int[][] queries = {{0, 1}};
        int[][] answer = new int[queries.length][];
        int[][] result = xorQueries(arr, queries);
        assertEquals(new int[]{2}, Arrays.toString(result[0]).replace("[", "").replace("]", ""));
    }

    @Test
    public void test2() {
        int[] arr = {1, 4, 4};
        int[][] queries = {{1, 3}};
        int[][] answer = new int[queries.length][];
        int[][] result = xorQueries(arr, queries);
        assertEquals(new int[]{2}, Arrays.toString(result[0]).replace("[", "").replace("]", ""));
    }

    @Test
    public void test3() {
        int[] arr = {1, 5, 10, 10, 12};
        int[][] queries = {{1, 4}};
        int[][] answer = new int[queries.length][];
        int[][] result = xorQueries(arr, queries);
        assertEquals(new int[]{7}, Arrays.toString(result[0]).replace("[", "").replace("]", ""));
    }

    @Test
    public void test4() {
        int[] arr = {2, 1};
        int[][] queries = {{0, 1}};
        int[][] answer = new int[queries.length][];
        int[][] result = xorQueries(arr, queries);
        assertEquals(new int[]{0}, Arrays.toString(result[0]).replace("[", "").replace("]", ""));
    }

    @Test
    public void test5() {
        int[] arr = {2, 1};
        int[][] queries = {{0, 0}};
        int[][] answer = new int[queries.length][];
        int[][] result = xorQueries(arr, queries);
        assertEquals(new int[]{1}, Arrays.toString(result[0]).replace("[", "").replace("]", ""));
    }
}

public class Solution {

    public int[][] xorQueries(int[] arr, int[][] queries) {
        int n = arr.length;
        List<Integer> prefixXORs = new ArrayList<>();
        int curXOR = 0;

        for (int i = 0; i < n; ++i)
            curXOR ^= arr[i];
        prefixXORs.add(curXOR);

        for (int i = 1; i < n; ++i) {
            curXOR ^= arr[i];
            prefixXORs.add(curXOR);
        }

        int m = queries.length;
        List<Integer> answer = new ArrayList<>();

        for (int i = 0; i < m; ++i) {
            int left = queries[i][0] + 1;
            int right = queries[i][1];
            if (left <= n - right)
                answer.add(prefixXORs.get(left - 1) ^ prefixXORs.get(right));
        }
        return answer.stream().mapToInt(x -> x).toArray(int[]::new);
    }

}
```