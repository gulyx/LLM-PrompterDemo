package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2326;

import java.util.*;

public class Solution {
    public int[][] generateMatrix(int m, int n, ListNode head) {

        List<Integer> list = new ArrayList<>();
        while (head != null) {
            list.add(head.val);
            head = head.next;
        }

        if (list.size() > m * n) {
            for (int i = list.size(); i < m * n; i++) {
                list.add(-1);
            }
        } else if (list.size() < m * n) {

            while (list.size() < m * n) {
                list.add(0);
            }
        }

        int[][] matrix = new int[m][n];
        int top = 0, bottom = m - 1, left = 0, right = n - 1;
        int index = 0;

        while (top <= bottom && left <= right) {
            for (int i = left; i <= right; i++) {
                matrix[top][i] = list.get(index++);
            }
            top++;

            for (int i = top; i <= bottom; i++) {
                matrix[i][right] = list.get(index++);
            }
            right--;

            if (top <= bottom) {

                for (int i = right; i >= left; i--) {
                    matrix[bottom][i] = list.get(index++);
                }
                bottom--;
            }

            if (left <= right) {

                for (int i = bottom; i >= top; i--) {
                    matrix[i][left] = list.get(index++);
                }
                left++;
            }
        }

        return matrix;
    }
}

class ListNode {
     int val;
     ListNode next;
     ListNode() {}
     ListNode(int val) { this.val = val; }
     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 }