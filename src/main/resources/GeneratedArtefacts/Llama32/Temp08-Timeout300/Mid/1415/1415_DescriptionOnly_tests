package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1415;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1415.Solution;

public class Test {

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.generateHappyString(3, 1));
        System.out.println(solution.generateHappyString(3, 2));
        System.out.println(solution.generateHappyString(7, 133));
        System.out.println(solution.generateHappyString(4, 42));
        System.out.println(solution.generateHappyString(10, 63));
    }
}

public class Test {

    @Test
    public void testGenerateHappyString() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(3, 1);
        assert(result != null);
    }

    @Test
    public void testGenerateHappyString2() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(3, 2);
        assert(result != null);
    }

    @Test
    public void testGenerateHappyString3() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(7, 133);
        assert(result != null);
    }

    @Test
    public void testGenerateHappyString4() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(4, 42);
        assert(result != null);
    }

    @Test
    public void testGenerateHappyString5() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(10, 63);
        assert(result != null);
    }
}

public class Test {

    @Test
    public void testGetFirstChar() {
        Solution solution = new Solution();
        char firstChar = solution.getFirstChar("abc");
        assertEquals('a', firstChar);
    }

    @Test
    public void testGetSecondChar() {
        Solution solution = new Solution();
        char secondChar = solution.getSecondChar("abc");
        assertEquals('b', secondChar);
    }
}

public class Test {

    @Test
    public void testGenerateHappyStringWithNAndK() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(3, 1);
        assertTrue(result != null);
    }

    @Test
    public void testGenerateHappyStringWithoutNK() {
        Solution solution = new Solution();
        String result = solution.generateHappyString(3, 2);
        assertFalse(result == null);
    }
}

public class Test {

    @Test
    public void testIsHappyString() {
        Solution solution = new Solution();
        assertTrue(solution.isHappyString("abc"));
        assertFalse(solution.isHappyString("aa"));
    }

}