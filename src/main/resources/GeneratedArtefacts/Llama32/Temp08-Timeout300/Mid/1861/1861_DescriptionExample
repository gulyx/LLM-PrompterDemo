package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DescriptionExampleTest {
    @Test
    void test_1() {
        char[][] boxGrid = {{"#", ".", "#"}};
        char[][] expectedOutput = {{".", "#"}, {"#", "."}, {"#"}};
        assertEquals(expectedOutput, rotateBox(boxGrid));
    }

    @Test
    void test_2() {
        char[][] boxGrid = {{"#", ".", "*", "."},
                {"#", "#", "*", "."}};
        char[][] expectedOutput = {{"#", "."},
                {"#", "#"},
                {"*", "*"},
                {".", "."}};
        assertEquals(expectedOutput, rotateBox(boxGrid));
    }

    @Test
    void test_3() {
        char[][] boxGrid = {{"#", "#", "*", ".", "*" },
                {"#", "#", "#", "*", "."},
                {"#", "#", "#", ".", "#"}};
        char[][] expectedOutput = {{"#", "#", "."},
                {".#", "#", "."},
                {"#", "#", "*"},
                {"#", "*", "."},
                {"#", ".", "*"},
                {"#", ".", "."}};
        assertEquals(expectedOutput, rotateBox(boxGrid));
    }

    @Test
    void test_4() {
        char[][] boxGrid = {{"#", "#", "*", ".", "*" },
                {"#", "#", "#", "*", "."},
                {"#", "#", "#", ".", "#"}};
        char[][] expectedOutput = {{"#", "#", "."},
                {".#", "#", "."},
                {"#", "#", "*"},
                {"#", "*", "."},
                {"#", ".", "*"},
                {"#", ".", "."}};
        assertEquals(expectedOutput, rotateBox(boxGrid));
    }

    @Test
    void test_5() {
        char[][] boxGrid = {{"#", "#", "*", ".", "*" },
                {"#", "#", "#", "*", "."},
                {"#", "#", "#", ".", "#"}};
        char[][] expectedOutput = {{"#", "#", "."},
                {".#", "#", "."},
                {"#", "#", "*"},
                {"#", "*", "."},
                {"#", ".", "*"},
                {"#", ".", "."}};
        assertEquals(expectedOutput, rotateBox(boxGrid));
    }

    public char[][] rotateBox(char[][] boxGrid) {
        int rows = boxGrid.length;
        int cols = boxGrid[0].length;
        char[][] result = new char[cols][rows];
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (boxGrid[row][col] == '.') {
                    int newRow = rows - col - 1;
                    for (int i = 0; i < rows; i++) {
                        result[newRow + i][col] = boxGrid[i][rows - row - 1];
                    }
                } else {
                    result[col][row] = boxGrid[row][cols - col - 1];
                }
            }
        }
        return result;
    }
}