package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1382;

public class Solution {
    public TreeNode balanceBST(TreeNode root) {
        inorder(root, null);
        return reconstruct(left, right);

    }

    private void inorder(TreeNode node, TreeNode parent){
       if(node == null)
           return;
       inorder(node.left, node);
       inorder(node.right, node);
    }
    private TreeNode[] split(TreeNode node){
        TreeNode left = null, right = null;
        while(node != null){
            right = node;
            node = node.left;
        }

        while(right != null && right.right != null)
            right = right.right;

        right.right = null;
        return new TreeNode[]{left, right};
    }
    private TreeNode reconstruct(TreeNode left, TreeNode right){
       if(left == null && right== null) return null;
       if(left == null) return right;
       if(right == null) return left;
       int sizeLeft = countNodes(left);
       int sizeRight = countNodes(right);
       if(sizeLeft < sizeRight){
         left.left = reconstruct(left.left, left.right);
         return left;
       }else{
        right.right =  reconstruct(right.right, right.left);
         return right;
      }
    }
    private int countNodes(TreeNode root){
       if(root == null) return 0;
       return (1 + countNodes(root.left) + countNodes(root.right));
    }
}