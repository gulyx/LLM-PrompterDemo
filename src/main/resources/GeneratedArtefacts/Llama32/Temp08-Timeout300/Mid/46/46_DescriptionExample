```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import java.util.*;

public class DescriptionExample {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int num : nums) {
            if (!tempList.contains(num)) {
                tempList.add(num);
                backtrack(result, tempList, nums);
                tempList.remove(tempList.size() - 1);
            }
        }
    }

    @Test
    public void test_1() {
        int[] input = {1,2,3};
        List<List<Integer>> expectedOutput = Arrays.asList(
                Arrays.asList(1, 2, 3),
                Arrays.asList(1, 3, 2),
                Arrays.asList(2, 1, 3),
                Arrays.asList(2, 3, 1),
                Arrays.asList(3, 1, 2),
                Arrays.asList(3, 2, 1)
        );
        assertEquals(expectedOutput, permute(input));
    }

    @Test
    public void test_2() {
        int[] input = {0,1};
        List<List<Integer>> expectedOutput = Arrays.asList(
                Arrays.asList(0, 1),
                Arrays.asList(1, 0)
        );
        assertEquals(expectedOutput, permute(input));
    }

    @Test
    public void test_3() {
        int[] input = {1};
        List<List<Integer>> expectedOutput = Arrays.asList(
                Arrays.asList(1)
        );
        assertEquals(expectedOutput, permute(input));
    }
}
```