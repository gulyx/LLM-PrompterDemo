package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;
import java.lang.*;

public class 2807_DescriptionOnlyTest {

    @Test
    public void test_GivenEmptyList_WhenInsertGCD_ReturnsEmptyList() {
        ListNode head = new ListNode(0);
        head.next = null;
        head.next = insert(GreatestCommonDivisor(head), head);
        assertEquals(null, head.next.next);
    }

    @Test
    public void test_GivenOneNode_WhenInsertGCD_ReturnsNodeWithNewValue() {
        ListNode head = new ListNode(1);
        head.next = null;
        head.next = insert(GreatestCommonDivisor(head), head);
        assertEquals(1, head.val);
        assertEquals(2, head.next.val);
    }

    @Test
    public void test_GivenTwoNodes_WhenInsertGCD_ReturnsListWithInsertedValue() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(3);
        head.next.next = null;
        head.next.next = insert(GreatestCommonDivisor(head), head);
        assertEquals(1, head.val);
        assertEquals(1, head.next.val);
        assertEquals(3, head.next.next.val);
    }

    @Test
    public void test_GivenLargeNumberList_WhenInsertGCD_ReturnsCorrectedList() {
        ListNode head = new ListNode(2);
        head.next = new ListNode(4);
        head.next.next = new ListNode(6);
        head.next.next.next = new ListNode(8);
        head.next.next.next.next = null;
        head.next.next.next.next = insert(GreatestCommonDivisor(head), head);
        assertEquals(1, head.val);
        assertEquals(2, head.next.val);
        assertEquals(2, head.next.next.val);
        assertEquals(4, head.next.next.next.val);
        assertEquals(6, head.next.next.next.next.val);
    }

    @Test
    public void test_GivenListWithNegativeValues_WhenInsertGCD_ReturnsCorrectedList() {
        ListNode head = new ListNode(-2);
        head.next = new ListNode(-3);
        head.next.next = null;
        head.next.next = insert(GreatestCommonDivisor(head), head);
        assertEquals(-2, head.val);
        assertEquals(1, head.next.val);
    }
}