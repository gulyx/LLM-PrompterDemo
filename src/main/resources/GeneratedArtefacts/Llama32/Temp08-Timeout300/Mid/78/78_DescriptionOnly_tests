package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.78;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.78.Solution;

public class 78_DescriptionOnly_testsTest {

    @Test
    public void test_Solution_returnPowerSetWithOneElement() {
        Solution solution = new Solution();
        int[] nums = {1};
        java.util.List<java.util.List<Integer>> result = solution.subsets(nums);
        assertEquals(1, result.size());
        assertEquals(java.util.Arrays.asList(new java.util.ArrayList<Integer>(){{add(1);}}), result.get(0));
    }

    @Test
    public void test_Solution_returnPowerSetWithTwoElement() {
        Solution solution = new Solution();
        int[] nums = {1, 2};
        java.util.List<java.util.List<Integer>> result = solution.subsets(nums);
        assertEquals(4, result.size());
        assertEquals(java.util.Arrays.asList(new java.util.ArrayList<Integer>(){{add(0);}}, new java.util.ArrayList<Integer>(){{add(1);}}, new java.util.ArrayList<Integer>(){{add(2);}}, new java.util.ArrayList<Integer>(){{add(0, 1);}}, new java.util.ArrayList<Integer>(){{add(0, 2);}}, new java.util.ArrayList<Integer>(){{add(1, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2);}}}), result.get(0));
    }

    @Test
    public void test_Solution_returnPowerSetWithThreeElement() {
        Solution solution = new Solution();
        int[] nums = {1, 2, 3};
        java.util.List<java.util.List<Integer>> result = solution.subsets(nums);
        assertEquals(8, result.size());
        assertEquals(java.util.Arrays.asList(new java.util.ArrayList<Integer>(){{add(0);}}, new java.util.ArrayList<Integer>(){{add(1);}}, new java.util.ArrayList<Integer>(){{add(2);}}, new java.util.ArrayList<Integer>(){{add(0, 1);}}, new java.util.ArrayList<Integer>(){{add(0, 2);}}, new java.util.ArrayList<Integer>(){{add(1, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2);}}), result.get(0));
    }

    @Test
    public void test_Solution_returnPowerSetWithFourElement() {
        Solution solution = new Solution();
        int[] nums = {1, 2, 3, 4};
        java.util.List<java.util.List<Integer>> result = solution.subsets(nums);
        assertEquals(16, result.size());
        assertEquals(java.util.Arrays.asList(new java.util.ArrayList<Integer>(){{add(0);}}, new java.util.ArrayList<Integer>(){{add(1);}}, new java.util.ArrayList<Integer>(){{add(2);}}, new java.util.ArrayList<Integer>(){{add(3);}}, new java.util.ArrayList<Integer>(){{add(0, 1);}}, new java.util.ArrayList<Integer>(){{add(0, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 3);}}, new java.util.ArrayList<Integer>(){{add(1, 2);}}, new java.util.ArrayList<Integer>(){{add(1, 3);}}, new java.util.ArrayList<Integer>(){{add(2, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 2, 3);}}, new java.util.ArrayList<Integer>(){{add(1, 2, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2, 3);}}), result.get(0));
    }

    @Test
    public void test_Solution_returnPowerSetWithFiveElement() {
        Solution solution = new Solution();
        int[] nums = {1, 2, 3, 4, 5};
        java.util.List<java.util.List<Integer>> result = solution.subsets(nums);
        assertEquals(32, result.size());
        assertEquals(java.util.Arrays.asList(new java.util.ArrayList<Integer>(){{add(0);}}, new java.util.ArrayList<Integer>(){{add(1);}}, new java.util.ArrayList<Integer>(){{add(2);}}, new java.util.ArrayList<Integer>(){{add(3);}}, new java.util.ArrayList<Integer>(){{add(4);}}, new java.util.ArrayList<Integer>(){{add(0, 1);}}, new java.util.ArrayList<Integer>(){{add(0, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 4);}}, new java.util.ArrayList<Integer>(){{add(1, 2);}}, new java.util.ArrayList<Integer>(){{add(1, 3);}}, new java.util.ArrayList<Integer>(){{add(1, 4);}}, new java.util.ArrayList<Integer>(){{add(2, 3);}}, new java.util.ArrayList<Integer>(){{add(2, 4);}}, new java.util.ArrayList<Integer>(){{add(3, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 2, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 2, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(1, 2, 3);}}, new java.util.ArrayList<Integer>(){{add(1, 2, 4);}}, new java.util.ArrayList<Integer>(){{add(1, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(2, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2, 3);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 2, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(1, 2, 3, 4);}}, new java.util.ArrayList<Integer>(){{add(0, 1, 2, 3, 4);}}), result.get(0));
    }
}