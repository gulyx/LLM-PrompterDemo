```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class '78_DescriptionOnlyTest {

    @Test
    public void test_powerSet_When_nIs0_ReturnsAnEmptyList() {
        int[] nums = {};
        assertEquals("", getPowerSet(nums));
    }

    @Test
    public void test_powerSet_When_nIs1_ReturnsAListWithOneElement() {
        int[] nums = {1};
        String expectedOutput = "[[], [1]]";
        assertTrue(getPowerSet(nums).equals(expectedOutput));
    }

    @Test
    public void test_powerSet_When_nIs2_ReturnsAnEmptyListWithTwoElements() {
        int[] nums = {1, 2};
        assertEquals("[[], [1], [2], [1, 2]]", getPowerSet(nums));
    }

    @Test
    public void test_powerSet_When_nIs3_ReturnsANumberOfSubsets() {
        int[] nums = {1, 2, 3};
        String expectedOutput = "[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]";
        assertTrue(getPowerSet(nums).equals(expectedOutput));
    }

    @Test
    public void test_powerSet_When_nIs4_ReturnsANumberOfSubsets() {
        int[] nums = {1, 2, 3, 4};
        String expectedOutput = "[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]";
        assertTrue(getPowerSet(nums).equals(expectedOutput));
    }
}

public class Main {
    public static String getPowerSet(int[] nums) {
        String result = "[[]";
        for (int num : nums) {
            String current = "], [";
            for (char c : current.toCharArray()) {
                result += c;
            }
            result += Integer.toString(num);
            for (int i = 0; i < nums.length - 1; i++) {
                result += ", ";
            }
        }
        result += "]";
        return result;
    }
}
```