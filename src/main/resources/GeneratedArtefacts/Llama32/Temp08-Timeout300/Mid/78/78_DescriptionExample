```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class '78_DescriptionExample {

    @Test
    public void testPowerSet() {
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = powerSet(nums);
        assertEquals(8, result.size());
        assertTrue(result.contains(Arrays.asList()));
        assertTrue(result.contains(Arrays.asList(1)));
        assertTrue(result.contains(Arrays.asList(2)));
        assertTrue(result.contains(Arrays.asList(1, 2)));
        assertTrue(result.contains(Arrays.asList(3)));
        assertTrue(result.contains(Arrays.asList(1, 3)));
        assertTrue(result.contains(Arrays.asList(2, 3)));
        assertTrue(result.contains(Arrays.asList(1, 2, 3)));
    }

    @Test
    public void testPowerSetEmptyArray() {
        int[] nums = {};
        List<List<Integer>> result = powerSet(nums);
        assertEquals(1, result.size());
        assertTrue(result.contains(Collections.emptyList()));
    }

    @Test
    public void testPowerSetSingleElement() {
        int[] nums = {0};
        List<List<Integer>> result = powerSet(nums);
        assertEquals(2, result.size());
        assertTrue(result.contains(Arrays.asList()));
        assertTrue(result.contains(Arrays.asList(0)));
    }

    @Test
    public void testPowerSetDuplicateElementsNotPermitted() {
        assertThrows(IllegalArgumentException.class, () -> powerSet(new int[]{1, 1}));
    }

    @Test
    public void testPowerSetNullArray() {
        assertThrows(NullPointerException.class, () -> powerSet(null));
    }
    
    private List<List<Integer>> powerSet(int[] nums) {
        Set<List<Integer>> result = new HashSet<>();
        backtrack(result, new ArrayList<>(), nums);
        return new ArrayList<>(result);
    }

    private void backtrack(Set<List<Integer>> result, List<Integer> tempList, int[] nums) {
        result.add(new ArrayList<>(tempList));
        for (int i = 0; i < nums.length; i++) {
            if (!tempList.contains(nums[i])) {
                tempList.add(nums[i]);
                backtrack(result, tempList, nums);
                tempList.remove(tempList.size() - 1);
            }
        }
    }
}
```