package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

import org.junit.Test;
import static org.junit.Assert.*;
public class DescriptionExample {

    @Test
    public void testLowestCommonAncestor() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.left.right.right = new TreeNode(0);
        root.right.left = new TreeNode(8);
        root.right.right = new TreeNode(7);
        root.right.right.left = new TreeNode(4);

        List<Integer> result = lowestCommonAncestor(root, new int[]{6, 7});
        assertEquals(Arrays.toString(new int[]{2}), Arrays.toString(result));
    }

    @Test
    public void testLowestCommonAncestorNoChildren() {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(0);

        List<Integer> result = lowestCommonAncestor(root, new int[]{0});
        assertEquals(Arrays.toString(new int[]{1}), Arrays.toString(result));
    }

    @Test
    public void testLowestCommonAncestorLeaf() {
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(3);

        List<Integer> result = lowestCommonAncestor(root, new int[]{3});
        assertEquals(Arrays.toString(new int[]{2}), Arrays.toString(result));
    }

    @Test
    public void testLowestCommonAncestorEdgeCase() {
        TreeNode root = new TreeNode(0);

        List<Integer> result = lowestCommonAncestor(root, new int[]{0});
        assertEquals(Arrays.toString(new int[]{-1}), Arrays.toString(result));
    }

    @Test
    public void testLowestCommonAncestorEmptyTree() {
        TreeNode root = null;

        List<Integer> result = lowestCommonAncestor(root, new int[]{0});
        assertTrue(result.isEmpty());
    }

    private List<Integer> lowestCommonAncestor(TreeNode root, int[] nodes) {
        if (root == null) return new ArrayList<>();
        if (nodes.length == 1) return Collections.singletonList(nodes[0]);
        List<Integer> left = lowestCommonAncestor(root.left, Arrays.stream(nodes).boxed().filter(x -> x != root.val).toArray(Integer[]::new));
        List<Integer> right = lowestCommonAncestor(root.right, Arrays.stream(nodes).boxed().filter(x -> x != root.val).toArray(Integer[]::new));

        if (left.size() > 0 && right.size() > 0) {
            return Collections.singletonList(root.val);
        } else if (left.size() > 0) {
            return left;
        } else {
            return right;
        }
    }

}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}