package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1123;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1123.Solution;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.List;

public class 1123_DescriptionOnly_testsTest {

    @Test
    public void test1() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.left.left.left = new TreeNode(0);
        root.left.left.right = new TreeNode(8);

        Integer expected = 3;
        Integer actual = solution.lowestCommonAncestor(root).val;

        assertEquals(expected, actual);
    }

    @Test
    public void test2() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(6);
        root.left = new TreeNode(7);
        root.right = new TreeNode(4);
        root.left.left = new TreeNode(5);
        root.left.right = new TreeNode(8);
        root.right.left = new TreeNode(9);
        root.right.right = new TreeNode(10);

        Integer expected = 6;
        Integer actual = solution.lowestCommonAncestor(root).val;

        assertEquals(expected, actual);
    }

    @Test
    public void test3() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(0);
        Integer expected = -1;
        Integer actual = solution.lowestCommonAncestor(root).val;

        assertEquals(expected, actual);
    }

    @Test
    public void test4() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(1);
        TreeNode node2 = new TreeNode(2);
        TreeNode node3 = new TreeNode(3);

        node2.left = node3;
        node3.right = root;

        Integer expected = 1;
        Integer actual = solution.lowestCommonAncestor(root).val;

        assertEquals(expected, actual);
    }

    @Test
    public void test5() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(0);
        TreeNode node2 = new TreeNode(1);
        TreeNode node3 = new TreeNode(2);

        node2.left = node3;
        root.right = node2;

        Integer expected = 0;
        Integer actual = solution.lowestCommonAncestor(root).val;

        assertEquals(expected, actual);
    }
}