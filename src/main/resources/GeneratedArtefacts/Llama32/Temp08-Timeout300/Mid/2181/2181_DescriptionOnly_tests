package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2181;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2181.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class 2181_DescriptionOnly_testsTest {

    @Test
    public void testOneNode() {
        Solution solution = new Solution();
        ListNode head = new ListNode(0);
        solution.mergeNodes(head);
        assertEquals(0, head.val);
    }

    @Test
    public void testTwoConsecutiveZeroes() {
        Solution solution = new Solution();
        ListNode head = new ListNode(1);
        head.next = new ListNode(0);
        head.next.next = new ListNode(2);
        solution.mergeNodes(head);
        assertEquals(3, head.val);
        assertEquals(0, head.next.val);
    }

    @Test
    public void testMultipleConsecutiveZeroes() {
        Solution solution = new Solution();
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(0);
        head.next.next.next.next = new ListNode(4);
        head.next.next.next.next.next = new ListNode(5);
        head.next.next.next.next.next.next = new ListNode(0);
        solution.mergeNodes(head);
        assertEquals(12, head.val);
    }

    @Test
    public void testOnlyZeros() {
        Solution solution = new Solution();
        ListNode head = new ListNode(0);
        head.next = new ListNode(0);
        solution.mergeNodes(head);
        assertEquals(0, head.val);
    }

    @Test
    public void testAllConsecutiveZeroes() {
        Solution solution = new Solution();
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(0);
        head.next.next.next.next = new ListNode(4);
        head.next.next.next.next.next = new ListNode(5);
        head.next.next.next.next.next.next = new ListNode(0);
        head.next.next.next.next.next.next.next = new ListNode(6);
        solution.mergeNodes(head);
        assertEquals(12, head.val);
    }
}