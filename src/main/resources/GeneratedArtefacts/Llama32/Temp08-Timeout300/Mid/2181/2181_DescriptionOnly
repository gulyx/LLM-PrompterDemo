package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2181_DescriptionOnly {

    @Test
    public void testMergeNodes() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(1);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(2);
        head.next.next.next.next = new ListNode(3);
        head.next.next.next.next.next = new ListNode(4);
        head.next.next.next.next.next.next = new ListNode(5);

        mergeNodes(head);

        while (head != null) {
            if (head.val == 0) {
                assert=head.next.val==6;
            } else {
                assert=head.val!=0;
            }
            head=head.next;
        }

    }

    @Test
    public void testMergeNodesEmpty() {
        ListNode head = new ListNode(0);
        head.next = null;

        mergeNodes(head);

        while (head != null) {
            if (head.val == 0) {
                assert false;
            } else {
                assert=head.val!=0;
            }
            head=head.next;
        }

    }

    @Test
    public void testMergeNodesSingle() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(1);

        mergeNodes(head);

        while (head != null) {
            if (head.val == 0) {
                assert false;
            } else {
                assert=head.val==1;
            }
            head=head.next;
        }

    }

    @Test
    public void testMergeNodesTwo() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(0);

        mergeNodes(head);

        while (head != null) {
            if (head.val == 0) {
                assert false;
            } else {
                assert=head.val==0;
            }
            head=head.next;
        }

    }

    @Test
    public void testMergeNodesAll() {
        ListNode head = new ListNode(0);
        for (int i=1;i<=5;++i) {
            head.next=new ListNode(i);
        }

        mergeNodes(head);

        while (head != null) {
            if (head.val == 0) {
                assert false;
            } else {
                assert=head.val==15;
            }
            head=head.next;
        }

    }

}