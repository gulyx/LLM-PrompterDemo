package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionsOnly {
    private static final int LEFT = 1;
    private static final int RIGHT = 0;

    public TreeNode constructTree(int[][] descriptions) {
        Map<Integer, List<int[]>> map = new HashMap<>();
        for (int[] description : descriptions) {
            if (!map.containsKey(description[1])) {
                map.put(description[1], new ArrayList<>());
            }
            map.get(description[1]).add(new int[]{description[0], description[2]});
        }

        return buildTree(1, map);
    }

    private TreeNode buildTree(int i, Map<Integer, List<int[]>> map) {
        if (!map.containsKey(i)) {
            return null;
        }
        if (map.get(i).isEmpty()) {
            return new TreeNode(i);
        }

        int[] left = map.get(i).get(0)[LEFT];
        int[] right = map.get(i).get(0)[RIGHT];

        TreeNode root = new TreeNode(left, buildTree(left, map), buildTree(right, map));
        return root;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) {
        val = x;
    }

    public TreeNode(int x, TreeNode left, TreeNode right) {
        this.val = x;
        this.left = left;
        this.right = right;
    }
}