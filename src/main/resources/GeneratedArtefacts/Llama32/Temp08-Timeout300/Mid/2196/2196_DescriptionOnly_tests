```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2196;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2196.Solution;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DescriptionOnlyTestsTest {

    @Test
    public void test_0() {
        Solution solution = new Solution();
        int[][] descriptions = {{1, 2, 0}, {2, 3, 1}};
        Node actualRoot = solution.buildTree(descriptions);
        assertEquals(3, actualRoot.val);
        assertEquals(true, (actualRoot.left != null && actualRoot.left.val == 2));
        assertEquals(false, (actualRoot.right != null && actualRoot.right.val == 3));
    }

    @Test
    public void test_1() {
        Solution solution = new Solution();
        int[][] descriptions = {{5,4,0},{4,6,1},{2,7,0},{2,8,1},{5,9,1},{4,10,0}};
        Node actualRoot = solution.buildTree(descriptions);
        assertEquals(5, actualRoot.val);
        assertEquals(true, (actualRoot.left != null && actualRoot.left.val == 4));
        assertEquals(false, (actualRoot.right != null && actualRoot.right.val == 5));
    }

    @Test
    public void test_2() {
        Solution solution = new Solution();
        int[][] descriptions = {{1,3,0},{2,5,0},{3,4,1},{4,6,0},{5,7,1}};
        Node actualRoot = solution.buildTree(descriptions);
        assertEquals(3, actualRoot.val);
        assertEquals(false, (actualRoot.left == null || actualRoot.left.val != 4));
        assertEquals(true, (actualRoot.right != null && actualRoot.right.val == 6));
    }

    @Test
    public void test_3() {
        Solution solution = new Solution();
        int[][] descriptions = {{1,2,0},{2,3,0}};
        Node actualRoot = solution.buildTree(descriptions);
        assertEquals(1, actualRoot.val);
        assertEquals(true, (actualRoot.left != null && actualRoot.left.val == 2));
        assertEquals(false, (actualRoot.right != null && actualRoot.right.val == 3));
    }

    @Test
    public void test_4() {
        Solution solution = new Solution();
        int[][] descriptions = {{8,6,0},{6,7,1},{7,5,1},{5,4,1}};
        Node actualRoot = solution.buildTree(descriptions);
        assertEquals(8, actualRoot.val);
        assertEquals(true, (actualRoot.left != null && actualRoot.left.val == 7));
        assertEquals(false, (actualRoot.right == null || actualRoot.right.val != 4));
    }
}
```