```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Solution {

    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int n = grid.length;
        int[] row = new int[n];
        int[] col = new int[n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] = Math.max(row[i], grid[i][j]);
                col[j] = Math.max(col[j], grid[i][j]);
            }
        }

        int result = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result += Math.min(row[i], col[j]) - grid[i][j];
            }
        }
        return result;
    }

    @Test
    public void test_Example1() {
        int[][] grid = { {3,0,8,4},{2,4,5,7},{9,2,6,3},{0,3,1,0} };
        assertEquals(35, maxIncreaseKeepingSkyline(grid));
    }

    @Test
    public void test_Example2() {
        int[][] grid = { {0,0,0},{0,0,0},{0,0,0} };
        assertEquals(0, maxIncreaseKeepingSkyline(grid));
    }

    @Test
    public void test_Example3() {
        int[][] grid = { {1,2,3},{4,5,6},{7,8,9} };
        assertEquals(15, maxIncreaseKeepingSkyline(grid));
    }

    @Test
    public void test_Example4() {
        int[][] grid = { {100,0,0},{0,0,0},{0,0,0} };
        assertEquals(100, maxIncreaseKeepingSkyline(grid));
    }

    @Test
    public void test_Example5() {
        int[][] grid = { {1,2},{3,4},{5,6} };
        assertEquals(11, maxIncreaseKeepingSkyline(grid));
    }
}
```