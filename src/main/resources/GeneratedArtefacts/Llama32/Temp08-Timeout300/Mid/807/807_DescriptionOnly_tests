package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.807;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.807.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {

    @Test
    public void test_5x5_grid() {
        int[][] grid = new int[5][5];
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                grid[i][j] = 2 + i + j;
            }
        }

        Solution solution = new Solution();
        int expectedMaxSumIncrease = 100;
        int actualMaxSumIncrease = solution.maxSumOfHeightIncrease(grid);

        assertEquals(expectedMaxSumIncrease, actualMaxSumIncrease);
    }

    @Test
    public void test_3x3_grid() {
        int[][] grid = new int[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                grid[i][j] = 1 + i + j;
            }
        }

        Solution solution = new Solution();
        int expectedMaxSumIncrease = 90;
        int actualMaxSumIncrease = solution.maxSumOfHeightIncrease(grid);

        assertEquals(expectedMaxSumIncrease, actualMaxSumIncrease);
    }

    @Test
    public void test_2x2_grid() {
        int[][] grid = new int[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                grid[i][j] = 1 + i + j;
            }
        }

        Solution solution = new Solution();
        int expectedMaxSumIncrease = 70;
        int actualMaxSumIncrease = solution.maxSumOfHeightIncrease(grid);

        assertEquals(expectedMaxSumIncrease, actualMaxSumIncrease);
    }

    @Test
    public void test_50x50_grid() {
        int[][] grid = new int[50][50];
        for (int i = 0; i < 50; i++) {
            for (int j = 0; j < 50; j++) {
                grid[i][j] = i + j;
            }
        }

        Solution solution = new Solution();
        long expectedMaxSumIncrease = 5005L * 49L / 2L;
        long actualMaxSumIncrease = solution.maxSumOfHeightIncrease(grid);

        assertEquals(expectedMaxSumIncrease, actualMaxSumIncrease);
    }

    @Test
    public void test_1x1_grid() {
        int[][] grid = new int[1][1];
        for (int i = 0; i < 1; i++) {
            for (int j = 0; j < 1; j++) {
                grid[i][j] = 1;
            }
        }

        Solution solution = new Solution();
        int expectedMaxSumIncrease = 100;
        int actualMaxSumIncrease = solution.maxSumOfHeightIncrease(grid);

        assertEquals(expectedMaxSumIncrease, actualMaxSumIncrease);
    }
}