```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionOnlyTest {

    @Test
    public void testOneMatrix() {
        int[][] matrix = {{1, 0}, {0, 1}};
        assertEquals(1, numIslands(matrix));
    }

    @Test
    public void testOneRow() {
        int[][] matrix = {{1}};
        assertEquals(1, numIslands(matrix));
    }

    @Test
    public void testTwoRows() {
        int[][] matrix = {{1, 0}, {0, 1}};
        assertEquals(2, numIslands(matrix));
    }

    @Test
    public void testLargeMatrix() {
        int[][] matrix = {
            {1, 1, 1, 1, 0},
            {1, 1, 1, 1, 0},
            {1, 1, 1, 1, 0},
            {1, 1, 1, 1, 0}
        };
        assertEquals(3, numIslands(matrix));
    }

    @Test
    public void testMatrixWithZero() {
        int[][] matrix = {{1, 0}, {0, 1}};
        assertEquals(2, numIslands(matrix));
    }
}

public class Solution {

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;

        int count = 0;
        for(int row=0;row<grid.length;++row){
            for(int col=0;col<grid[0].length;++col){
                if(grid[row][col]=='1'){
                    dfs(grid, row, col);
                    count++;
                }
            }
        }

        return count;
    }

    public void dfs(char[][] grid, int i, int j) {
        if(i<0||j<0||i>=grid.length||j>=grid[0].length||grid[i][j]=='0') return ;
        grid[i][j] = '0';
        dfs(grid, i+1,j);
        dfs(grid, i-1,j);
        dfs(grid, i,j+1);
        dfs(grid, i,j-1);
    }
}
```