package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2415;

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Solution {

    public TreeNode reverseLevel(TreeNode root, int level) {
        if (root == null || level == 1)
            return root;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean[] oddLevel = new boolean[level + 1];
        for (int i = 0; i <= level; i++)
            oddLevel[i] = (i % 2 == 1);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (oddLevel[level])
                    swap(node.left, node.right);
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
            level--;
        }
        return root;
    }

    private void swap(TreeNode left, TreeNode right) {
        int temp = left.val;
        left.val = right.val;
        right.val = temp;
    }

}