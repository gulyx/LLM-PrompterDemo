```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    public ListNode deleteNode(ListNode head, int val) {
        if (head.val == val) {
            return head.next;
        }
        ListNode curr = head;
        while (curr.next != null && curr.next.val != val) {
            curr = curr.next;
        }
        if (curr.next != null) {
            int temp = curr.next.val;
            curr.next.val = val;
            curr.next = curr.next.next;
            curr.next.val = temp;
        }
        return head;
    }

    @Test
    public void testExample1() {
        ListNode node3 = new ListNode(3);
        ListNode node2 = new ListNode(2);
        ListNode node1 = new ListNode(1);
        ListNode node0 = new ListNode(0);

        node3.next = node2;
        node2.next = node1;
        node1.next = node0;

        int val = 5;
        ListNode head = deleteNode(node3, val);

        // assertion
        ListNode expected = node3;
        while (head != null) {
            if (expected == null)
                break;
            if (head.val != expected.val)
                break;
            head = head.next;
            expected = expected.next;
        }

        assertEquals(expected, null);
    }

    @Test
    public void testExample2() {
        ListNode node3 = new ListNode(3);
        ListNode node2 = new ListNode(2);
        ListNode node1 = new ListNode(1);
        ListNode node0 = new ListNode(0);

        node3.next = node2;
        node2.next = node1;
        node1.next = node0;

        int val = 1;
        ListNode head = deleteNode(node3, val);

        // assertion
        ListNode expected = node3;
        while (head != null) {
            if (expected == null)
                break;
            if (head.val != expected.val)
                break;
            head = head.next;
            expected = expected.next;
        }

        assertEquals(expected, null);
    }
}
```