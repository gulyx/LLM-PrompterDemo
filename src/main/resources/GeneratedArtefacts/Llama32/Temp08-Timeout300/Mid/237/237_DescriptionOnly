package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.List;
import java.util.ArrayList;
import static org.junit.Assert.*;
public class 237_DescriptionOnlyTest {

    public static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    private void build(ListNode head, List<Integer> values) {
       for (int value : values)
           head = addNode(head, value);
    }

    private ListNode addNode(ListNode head, int val) {
        ListNode newNode = new ListNode(val);
        if (head == null || head.val != val)
            return newNode;
        ListNode current = head;
        while (current.next != null && current.next.val != val)
            current = current.next;
        if (current.next == null)
            throw new RuntimeException("Node not found");
        current.next = newNode;
        newNode.next = current.next;
        return newNode;
    }

    private void assertEqual(ListNode head, List<Integer> expected) {
       ListNode current = head;
       while (current != null) {
           int index = 0;
           for (int value : expected)
               if (value == current.val) {
                   index++;
                   break;
               }
            current = current.next;
       }
        assertEquals(expected.size(), index);
    }

    @Test
    public void testDeleteNode() {
        ListNode head = null;
        List<Integer> values = new ArrayList<>(List.of(1, 2, 3, 4, 5));
        build(head, values);

        ListNode node = head.next.next;
        deleteNode(node);

        assertEquals(List.of(1, 2, 4, 5), getValues(head));
    }

    @Test
    public void testDeleteMiddleNode() {
        ListNode head = null;
        List<Integer> values = new ArrayList<>(List.of(1, 3, 5, 7, 9));
        build(head, values);

        ListNode node = head.next;
        deleteNode(node);

        assertEquals(List.of(1, 3, 5, 7), getValues(head));
    }

    @Test
    public void testDeleteLastNode() {
        ListNode head = null;
        List<Integer> values = new ArrayList<>(List.of(1, 2, 3, 4, 5));
        build(head, values);

        ListNode node = head.next.last();
        deleteNode(node);

        assertEquals(List.of(1, 2, 3, 5), getValues(head));
    }

    @Test
    public void testDeleteFirstNode() {
        ListNode head = null;
        List<Integer> values = new ArrayList<>(List.of(2, 4, 6, 8, 10));
        build(head, values);

        ListNode node = head.next;
        deleteNode(node);

        assertEquals(List.of(2, 4, 6, 8), getValues(head));
    }

    private List<Integer> getValues(ListNode head) {
        List<Integer> result = new ArrayList<>();
        while (head != null)
            result.add(head.val);
        return result;
    }

    private void deleteNode(ListNode node) {
        ListNode current = node;
        while (current.next != null && current.next.val != node.val)
            current = current.next;
        if (current.next == null)
            throw new RuntimeException("Node not found");
        current.next = current.next.next;
    }
}