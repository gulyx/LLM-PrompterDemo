```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Main {

    @Test
    public void testBitwiseOrSubset() {
        int[] nums = {3, 1};
        int expectedOutput = 2;
        assertEquals(expectedOutput, countSubsets(nums));
    }

    @Test
    public void testBitwiseOrSubset_Example_2() {
        int[] nums = {2, 2, 2};
        int expectedOutput = 7;
        assertEquals(expectedOutput, countSubsets(nums));
    }

    @Test
    public void testBitwiseOrSubset_Example_3() {
        int[] nums = {3, 2, 1, 5};
        int expectedOutput = 6;
        assertEquals(expectedOutput, countSubsets(nums));
    }

    @Test
    public void testBitwiseOrSubset_EmptyArray() {
        int[] nums = {};
        int expectedOutput = 0;
        assertEquals(expectedOutput, countSubsets(nums));
    }

    @Test
    public void testBitwiseOrSubset_SingleElementArray() {
        int[] nums = {1};
        int expectedOutput = 1;
        assertEquals(expectedOutput, countSubsets(nums));
    }
}

public class Main {

    public int countSubsets(int[] nums) {
        int n = nums.length;
        boolean[] dp = new boolean[n];
        for (int i = 0; i < n; i++) {
            dp[i] = true;
        }

        for (int num : nums) {
            for (int i = n - 1; i >= 0; i--) {
                if ((num & nums[i]) == num && !dp[i]) {
                    dp[i] = true;
                }
            }
        }

        int count = 0;
        for (boolean b : dp) {
            if (b)
                count++;
        }
        return count - 1;
    }
}
```