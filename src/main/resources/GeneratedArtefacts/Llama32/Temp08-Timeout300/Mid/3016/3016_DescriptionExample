```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void [--Example 1--] Test1() {
        String word = "abcde";
        int result = findMinPushes(word);
        assertEquals(5, result);
    }

    @Test
    public void [--Example 2--] Test2() {
        String word = "xyzxyzxyzxyz";
        int result = findMinPushes(word);
        assertEquals(12, result);
    }

    @Test
    public void [--Example 3--] Test3() {
        String word = "aabbccdd";
        int result = findMinPushes(word);
        assertEquals(8, result);
    }

    @Test
    public void [--Example 4--] Test4() {
        String word = "ababab";
        int result = findMinPushes(word);
        assertEquals(6, result);
    }

    @Test
    public void [--Example 5--] Test5() {
        String word = "";
        int result = findMinPushes(word);
        assertEquals(0, result);
    }

    private int findMinPushes(String word) {
        if (word.isEmpty()) {
            return 0;
        }
        char[] chars = new char[26];
        for (int i = 0; i < 26; i++) {
            chars[i] = (char) ('a' + i);
        }

        int minPushes = word.length();
        for (int i = 0; i < (1 << 10); i++) {
            String remappedWord = "";
            boolean[] usedKeys = new boolean[26];
            for (int j = 0; j < 10; j++) {
                if ((i & (1 << j)) != 0) {
                    remappedWord += chars[j % 3] + "a";
                    usedKeys[j % 3] = true;
                }
            }

            int pushes = 0;
            for (int j = 0; j < word.length(); j++) {
                char c = word.charAt(j);
                if (!usedKeys[c - 'a']) {
                    pushes++;
                } else {
                    remappedWord += chars[(c - 'a') % 3] + "b";
                }
            }

            minPushes = Math.min(minPushes, pushes);
        }

        return minPushes;
    }
}
```