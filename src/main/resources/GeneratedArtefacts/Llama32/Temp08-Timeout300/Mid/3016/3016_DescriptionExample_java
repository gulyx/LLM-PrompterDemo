package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.3016;

public class Solution {
    public int minimumPushCount(String word) {
        boolean[] usedKeys = new boolean[10];

        for (char c : word.toCharArray()) {
            if (!usedKeys[c - 'a']) {
                ++usedKeys[c - 'a'];
            } else {
                char keyChar = findKey(c, usedKeys);
                while (keyChar != c) {
                    --usedKeys[keyChar - 'a'];
                    ++usedKeys[(int)(c - 1) % 10];
                    keyChar = findKey(keyChar, usedKeys);
                }
            }
        }

        int count = 0;
        for (boolean b : usedKeys) {
            if (b)
                ++count;
        }
        return count * 2;
    }

    private char findKey(char c, boolean[] keys) {
        for (int i = 0; i < 10; ++i) {
            if (keys[i]) {
                return (char)((i + 'a') % 10);
            }
        }
        return '\0';
    }
}