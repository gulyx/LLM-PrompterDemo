```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.797;

import java.util.*;

public class Solution {

    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList<>();
        int n = graph.length;
        
        dfs(graph, 0, new ArrayList<>(), result);
        return result;
    }

    private void dfs(int[][] graph, int node, List<Integer> path, List<List<Integer>> result) {
        path.add(node);
        if (node == graph.length - 1) {
            result.add(new ArrayList<>(path));
        } else {
            for (int neighbor : graph[node]) {
                if (!path.contains(neighbor)) {
                    dfs(graph, neighbor, new ArrayList<>(path), result);
                }
            }
        }
    }

}
```