```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Arrays;

public class DescriptionExample {

    @Test
    public void testPaths() {
        int[][] graph = {{1,2},{3},{3},{}};
        String result = new Solution().allPathsSourceTarget(graph);
        assert (result.equals("[[0, 1, 3], [0, 2, 3]]") || result.equals("[0, 1, 3]"));
    }

    @Test
    public void testPaths2() {
        int[][] graph = {{4,3,1},{3,2,4},{3},{4},{}};
        String result = new Solution().allPathsSourceTarget(graph);
        assert (result.equals("[[0, 4], [0, 3, 4], [0, 1, 3, 4], [0, 1, 4]]") || result.equals("[[0, 4], [0, 3, 4], [0, 1, 3, 4], [0, 1, 4]]"));
    }

    @Test
    public void testPaths3() {
        int[][] graph = {{1}, {2}, {3}};
        String result = new Solution().allPathsSourceTarget(graph);
        assert (result.equals("[[0, 1], [0, 2], [0, 3]]") || result.equals("[[0, 1], [0, 2], [0, 3]]"));
    }

    @Test
    public void testPaths4() {
        int[][] graph = {};
        String result = new Solution().allPathsSourceTarget(graph);
        assert (result.isEmpty());
    }

    @Test
    public void testPaths5() {
        int[][] graph = {{1, 2}, {0}};
        String result = new Solution().allPathsSourceTarget(graph);
        assert (result.equals("[[0, 1], [0, 2]]") || result.equals("[[0, 1], [0, 2]]"));
    }
}

class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        int n = graph.length;
        if(n == 0)
            return new ArrayList<>();
        List<List<Integer>> res = new ArrayList<>();
        dfs(0, new ArrayList<>(), graph, res);
        return res;
    }

    private void dfs(int node, List<Integer> path, int[][] graph, List<List<Integer>> res) {
        path.add(node);
        if (node == n - 1)
            res.add(new ArrayList<>(path));
        else
            for (int i : graph[node])
                dfs(i, path, graph, res);
        path.remove(path.size() - 1);
    }
}
```