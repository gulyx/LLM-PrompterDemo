```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class Solution {

    @Test
    public void testExample1() {
        int n = 3;
        int[] startPos = {0,1};
        String s = "RRDDLU";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{1,5,4,3,1,0}, answer);
    }

    @Test
    public void testExample2() {
        int n = 2;
        int[] startPos = {1,1};
        String s = "LURD";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{4,1,0,0}, answer);
    }

    @Test
    public void testExample3() {
        int n = 1;
        int[] startPos = {0,0};
        String s = "LRUD";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{0,0,0,0}, answer);
    }

    @Test
    public void testEmptyString() {
        int n = 3;
        int[] startPos = {0,1};
        String s = "";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{0}, answer);
    }

    @Test
    public void testSingleInstruction() {
        int n = 3;
        int[] startPos = {2,0};
        String s = "R";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{1}, answer);
    }

    @Test
    public void testMoveOffGrid() {
        int n = 3;
        int[] startPos = {1,2};
        String s = "LR";
        int[] answer = solution(n, startPos, s);
        assertArrayEquals(new int[]{0}, answer);
    }
}

public class Solution {

    public static int[] solution(int n, int[] startPos, String s) {
        int m = s.length();
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int[][] visited = new int[m][n + n];

        int[] answer = new int[m];
        for (int i = m - 1; i >= 0; i--) {
            if (i == m - 1 || !isValid(i, startPos[0], startPos[1], directions[i])) continue;
            int count = i;

            if (!isValid(i + 1, startPos[0] + directions[i][0], startPos[1] + directions[i][1], directions[(i + 1) % 4])) {
                count--;
            }

            answer[m - i - 1] = count;
        }
        return answer;
    }

    private static boolean isValid(int row, int col, int[][] directions, int dirIdx) {
        if (row < 0 || row >= n + n) return false;
        if (col < 0 || col >= n + n) return false;

        if (row == 0 && col == 0) return true;

        return Math.abs(row - startPos[0]) <= directions[dirIdx][0] &&
               Math.abs(col - startPos[1]) <= directions[dirIdx][1];
    }
}
```