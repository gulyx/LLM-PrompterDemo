package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2161_DescriptionExample {

    @Test
    public void testRearrangeArray() {
        int[] nums = {9,12,5,10,14,3,10};
        int pivot = 10;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{9,5,3,10,10,12,14}, result);
    }

    @Test
    public void testRearrangeArray_2() {
        int[] nums = {-3,4,3,2};
        int pivot = 2;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{-3,2,4,3}, result);
    }

    @Test
    public void testRearrangeArray_3() {
        int[] nums = {1,2,3,4,5};
        int pivot = 3;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{1,2,3,4,5}, result);
    }

    @Test
    public void testRearrangeArray_4() {
        int[] nums = {1,1,1,1,1};
        int pivot = 1;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{1,1,1,1,1}, result);
    }

    @Test
    public void testRearrangeArray_5() {
        int[] nums = {1,2,3};
        int pivot = 4;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{1,2,3}, result);
    }
}

int[] rearrangeArray(int[] nums, int pivot) {
    int p1 = 0;
    int p2 = nums.length - 1;
    int p = 0;

    while (p1 < p2) {
        if (nums[p1] > pivot && nums[p2] < pivot) {
            swap(nums, p1++, p2--);
        } else if (nums[p1] == pivot) {
            p++;
            p1++;
        } else if (nums[p2] == pivot) {
            p++;
            p2--;
        } else if (nums[p1] >= nums[p2]) {
            p2--;
        } else {
            p1++;
        }
    }

    return nums;
}

void swap(int[] nums, int i, int j) {
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}