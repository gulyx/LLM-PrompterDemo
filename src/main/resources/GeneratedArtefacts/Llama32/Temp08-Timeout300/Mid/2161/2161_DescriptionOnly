package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2161_DescriptionOnlyTest {

    @Test
    public void testLessThanPivotIsBeforeGreaterThanPivot() {
        int[] nums = {2,1,2,1,4};
        int pivot = 3;
        int[] result = rearrangeArray(nums,pivot);
        assertArrayEquals(new int[]{1,1,2,2,4},result);
    }

    @Test
    public void testEqualPivotIsBetween() {
        int[] nums = {2,1,2,1,4};
        int pivot = 3;
        int[] result = rearrangeArray(nums,pivot);
        assertArrayEquals(new int[]{1,2,2,1,4},result);
    }

     @Test
    public void testLessThanPivotIsBeforeEqualPivot() {
        int[] nums = {2,1,2,1,4};
        int pivot = 3;
        int[] result = rearrangeArray(nums,pivot);
        assertArrayEquals(new int[]{1,2,3,4,2},result);
    }

     @Test
    public void testEqualPivotIsBetweenLessThanPivot() {
        int[] nums = {2,1,2,1,4};
        int pivot = 3;
        int[] result = rearrangeArray(nums,pivot);
        assertArrayEquals(new int[]{1,1,3,2,4},result);
    }

     @Test
    public void testEqualPivotIsBetweenGreaterThanPivot() {
        int[] nums = {2,1,2,1,4};
        int pivot = 3;
        int[] result = rearrangeArray(nums,pivot);
        assertArrayEquals(new int[]{1,1,2,3,4},result);
    }

     public static int[] rearrangeArray(int[] nums,int pivot) {
        int lessThanPivot = 0;
        int greaterThanPivot = nums.length-1;
        int temp = 0;
        while (temp <= greaterThanPivot ) {
            if (nums[temp]==pivot) {
                int swap = nums[lessThanPivot];
                nums[lessThanPivot] = nums[greaterThanPivot];
                nums[greaterThanPivot]=swap;

                lessThanPivot++;
                greaterThanPivot--;
                temp++;
            } else if(nums[temp]>pivot){
                greaterThanPivot--;
                int swap = nums[temp];
                nums[temp] = nums[greaterThanPivot];
                nums[greaterThanPivot]=swap;
            }
            else{
                 lessThanPivot++;
                  temp++;
            }

        }
        return nums;
    }
}