```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class DescriptionExampleTest {

    @Test
    public void test_SatisfyConditions() {
        int[] nums = {3,1,-2,-5,2,-4};
        int[] result = satisfyConditions(nums);
        assertArrayEquals(nums, result, 0.01);
    }

    @Test
    public void test_SatisfyConditions_BinaryArray() {
        int[] nums = {-1,1};
        int[] result = satisfyConditions(nums);
        assertArrayEquals(nums, result, 0.01);
    }

    @Test
    public void test_SatisfyConditions_EmptyArray() {
        int[] nums = {};
        int[] result = satisfyConditions(nums);
        assertArrayEquals(nums, result, 0.01);
    }

    @Test
    public void test_SatisfyConditions_NullArray() {
        int[] nums = null;
        try {
            satisfyConditions(nums);
            assert false : "Expected NullPointerException";
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test
    public void test_SatisfyConditions_ZeroLengthArray() {
        int[] nums = new int[0];
        int[] result = satisfyConditions(nums);
        assertArrayEquals(nums, result, 0.01);
    }

    private int[] satisfyConditions(int[] nums) {
        boolean positive = true;
        List<Integer> positives = new ArrayList<>();
        List<Integer> negatives = new ArrayList<>();

        for (int num : nums) {
            if (num == 0) {
                throw new RuntimeException("Array must contain only non-zero elements");
            }
            if (positive && num < 0) {
                positives.add(num);
                positive = false;
            } else if (!positive && num > 0) {
                negatives.add(num);
                positive = true;
            }
        }

        int[] result = new int[nums.length];
        int idxPos = 0;
        int idxNeg = 0;

        for (int i = 0; i < nums.length; i += 2) {
            if (i + 1 < nums.length) {
                result[i] = positives.get(idxPos++);
                result[i+1] = negatives.get(idxNeg++);
            } else {
                result[i] = positives.get(idxPos++);
            }
        }

        return result;
    }
}
```