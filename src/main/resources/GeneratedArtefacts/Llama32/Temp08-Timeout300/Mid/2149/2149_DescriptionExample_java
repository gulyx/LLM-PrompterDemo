package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2149;

import java.util.Arrays;

public class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        --Example 1--
        int[] expectedOutput = {3, -2, 1, -5, 2, -4};
        
        // Create a boolean array
        boolean[] evenPositive = new boolean[nums.length / 2];
        boolean[] oddNegative = new boolean[nums.length / 2];

        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                if (nums[i] > 0) {
                    evenPositive[i/2] = true;
                }
            } else {
                if (nums[i] < 0) {
                    oddNegative[i/2] = true;
                }
            }
        }

        // Create an array with the same elements, but alternating between positive and negative
        int[] result = new int[nums.length];
        for (int i = 0; i < evenPositive.length; i++) {
            if (evenPositive[i]) {
                result[2 * i] = nums[2 * i];
            }
            if (oddNegative[i]) {
                result[2 * i + 1] = nums[2 * i + 1];
            }
        }

        return result;
        
        --Example 2--
        int[] expectedOutput = {1, -1};
        
        // Create a boolean array
        boolean[] evenPositive = new boolean[nums.length / 2];
        boolean[] oddNegative = new boolean[nums.length / 2];

        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                if (nums[i] > 0) {
                    evenPositive[i/2] = true;
                }
            } else {
                if (nums[i] < 0) {
                    oddNegative[i/2] = true;
                }
            }
        }

        // Create an array with the same elements, but alternating between positive and negative
        int[] result = new int[nums.length];
        for (int i = 0; i < evenPositive.length; i++) {
            if (evenPositive[i]) {
                result[2 * i] = nums[2 * i + 1];
            }
            if (oddNegative[i]) {
                result[2 * i + 1] = nums[2 * i];
            }
        }

        return result;
    }
}