```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class Solution {

    public int numPointsInside(int[][] points, int[][] queries) {
        return bruteForce(points, queries);
    }

    private int bruteForce(int[][] points, int[][] queries) {
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; ++i) {
            int xj = queries[i][0], yj = queries[i][1], rj = queries[i][2];
            int count = 0;
            for (int[] p : points) {
                if (isInside(p, new int[]{xj, yj}, rj)) {
                    ++count;
                }
            }
            answer[i] = count;
        }
        return Arrays.stream(answer).sum();
    }

    private boolean isInside(int[] p1, int[] p2, int r) {
        double ax = p1[0], ay = p1[1];
        double bx = p2[0], by = p2[1];
        double cx = ax - bx;
        double cy = ay - by;

        if (cx * cx + cy * cy <= r * r)
            return true;
        if (r == 0 || cx * cx + cy * cy >= r * r)
            return false;

        double t = (-2 * cy * cx) / (cx * cx + cy * cy);
        int x = (int)(ax + bx * t);
        int y = (int)(ay + by * t);

        return Math.sqrt(x * x + y * y) <= r;
    }

    @Test
    public void testNumPointsInside() {
        int[][] points = {{1, 3}, {3, 3}, {5, 3}, {2, 2}};
        int[][] queries = {{2, 3, 1}, {4, 3, 1}, {1, 1, 2}};
        assertEquals(3, numPointsInside(points, queries));
    }

    @Test
    public void testNumPointsInside_2() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}};
        int[][] queries = {{1, 2, 2}, {2, 2, 2}, {4, 3, 2}, {4, 3, 3}};
        assertArrayEquals(new int[]{2, 3, 2, 4}, numPointsInside(points, queries));
    }

    @Test
    public void testNumPointsInside_3() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{2, 2, 1}, {3, 3, 1}};
        assertEquals(0, numPointsInside(points, queries));
    }

    @Test
    public void testNumPointsInside_4() {
        int[][] points = {{1, 1}, {2, 2}};
        int[][] queries = {{2, 2, 0}, {3, 3, 0}};
        assertEquals(2, numPointsInside(points, queries));
    }

    @Test
    public void testNumPointsInside_5() {
        int[][] points = {};
        int[][] queries = {{1, 1, 1}, {2, 2, 1}};
        assertEquals(0, numPointsInside(points, queries));
    }
}
```