```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 2442_DescriptionOnlyTest {

    @Test
    public void test1() {
        int[] nums = {1,10,12,12,4};
        int expectedOutput = 5;
        assertEquals(expectedOutput, distinctIntegers(nums));
    }

    @Test
    public void test2() {
        int[] nums = {0,1,2};
        int expectedOutput = 3;
        assertEquals(expectedOutput, distinctIntegers(nums));
    }

    @Test
    public void test3() {
        int[] nums = {1,2,3,4,5};
        int expectedOutput = 5;
        assertEquals(expectedOutput, distinctIntegers(nums));
    }

    @Test
    public void test4() {
        int[] nums = {10,22,36,99,0,9,12,7,14,4,9,8,6,1};
        int expectedOutput = 13;
        assertEquals(expectedOutput, distinctIntegers(nums));
    }

    @Test
    public void test5() {
        int[] nums = {1, 2,3,4,5,6,7,8,9,10};
        int expectedOutput = 15;
        assertEquals(expectedOutput, distinctIntegers(nums));
    }
}

public class UtilityClass {

    public static int distinctIntegers(int[] nums) {
        Set<Integer> result = new HashSet<>();
        for (int num : nums) {
            String str = Integer.toString(num);
            StringBuilder temp = new StringBuilder(str);
            reverse(temp);
            int reversedNum = Integer.parseInt(temp.toString());
            result.add(reversedNum);
        }
        return result.size();
    }

    public static void reverse(StringBuilder sb) {
        int l = 0, r = sb.length() - 1;
        while (l < r) {
            char temp = sb.charAt(l);
            sb.setCharAt(l, sb.charAt(r));
            sb.setCharAt(r, temp);
            l++;
            r--;
        }
    }

}
```