```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    public TreeNode buildTree(int[] nums) {
        return null; // implement tree building logic here
    }

    @Test
    public void testEvenGrandparentSum() {
        int[] nums = {6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, null, null, 5};
        TreeNode root = buildTree(nums);
        assertEquals(18, evenGrandparentSum(root));
    }

    @Test
    public void testNoEvenGrandparent() {
        int[] nums = {1};
        TreeNode root = buildTree(nums);
        assertEquals(0, evenGrandparentSum(root));
    }

    @Test
    public void testEmptyTree() {
        int[] nums = {};
        TreeNode root = buildTree(nums);
        assertEquals(0, evenGrandparentSum(root));
    }

    @Test
    public void testRootNodeNotEven() {
        int[] nums = {1};
        TreeNode root = buildTree(nums);
        assertEquals(0, evenGrandparentSum(root));
    }

    @Test
    public void testOnlyLeftChildIsEven() {
        int[] nums = {6, 7, 8, null, 2, null, null, null, 9, null, 1, 4, null, null};
        TreeNode root = buildTree(nums);
        assertEquals(10, evenGrandparentSum(root));
    }
}
```

Note that the `buildTree` method is not implemented here as it's not part of the test class and should be a separate utility method or class. You'll need to implement this logic according to your tree building requirements.

Also note that in the above code, `TreeNode` is an abstract data type representing nodes in a binary tree, but its implementation is left out for simplicity.