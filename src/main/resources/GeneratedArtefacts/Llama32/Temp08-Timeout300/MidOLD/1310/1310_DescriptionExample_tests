package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class DescriptionExampleTest {

    @Test
    public void testQuery1() {
        int[] arr = { 1,3,4,8 };
        int[][] queries = {{0,1},{1,2},{0,3},{3,3}};
        int[] answer = query(arr, queries);
        assertEquals(2, answer[0]);
        assertEquals(7, answer[1]);
        assertEquals(14, answer[2]);
        assertEquals(8, answer[3]);
    }

    @Test
    public void testQuery2() {
        int[] arr = { 4,8,2,10 };
        int[][] queries = {{2,3},{1,3},{0,0},{0,3}};
        int[] answer = query(arr, queries);
        assertEquals(8, answer[0]);
        assertEquals(0, answer[1]);
        assertEquals(4, answer[2]);
        assertEquals(4, answer[3]);
    }

    @Test
    public void testQuery3() {
        int[] arr = { 10,5,6 };
        int[][] queries = {{0,3},{2,3},{0,3}};
        int[] answer = query(arr, queries);
        assertArrayEquals(new int[]{8,4,14},answer);
    }

    @Test
    public void testQuery4() {
        int[] arr = { 1,1 };
        int[][] queries = {{0,1},{0,1}};
        int[] answer = query(arr, queries);
        assertArrayEquals(new int[]{2,0},answer);
    }

    @Test
    public void testQuery5() {
        int[] arr = { 1,3,4,8 };
        int[][] queries = {{3,3},{3,3}};
        int[] answer = query(arr, queries);
        assertArrayEquals(new int[]{14,8},answer);
    }

    private int[] query(int[] arr, int[][] queries) {
        int m = arr.length;
        int[] result = new int[queries.length];
        int xor = 0;
        for (int i = 0; i < m; ++i) {
            xor ^= arr[i];
        }
        for (int i = 0; i < queries.length; ++i) {
            int left = queries[i][0];
            int right = queries[i][1];
            result[i] = queryRange(arr, xor, left, right);
        }

        return result;
    }

    private int queryRange(int[] arr, int xor, int left, int right) {
        int res = 0;
        for (int i = left; i <= right; ++i) {
            res ^= arr[i];
        }
        return res ^ xor;
    }
}