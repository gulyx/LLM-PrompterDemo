package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class DescriptionExampleTest {

    @Test
    public void testDeleteNode() {
        LinkedList head = new LinkedList(4, 5, 1, 9);
        Node node = head.getNode(2);
        LinkedList result = new LinkedList();
        head.deleteNode(node);
        assertEquals(result, head);
    }

    @Test
    public void testDeleteFirstNode() {
        LinkedList head = new LinkedList(4, 5, 1, 9);
        Node node = head.getNode(0);
        LinkedList result = new LinkedList();
        head.deleteNode(node);
        assertEquals(result, head);
    }

    @Test
    public void testDeleteMiddleNode() {
        LinkedList head = new LinkedList(4, 5, 1, 9);
        Node node = head.getNode(2);
        head.insertAtHead(10);
        head.insertAtTail(11);
        LinkedList result = new LinkedList();
        head.deleteNode(node);
        assertEquals(result, head);
    }

    @Test
    public void testDeleteLastNode() {
        LinkedList head = new LinkedList(4, 5, 1, 9);
        Node node = head.getNode(head.getLength() - 2);
        head.insertAtHead(-10);
        head.insertAtTail(-11);
        LinkedList result = new LinkedList();
        head.deleteNode(node);
        assertEquals(result, head);
    }

    @Test
    public void testDeleteSingleNode() {
        LinkedList head = new LinkedList(4, 5, 1, 9);
        Node node = head.getNode(0);
        head.insertAtHead(-10);
        head.insertAtTail(-11);
        LinkedList result = new LinkedList();
        head.deleteNode(node);
        assertEquals(result, head);
    }
}

class LinkedList {
    int[] values;
    Node head;

    public LinkedList(int... values) {
        this.values = values;
        buildList();
    }

    private void buildList() {
        head = new Node(values[0]);
        Node current = head;
        for (int i = 1; i < values.length; i++) {
            current.next = new Node(values[i]);
            current = current.next;
        }
        current.next = null;
    }

    public Node getNode(int index) {
        Node current = head;
        int count = 0;
        while (current != null && count < index) {
            current = current.next;
            count++;
        }
        return current;
    }

    public void deleteNode(Node node) {
        if (node == null) {
            return;
        }
        values[node.index] = values[node.nextIndex];
        Node current = head;
        int count = 0;
        while (current != null && current.next != null) {
            if (current.next == node) {
                break;
            }
            current = current.next;
            count++;
        }
        if (current != null) {
            current.next = node.next;
        } else {
            head = node.next;
        }
    }

    public void insertAtHead(int value) {
        Node newNode = new Node(value);
        newNode.next = head;
        head = newNode;
    }

    public void insertAtTail(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public LinkedList() {}

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        Node current = head;
        while (current != null) {
            sb.append(current.value).append(" ");
            current = current.next;
        }
        return sb.toString().trim();
    }
}

class Node {
    int value;
    int index;
    Node next;

    public Node(int value) {
        this.value = value;
        this.index = values.indexOf(value);
        this.next = null;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    @Override
    public String toString() {
        return "Node{" +
                "value=" + value +
                '}';
    }
}