package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2317_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] nums = {3,2,4,6};
        assertEquals(7, maxBitwiseXor(nums));
    }

    @Test
    public void test_2() {
        int[] nums = {1,2,3,9,2};
        assertEquals(11, maxBitwiseXor(nums));
    }

    @Test
    public void test_3() {
        int[] nums = {0, 1, 2, 3, 4};
        assertEquals(7, maxBitwiseXor(nums));
    }

    @Test
    public void test_4() {
        int[] nums = {32, 8, 23};
        assertEquals(29, maxBitwiseXor(nums));
    }

    @Test
    public void test_5() {
        int[] nums = {1, 2, 3, 255, 7};
        assertEquals(255, maxBitwiseXor(nums));
    }
}

public class Solution {
    public int maxBitwiseXor(int[] nums) {
        int maxXOR = 0;
        for (int num : nums)
            maxXOR ^= num;

        HashSet<Integer> set = new HashSet<>();
        set.add(maxXOR);

        while (true) {
            maxXOR = maxXOR >> 1;
            if (maxXOR == 0)
                break;
            else
                set.add(maxXOR);
        }

        for (int i : nums) {
            if (!set.contains(i))
                continue;

            int result = 0;
            while (i > 0) {
                if ((result & i) != (result ^ i)) {
                    result ^= i;
                }
                i >>= 1;
            }
            maxXOR = Math.max(maxXOR, result);
        }

        return maxXOR;
    }
}