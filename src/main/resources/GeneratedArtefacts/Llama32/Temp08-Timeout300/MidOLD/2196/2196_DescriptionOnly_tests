package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class Solution {

    public TreeNode constructTree(int[][] descriptions) {
        Map<Integer, List<int[]>> children = new HashMap<>();
        for (int[] description : descriptions) {
            int parent = description[0], child = description[1];
            int isLeft = description[2];

            if (!children.containsKey(parent)) children.put(parent, new ArrayList<>());
            children.get(parent).add(new int[]{child, isLeft});
        }

        return buildTree(1, 1);
    }

    private TreeNode buildTree(int node, int parent) {
        List<int[]> children = children.get(node);

        if (children == null || children.isEmpty()) return null;

        TreeNode result = new TreeNode(node);

        for (int[] child : children) {
            int nChild = child[0], isLeft = child[1];

            if (isLeft == 1) {
                result.left = buildTree(nChild, node);
            } else {
                result.right = buildTree(nChild, node);
            }
        }

        return result;
    }

    private static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) { val = x; }

    }

}