package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Stack;
import static org.junit.Assert.*;
public class Solution {
    public String buildArray(int target[], int n) {
        Stack<Integer> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            sb.append("Push ").append(i).append("\n");
            if (!targetContains(stack, target[0], i)) {
                stack.push(i);
                sb.append("Pop\n");
            }
        }
        return sb.toString().trim();
    }

    public boolean targetContains(Stack<Integer> stack, int n1, int n2) {
        while (stack.size() > 0 && n1 == stack.peek()) {
            stack.pop();
            if (stack.size() == 0)
                return true;
            n1 = stack.peek();
        }
        return false;
    }

    @Test
    public void testBuildArray_01() {
        int target[] = {1, 3};
        int n = 2;
        String result = buildArray(target, n);
        assertTrue(result.contains("Push 1\n"));
        assertTrue(result.contains("Push 3\n"));
        assertTrue(result.contains("Pop\n"));
    }

    @Test
    public void testBuildArray_02() {
        int target[] = {4, 2, 5};
        int n = 6;
        String result = buildArray(target, n);
        assertTrue(result.contains("Push 1\n"));
        assertTrue(result.contains("Push 3\n"));
        assertTrue(result.contains("Pop\n"));
        assertTrue(result.contains("Push 5\n"));
    }

    @Test
    public void testBuildArray_03() {
        int target[] = {2};
        int n = 1;
        String result = buildArray(target, n);
        assertTrue(result.contains("Push 1\n"));
        assertTrue(result.contains("Pop\n"));
    }

    @Test
    public void testBuildArray_04() {
        int target[] = {};
        int n = 4;
        String result = buildArray(target, n);
        assertTrue(result.isEmpty());
    }
}