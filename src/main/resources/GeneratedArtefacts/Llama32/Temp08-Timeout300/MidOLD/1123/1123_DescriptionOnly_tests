package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.HashMap;
import java.util.Map;

public class DescriptionOnlyTest {

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) return null;
        if ((p.val == root.val && q.val != root.val) || (q.val == root.val && p.val != root.val)) return root;
        int leftDepth = getHeight(root.left);
        int rightDepth = getHeight(root.right);
        if (leftDepth > rightDepth) {
            return lowestCommonAncestor(root.left, p, q);
        } else if (rightDepth > leftDepth) {
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
    }

    private int getHeight(TreeNode node) {
        if (node == null) return 0;
        return 1 + Math.max(getHeight(node.left), getHeight(node.right));
    }

    @Test
    public void testLowestCommonAncestor() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.right.right = new TreeNode(0);

        TreeNode p = root.left.left;
        TreeNode q = root.left.right;

        TreeNode lca = lowestCommonAncestor(root, p, q);
        assertEquals(root, lca); // assuming root is the LCA
    }

    @Test
    public void testEmptyTree() {
        TreeNode root = null;
        assert(null == lowestCommonAncestor(root, new TreeNode(1), new TreeNode(2)));
    }

    @Test
    public void testLeafNode() {
        TreeNode root = new TreeNode(0);
        TreeNode p = root.left;
        TreeNode q = root.right;

        TreeNode lca = lowestCommonAncestor(root, p, q);
        assertEquals(root, lca); // assuming root is the LCA
    }

    @Test
    public void testSingleNodeTree() {
        TreeNode root = new TreeNode(1);
        TreeNode p = root;
        TreeNode q = root;

        TreeNode lca = lowestCommonAncestor(root, p, q);
        assertEquals(root, lca); // assuming root is the LCA
    }

    @Test
    public void testSameValue() {
        TreeNode root = new TreeNode(1);
        TreeNode p = root;
        TreeNode q = root;

        TreeNode lca = lowestCommonAncestor(root, p, q);
        assertEquals(root, lca); // assuming root is the LCA
    }

    @Test
    public void testDifferentValues() {
        TreeNode root = new TreeNode(1);
        TreeNode p = new TreeNode(2);
        TreeNode q = new TreeNode(3);

        TreeNode lca = lowestCommonAncestor(root, p, q);
        assertEquals(null, lca); // assuming no LCA
    }
}