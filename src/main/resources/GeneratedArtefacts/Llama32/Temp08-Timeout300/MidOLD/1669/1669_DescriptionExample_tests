package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        ListNode list1 = new ListNode(10);
        list1.next = new ListNode(1);
        list1.next.next = new ListNode(13);
        list1.next.next.next = new ListNode(6);
        list1.next.next.next.next = new ListNode(9);
        list1.next.next.next.next.next = new ListNode(5);

        ListNode list2 = new ListNode(1000000);
        list2.next = new ListNode(1000001);
        list2.next.next = new ListNode(1000002);

        ListNode result = removeNodes(list1, 3, 4, list2);
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }

    @Test
    public void test_2() {
        ListNode list1 = new ListNode(10);
        list1.next = new ListNode(1);

        ListNode list2 = new ListNode(1000000);

        ListNode result = removeNodes(list1, 0, 0, list2);
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }

    @Test
    public void test_3() {
        ListNode list1 = new ListNode(10);
        list1.next = new ListNode(13);

        ListNode list2 = new ListNode(1000000);

        ListNode result = removeNodes(list1, 0, 1, list2);
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }

    @Test
    public void test_4() {
        ListNode list1 = new ListNode(10);
        list1.next = new ListNode(6);

        ListNode list2 = new ListNode(1000000);

        ListNode result = removeNodes(list1, 0, 1, list2);
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }

    @Test
    public void test_5() {
        ListNode list1 = new ListNode(10);

        ListNode list2 = new ListNode(1000000);

        ListNode result = removeNodes(list1, 0, 0, list2);
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }

    public static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    public static ListNode removeNodes(ListNode head, int a, int b, ListNode list2) {
        if (a >= b) return null;

        ListNode prev1 = null;
        ListNode current1 = head;
        for (int i = 0; i < a - 1; i++) {
            prev1 = current1;
            current1 = current1.next;
        }

        ListNode first = null;
        if (prev1 != null) {
            ListNode nextFirst = current1;
            prev1.next = list2;
            first = list2;
            list2.next = nextFirst;
        } else {
            first = head;
            list2.next = current1;
        }

        ListNode prev2 = null;
        ListNode last = head;
        for (int i = b + 1; i < current1.next == null ? a : current1.next.val <= b ? current1.next.val + 1 : a; i++) {
            if (i >= a) break;

            if (last != null && prev2 != null) last.next = list2;
            last = first;
            prev2 = current2;
            current2 = current2.next;
        }

        return head;
    }
}