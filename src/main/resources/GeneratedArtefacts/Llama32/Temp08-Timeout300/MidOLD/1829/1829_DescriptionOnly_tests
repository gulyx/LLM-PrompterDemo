package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1829_DescriptionOnlyTest {

    @Test
    public void test1() {
        int[] nums = {0, 2};
        int maximumBit = 1;
        int[][] answer = new int[nums.length][maximumBit];
        answer[0] = getMaxXor(nums, maximumBit);
        assertEquals(new int[]{1}, answer[0]);
    }

    @Test
    public void test2() {
        int[] nums = {3, 10, 5};
        int maximumBit = 1;
        int[][] answer = new int[nums.length][maximumBit];
        answer[0] = getMaxXor(nums, maximumBit);
        assertEquals(new int[]{11}, answer[0]);
    }

    @Test
    public void test3() {
        int[] nums = {3,10,5};
        int maximumBit = 2;
        int[][] answer = new int[nums.length][maximumBit];
        answer[0] = getMaxXor(nums, maximumBit);
        assertEquals(new int[]{11,11},answer[0]);
    }

    @Test
    public void test4() {
        int[] nums = {5,10,6};
        int maximumBit = 2;
        int[][] answer = new int[nums.length][maximumBit];
        answer[0] = getMaxXor(nums, maximumBit);
        assertEquals(new int[]{11,15},answer[0]);
    }

    @Test
    public void test5() {
        int[] nums = {1,3,100};
        int maximumBit = 2;
        int[][] answer = new int[nums.length][maximumBit];
        answer[0] = getMaxXor(nums, maximumBit);
        assertEquals(new int[]{9},answer[0]);
    }
    
    private static int[] getMaxXor(int[] nums, int maximumBit) {
        int maxVal = (int)Math.pow(2, maximumBit)-1;
        int[][] prefixXOR = new int[nums.length][maximumBit+1];
        for(int i=0; i<nums.length; i++) {
            if(i==0)
                prefixXOR[i][0] = nums[i];
            else
                prefixXOR[i][0] = prefixXOR[i-1][0]^nums[i];

            for (int j=1;j<=maximumBit;j++)
                prefixXOR[i][j]=prefixXOR[i-1][j]^nums[i];
        }
        
        int[] answer = new int[maximumBit];
        for(int i=maximumBit-1; i>=0 ;i--) {
            int max = -1;
            int val = 0;
            for (int j=0;j<nums.length;j++) {
                if(max < prefixXOR[nums.length-j-1][i] ) {
                    val=prefixXOR[nums.length-j-1][i];
                    max = prefixXOR[nums.length-j-1][i];  
                }
            }

            answer[i]=val;
        }
        
        return answer;
    }
}