package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1944_DescriptionOnly {

    @Test
    public void test_0() {
        int[] heights = {1,3,2,2,5};
        int[] expected = {2,1,1,0,0};
        assertArrayEquals(expected, new Solution().canSeePersonsBefore(heights));
    }

    @Test
    public void test_1() {
        int[] heights = {3,4,5};
        int[] expected = {0,1,2};
        assertArrayEquals(expected, new Solution().canSeePersonsBefore(heights));
    }

    @Test
    public void test_2() {
        int[] heights = {2,2,2,2,2};
        int[] expected = {4,3,2,1,0};
        assertArrayEquals(expected, new Solution().canSeePersonsBefore(heights));
    }

    @Test
    public void test_3() {
        int[] heights = {1,2,1,2,3,2};
        int[] expected = {3,2,3,2,1,0};
        assertArrayEquals(expected, new Solution().canSeePersonsBefore(heights));
    }

    @Test
    public void test_4() {
        int[] heights = {3, 1, 4, 2};
        int[] expected = {2,1,0,1};
        assertArrayEquals(expected, new Solution().canSeePersonsBefore(heights));
    }
}

class Solution {

    public int[] canSeePersonsBefore(int[] heights) {
        int n = heights.length;
        int[] answer = new int[n];
        Deque<Integer> stack = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stack.peekFirst() < heights[i]) {
                answer[stack.pollFirst()]++;
            }
            if (!stack.isEmpty()) {
                answer[i] += 1;
            }
            stack.offerLast(i);
        }

        return answer;
    }
}