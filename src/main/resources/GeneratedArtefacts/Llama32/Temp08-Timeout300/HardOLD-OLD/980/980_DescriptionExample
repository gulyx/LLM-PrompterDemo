```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class 980_DescriptionExample {

    @Test
    public void test1() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,2,-1}};
        assertEquals(2, new Solution().uniquePathsIII(grid));
    }

    @Test
    public void test2() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,0,2}};
        assertEquals(4, new Solution().uniquePathsIII(grid));
    }

    @Test
    public void test3() {
        int[][] grid = {{0,1},{2,0}};
        assertEquals(0, new Solution().uniquePathsIII(grid));
    }

    private class Solution {

        private int rows;
        private int cols;

        public int uniquePathsIII(int[][] grid) {
            int startRow = 0;
            int startCol = 0;
            for (int i = 0; i < rows; i++) {
                if (grid[i][0] == 1) {
                    startRow = i;
                    break;
                }
            }
            for (int j = 0; j < cols; j++) {
                if (grid[0][j] == 1) {
                    startCol = j;
                    break;
                }
            }

            int count = 0;

            dfs(grid, startRow, startCol);
            return count;
        }

        private void dfs(int[][] grid, int row, int col) {
            if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] == -1)
                return;

            if (grid[row][col] == 2) {
                count++;
                return;
            }

            grid[row][col] = -2;

            dfs(grid, row + 1, col);
            dfs(grid, row - 1, col);
            dfs(grid, row, col + 1);
            dfs(grid, row, col - 1);

            grid[row][col] = 0;
        }
    }
}
```