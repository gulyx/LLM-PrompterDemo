package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 980_DescriptionOnly {

    @Test
    public void test_1() {
        int[][] grid = {{2,1,0},{0,1,-1},{1,0,-1}};
        assertEquals(1, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{2, 4, -1}, {-1, 3, 1], {0, 2, 4}};
        assertEquals(2, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{1,0,2},{3,-1,-2},{5,4,6}};
        assertEquals(-1, numUniquePaths(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{-1, 1}, {1, -1}};
        assertEquals(0, numUniquePaths(grid));
    }

    @Test
    public void test_5() {
        int[][] grid = {};
        assertEquals(-1, numUniquePaths(grid));
    }
}

public class Solution {

    public static int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean[][] visited = new boolean[m][n];
        int[] rowDir = {-1, 0, 1, 0};
        int[] colDir = {0, -1, 0, 1};

        return dfs(grid, m, n, 0, 0, visited, rowDir, colDir);
    }

    public static int dfs(int[][] grid, int m, int n, int row, int col, boolean[][] visited, int[] rowDir, int[] colDir) {
        if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col] || grid[row][col] == -1) {
            return 0;
        }

        if (grid[row][col] == 2)
            return 1;

        visited[row][col] = true;
        int count = 0;
        for (int i = 0; i < 4; i++) {
            count += dfs(grid, m, n, row + rowDir[i], col + colDir[i], visited, rowDir, colDir);
        }

        return count;
    }
}