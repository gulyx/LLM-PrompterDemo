```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MyCalendarThree {

    private int[][] events = {{10, 20}, {50, 60}, {10, 40}, {5, 15}, {5, 10}, {25, 55}};

    @Test
    public void testMyCalendarThree_1() {
        MyCalendarThree myCalendarThree = new MyCalendarThree();
        int[] result = myCalendarThree.book(0);
        assertEquals(1, result[0]);
    }

    @Test
    public void testMyCalendarThree_2() {
        MyCalendarThree myCalendarThree = new MyCalendarThree();
        int[] result = myCalendarThree.book(1);
        assertEquals(1, result[0]);
    }

    @Test
    public void testMyCalendarThree_3() {
        MyCalendarThree myCalendarThree = new MyCalendarThree();
        int[] result = myCalendarThree.book(2);
        assertEquals(2, result[0]);
    }

    @Test
    public void testMyCalendarThree_4() {
        MyCalendarThree myCalendarThree = new MyCalendarThree();
        int[] result = myCalendarThree.book(3);
        assertEquals(3, result[0]);
    }

    @Test
    public void testMyCalendarThree_5() {
        MyCalendarThree myCalendarThree = new MyCalendarThree();
        int[] result = myCalendarThree.book(4);
        assertEquals(3, result[0]);
    }
}

class MyCalendarThree {

    private int[][] intervals;

    public MyCalendarThree() {}

    public int book(int startTime, int endTime) {
        intervals = new int[][] {};
        for (int i = 0; i < events.length; i++) {
            intervals = addInterval(intervals, events[i]);
        }

        if (intervals.length == 0) {
            return 0;
        }
        return findMaxK();
    }

    private int[][] addInterval(int[][] intervals, int[] interval) {
        if (intervals.length == 0 || intervals[intervals.length - 1][1] < interval[0]) {
            int[][] newIntervals = new int[][] {interval};
            return newIntervals;
        } else {
            int maxK = findMaxK(intervals);
            intervals[intervals.length - 1][1] = Math.max(maxK, interval[1]);
            for (int i = intervals.length - 2; i >= 0; i--) {
                if (intervals[i][1] < interval[0]) {
                    break;
                }
                int maxK = findMaxK(intervals);
                intervals[i][1] = Math.max(maxK, interval[1]);
            }

            return intervals;
        }
    }

    private int findMaxK(int[][] intervals) {
        Arrays.sort(intervals, (a,b)->Integer.compare(a[0], b[0]));
        if (intervals.length < 2) {
            return intervals.length - 1;
        }
        for (int i = 1; i < intervals.length; i++) {
            int[] currInt = intervals[i];
            int[] prevInt = intervals[i-1];

            if (currInt[0] <= prevInt[1]) {
                return i;
            }
        }
        return intervals.length - 1;
    }

}
```