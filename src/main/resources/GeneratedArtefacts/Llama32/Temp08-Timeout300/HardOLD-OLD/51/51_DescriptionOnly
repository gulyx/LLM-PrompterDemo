package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 51_DescriptionOnly {
 
     public char[][] solve(char[][] board, int n) {

         return new char[n][n];
     }

    @Test
    public void testSolve() {
        char[][] board = { { 'Q', '.' } };
        int n = 2;
        char[][] actual = solve(board, n);
        assertEquals(1, actual.length);
        assertEquals(2, actual[0].length);
    }
 
     @Test
    public void testSolveNoSolution() {
        char[][] board = { { '.', '.' } };
        int n = 4;
        assertArrayEquals(new char[4][4], solve(board, n));
    }

   @Test
   public void testSolveOneSolution(){
      char[][] board={ {'Q','.","."'},{'.",".","Q"},{".",".","."}};
       int n=3; 
       char[][] result= new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result[i][j] =board[i][j];    
        }
          assertArrayEquals(result, solve(board,n));
    }

 @Test
   public void testSolveTwoSolution(){
      char[][] board={ {'Q','.","."'},{'.",".","Q"},{".",".","."}};
       int n=3; 
       char[][] result1 = new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result1[i][j] =board[i][j];    
        }
          assertArrayEquals(result1, solve(board,n));

      board={ {'Q','.","."'},{'.",".","Q"},{"Q",".","."}};
       char[][] result2 = new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result2[i][j] =board[i][j];    
        }
          assertArrayEquals(result2, solve(board,n));
    }

 @Test
    public void testSolveThreeSolution(){
      char[][] board={ {'Q','.","."'},{'.",".","Q"},{".","Q","."}};
       int n=3; 
       char[][] result1 = new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result1[i][j] =board[i][j];    
        }
          assertArrayEquals(result1, solve(board,n));

      board={ {'Q','.","."'},{'.","Q",".""},{".",".","Q"}};
       char[][] result2 = new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result2[i][j] =board[i][j];    
        }
          assertArrayEquals(result2, solve(board,n));

      board={ {'Q','.","."'},{'Q',".",".""},{".",".","."}};
       char[][] result3 = new char[n][n];
        for (int i = 0 ; i<n;i++){
           for(int j=0;j<n;j++)
             result3[i][j] =board[i][j];    
        }
          assertArrayEquals(result3, solve(board,n));
    }

}