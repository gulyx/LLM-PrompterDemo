package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionOnly {
 
    @Test
    public void test1() {
        int[][] grid = { {2,3,1},{6,8,4},{7,1,8}};
        assertEquals(23, maxCherries(grid));
    }
  
    @Test
    public void test2() {
        int[][] grid = {};
        assertEquals(0, maxCherries(grid));
    }
  
    @Test
    public void test3() {
        int[][] grid = { {1}};
        assertEquals(1, maxCherries(grid));
    }
  
    @Test
    public void test4() {
        int[][] grid = { {1,2},{3,4}};
        assertEquals(6, maxCherries(grid));
    }
  
    @Test
    public void test5() {
        int[][] grid = { {1, 8, 4},{3,9,7},{2, 4,2}};
        assertEquals(29, maxCherries(grid));
    }
  
}

private int maxCherries(int[][] grid) {
    if (grid.length == 0 || grid[0].length == 0) return 0;
    int m = grid.length, n = grid[0].length;
    int[][][] dp1 = new int[m][n][2];
    int[][][] dp2 = new int[m][n][2];

    for (int i = m - 1; i >= 0; --i) {
        for (int j = 0; j < n; ++j) {
            if (j > 0) {
                dp1[i][j][0] = dp1[i][j - 1][0];
                dp2[i][j][0] = dp2[i][j - 1][0];
            }
            if (i + 1 < m)
                dp1[i][j][1] = Math.max(dp1[i + 1][j - 1][0] + grid[i][j], 
                    Math.max(dp1[i + 1][j][0], dp1[i + 1][j + 1][0]));
            if (i + 1 < m)
                dp2[i][j][1] = Math.max(dp2[i + 1][j - 1][1] + grid[i][j], 
                    Math.max(dp2[i + 1][j][1], dp2[i + 1][j + 1][1]));
        }
    }

    return Math.max(dp1[0][n - 1][0], dp1[0][n - 1][1]) + Math.max(dp2[0][0][0], dp2[0][0][1]);
}