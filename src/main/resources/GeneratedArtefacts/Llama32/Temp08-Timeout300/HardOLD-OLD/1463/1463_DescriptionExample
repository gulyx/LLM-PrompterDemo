```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class1463_DescriptionExample {

    public int gridCherries(int[][] grid) {
        if (grid.length == 0 || grid[0].length == 0)
            return 0;
        
        int rows = grid.length, cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];

        int maxCherries = 0;

        for(int r=0; r<rows; ++r){
            int cherriesInRow = 0;
            for (int c=0; c<grid[r].length; ++c) {
                if (!visited[r][c]) {
                    visited[r][c] = true;
                    int right = grid[r][c];
                    if (c < cols - 1 && !visited[r][c+1])
                        right += grid[r][c+1];
                    int down = grid[r][c];
                    if (r < rows-1 && !visited[r+1][c])
                        down += grid[r+1][c];

                    cherriesInRow += Math.max(0, right + down - 2 * grid[r][c]);
                }
            }

            maxCherries = Math.max(maxCherries,cherriesInRow);
        }

        return maxCherries;
    }

    @Test
    public void testGrid1() {
        int[][] grid = {{3,1,1},{2,5,1},{1,5,5},{2,1,1}};
        assertEquals(24, gridCherries(grid));
    }

    @Test
    public void testGrid2() {
        int[][] grid = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, gridCherries(grid));
    }

    @Test
    public void testGrid3() {
        int[][] grid = {{0}};
        assertEquals(0, gridCherries(grid));
    }

    @Test
    public void testGrid4() {
        int[][] grid = {};
        assertEquals(0, gridCherries(grid));
    }

    @Test
    public void testGrid5() {
        int[][] grid = {{1,2},{3,4}};
        assertEquals(10, gridCherries(grid));
    }
}
```