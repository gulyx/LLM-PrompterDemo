package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class 1579_DescriptionExample {

    @Test
    public void test_example_0() {
        int[][] edges = {{3,1,2},{3,2,3},{1,1,3},{1,2,4},{1,1,2},{2,3,4}};
        assertEquals(2, maxNumEdgesToRemove(edges));
    }

    @Test
    public void test_example_1() {
        int[][] edges = {{3,1,2},{3,2,3},{1,1,4},{2,1,4}};
        assertEquals(0, maxNumEdgesToRemove(edges));
    }

    @Test
    public void test_example_2() {
        int[][] edges = {{3,2,3},{1,1,2},{2,3,4}};
        assertEquals(-1, maxNumEdgesToRemove(edges));
    }

    @Test
    public void test_example_3() {
        int[][] edges = {{3,1,2},{3,2,3},{1,1,3},{1,2,4},{1,1,2},{2,3,4},{3,1,5}};
        assertEquals(3, maxNumEdgesToRemove(edges));
    }

    @Test
    public void test_example_4() {
        int[][] edges = {{3,1,2},{3,2,3},{1,1,4},{2,1,4},{3,1,6},{3,2,7}};
        assertEquals(3, maxNumEdgesToRemove(edges));
    }
}

private static int maxNumEdgesToRemove(int[][] edges) {
    int n = edges.length;
    boolean[] visitedA = new boolean[n];
    boolean[] visitedB = new boolean[n];

    for (int i=0; i<n; ++i) {
        visitedA[i] = true;
        visitedB[i] = true;
    }

    for (int i=0; i<edges.length; ++i) {
        if (edges[i][0]==1 && !visitedA[edges[i][1]-1]) {
            visitedA[edges[i][1]-1] = true;
        }
        if (edges[i][0]==2 && !visitedB[edges[i][1]-1]) {
            visitedB[edges[i][1]-1] = true;
        }
    }

    int maxEdgesToRemove = 0;

    for (int i=0; i<n; ++i) {
        if (!visitedA[i]) {
            maxEdgesToRemove++;
        }
        if (!visitedB[i]) {
            maxEdgesToRemove++;
        }
    }

    return edges.length - maxEdgesToRemove > 0 ? -1 : maxEdgesToRemove;
}