```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class 2265_DescriptionExample {

    public int averageOfSubtree(TreeNode root) {
        return dfs(root);
    }

    private int dfs(TreeNode node) {
        if (node == null) {
            return 0;
        }
        int sum = node.val + dfs(node.left) + dfs(node.right);
        int avg = sum / node.lefts.size() + node.rights.size();
        return 1 + dfs(node.left) + dfs(node.right);
    }

    @Test
    public void testExample1() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(8);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(1);
        root.right.right = new TreeNode(6);

        assertEquals(5, averageOfSubtree(root));
    }

    @Test
    public void testExample2() {
        TreeNode root = new TreeNode(1);

        assertEquals(1, averageOfSubtree(root));
    }

    @Test
    public void testExample3() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(8);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(1);
        root.right.right = new TreeNode(6);

        assertEquals(5, averageOfSubtree(root));
    }

    @Test
    public void testExample4() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);

        assertEquals(1, averageOfSubtree(root));
    }

    @Test
    public void testExample5() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(8);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(1);
        root.right.right = new TreeNode(6);

        assertEquals(5, averageOfSubtree(root));
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    java.util.List<TreeNode> lefts;
    java.util.List<TreeNode> rights;

    public TreeNode(int val) {
        this.val = val;
        this.lefts = new java.util.ArrayList<>();
        this.rights = new java.util.ArrayList<>();
    }
}
```