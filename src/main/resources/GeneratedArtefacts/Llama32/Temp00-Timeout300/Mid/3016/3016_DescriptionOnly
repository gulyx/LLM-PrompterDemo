package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.HashMap;
import java.util.Map;

public class 3016_DescriptionOnly {

    @Test
    public void test1() {
        String word = "a";
        int expected = 1;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void test2() {
        String word = "ab";
        int expected = 2;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void test3() {
        String word = "abc";
        int expected = 3;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void test4() {
        String word = "aabbcc";
        int expected = 6;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void test5() {
        String word = "abcdefghijklmnopqrstuvwxyz";
        int expected = 26;
        assertEquals(expected, minPushes(word));
    }
}

public class Solution {

    public int minPushes(String word) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (!map.containsKey(c)) {
                int min = i + 1;
                for (char ch : "0123456789".toCharArray()) {
                    if (map.containsKey(ch) && map.get(ch) > min) {
                        min = map.get(ch);
                    }
                }
                map.put(c, min);
            }
        }

        int sum = 0;
        for (int value : map.values()) {
            sum += value;
        }
        return sum;
    }
}