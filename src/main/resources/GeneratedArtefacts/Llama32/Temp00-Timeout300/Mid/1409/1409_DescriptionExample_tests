```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] queries = {3, 1, 2, 1};
        int m = 5;
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(queries[i], m);
        }
        assertArrayEquals(new int[]{2, 1, 2, 1}, result);
    }

    @Test
    public void test_2() {
        int[] queries = {4, 1, 2, 2};
        int m = 4;
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(queries[i], m);
        }
        assertArrayEquals(new int[]{3, 1, 2, 0}, result);
    }

    @Test
    public void test_3() {
        int[] queries = {7, 5, 5, 8, 3};
        int m = 8;
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(queries[i], m);
        }
        assertArrayEquals(new int[]{6, 5, 0, 7, 5}, result);
    }

    @Test
    public void test_4() {
        int[] queries = {1, 2, 3};
        int m = 3;
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(queries[i], m);
        }
        assertArrayEquals(new int[]{1, 2, 3}, result);
    }

    @Test
    public void test_5() {
        int[] queries = {1};
        int m = 1;
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(queries[i], m);
        }
        assertArrayEquals(new int[]{1}, result);
    }

    private int binarySearch(int target, int m) {
        int left = 0;
        int right = m - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == target - 1) {
                return mid + 1;
            } else if (mid < target - 1) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left + 1;
    }
}
```