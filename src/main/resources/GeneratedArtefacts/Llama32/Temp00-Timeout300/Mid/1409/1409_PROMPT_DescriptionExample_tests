As a professional Software Tester, generate a complete Junit test-class (name the test-class as: '1409_DescriptionExample_testsTest', and use as first line the declaration: 'package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1409;') with 5 different JUnit tests for a Java class-under-test (you can assume the class-under-test is named: Solution, and import it as: 'import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1409.Solution;'). The class-under-test implements the following description in natural language with examples. Specifically below the description, each example is introduced by the keyword [--Example XX--] (where XX is a number), and it is composed by an input tuple and an expected output. Emit only the Java code, without any other tag or text.  Here is the description for the class-under-test: 
Given the array "queries" of positive integers between "1" and "m", you have to process all "queries[i]" (from "i=0" to "i=queries.length-1") according to the following rules:

In the beginning, you have the permutation "P=[1,2,3,...,m]".
For the current "i", find the position of "queries[i]" in the permutation "P" (indexing from 0) and then move this at the beginning of the permutation "P". Notice that the position of "queries[i]" in "P" is the result for "queries[i]".

Return an array containing the result for the given "queries".
[--Example 1--]
Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1]
[--Example 2--]
Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]
[--Example 3--]
Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]