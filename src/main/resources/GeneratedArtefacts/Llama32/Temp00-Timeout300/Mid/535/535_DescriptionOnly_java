package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.535;

public class Solution {
    private final String[] base64Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    private final int length = 6;
    private final long MAX_VALUE = Long.MAX_VALUE;
    private final long MIN_VALUE = Long.MIN_VALUE;
    private final long MOD = (long) Math.pow(10, 9);
    private final String[] base64Map = new String[256];
    private final StringBuilder sb = new StringBuilder(length * 4);

    public Solution() {
        for (int i = 0; i < 256; i++) {
            char c = (char) i;
            if (c >= 'A' && c <= 'Z') {
                base64Map[i] = String.valueOf(c);
            } else if (c >= 'a' && c <= 'z') {
                base64Map[i] = String.valueOf(c + 26);
            } else if (c >= '0' && c <= '9') {
                base64Map[i] = String.valueOf(c + 52);
            } else if (c == '+') {
                base64Map[i] = " ";
            }
        }
    }

    public String encode(String longUrl) {
        long hash = Long.parseLong(longUrl, 16);
        while (hash > MOD) {
            hash %= MOD;
        }
        while (hash < MIN_VALUE) {
            hash += MOD;
        }
        sb.setLength(0);
        while (hash > 0) {
            int remainder = (int) (hash % 64);
            if (remainder >= 16) {
                sb.append(base64Alphabet[remainder - 16]);
            } else {
                sb.append(base64Map[remainder]);
            }
            hash /= 64;
        }
        return "http://tinyurl.com/" + sb.toString();
    }

    public String decode(String shortUrl) {
        long hash = Long.parseLong(shortUrl.substring(17), 16);
        while (hash < MIN_VALUE) {
            hash += MOD;
        }
        while (hash > MAX_VALUE) {
            hash %= MOD;
        }
        StringBuilder result = new StringBuilder();
        int index = 0;
        while (hash > 0) {
            int remainder = (int) (hash % 64);
            if (remainder >= 16) {
                result.append(base64Alphabet[remainder - 16]);
            } else {
                result.insert(0, base64Map[remainder]);
            }
            hash /= 64;
        }
        return "https://leetcode.com/problems/design-tinyurl/" + result.toString();
    }
}