package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {
    private String shortUrlMap = "";

    public Solution() {

    }

    @Test
    public void testEncodeDecode() {
        Solution solution = new Solution();
        String longUrl = "https://leetcode.com/problems/design-tinyurl";
        String shortUrl = solution.encode(longUrl);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl);

        String decodedUrl = solution.decode(shortUrl);
        assertEquals(longUrl, decodedUrl);
    }

    @Test
    public void testEncodeDecodeWithDifferentLength() {
        Solution solution = new Solution();
        String longUrl1 = "https://leetcode.com/problems/design-tinyurl";
        String longUrl2 = "https://leetcode.com/problems/design-tinyurl2";

        String shortUrl1 = solution.encode(longUrl1);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl1);

        String decodedUrl1 = solution.decode(shortUrl1);
        assertEquals(longUrl1, decodedUrl1);

        String shortUrl2 = solution.encode(longUrl2);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl2);

        String decodedUrl2 = solution.decode(shortUrl2);
        assertEquals(longUrl2, decodedUrl2);
    }

    @Test
    public void testEncodeDecodeWithSameLength() {
        Solution solution = new Solution();
        String longUrl1 = "https://leetcode.com/problems/design-tinyurl";
        String longUrl2 = "https://leetcode.com/problems/design-tinyurl";

        String shortUrl1 = solution.encode(longUrl1);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl1);

        String decodedUrl1 = solution.decode(shortUrl1);
        assertEquals(longUrl1, decodedUrl1);

        String shortUrl2 = solution.encode(longUrl2);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl2);

        String decodedUrl2 = solution.decode(shortUrl2);
        assertEquals(longUrl2, decodedUrl2);
    }

    @Test
    public void testEncodeDecodeWithSameShortUrl() {
        Solution solution = new Solution();
        String longUrl1 = "https://leetcode.com/problems/design-tinyurl";
        String longUrl2 = "https://leetcode.com/problems/design-tinyurl";

        String shortUrl1 = solution.encode(longUrl1);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl1);

        String decodedUrl1 = solution.decode(shortUrl1);
        assertEquals(longUrl1, decodedUrl1);

        String shortUrl2 = solution.encode(longUrl2);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl2);

        String decodedUrl2 = solution.decode(shortUrl2);
        assertEquals(longUrl2, decodedUrl2);
    }

    @Test
    public void testEncodeDecodeWithDifferentShortUrl() {
        Solution solution = new Solution();
        String longUrl1 = "https://leetcode.com/problems/design-tinyurl";
        String longUrl2 = "https://leetcode.com/problems/design-tinyurl";

        String shortUrl1 = solution.encode(longUrl1);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl1);

        String decodedUrl1 = solution.decode(shortUrl1);
        assertEquals(longUrl1, decodedUrl1);

        String shortUrl2 = solution.encode(longUrl2);
        assertEquals("http://tinyurl.com/" + generateRandomString(6), shortUrl2);

        String decodedUrl2 = solution.decode(shortUrl2);
        assertEquals(longUrl2, decodedUrl2);
    }

    private String generateRandomString(int length) {
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            sb.append((char) ('a' + (int) (Math.random() * 26)));
        }
        return sb.toString();
    }
}