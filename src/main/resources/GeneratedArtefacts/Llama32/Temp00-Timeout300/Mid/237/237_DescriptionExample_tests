```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testDeleteNode() {
        ListNode head = new ListNode(4);
        head.next = new ListNode(5);
        head.next.next = new ListNode(1);
        head.next.next.next = new ListNode(9);

        ListNode node = head.next;
        head.next = head.next.next;

        ListNode expected = new ListNode(4);
        expected.next = new ListNode(1);
        expected.next.next = new ListNode(9);

        assertEquals(expected, head);
    }

    @Test
    public void testDeleteNodeMiddle() {
        ListNode head = new ListNode(4);
        head.next = new ListNode(5);
        head.next.next = new ListNode(1);
        head.next.next.next = new ListNode(9);

        ListNode node = head.next.next;
        head.next.next = head.next.next.next;

        ListNode expected = new ListNode(4);
        expected.next = new ListNode(5);
        expected.next.next = new ListNode(9);

        assertEquals(expected, head);
    }

    @Test
    public void testDeleteNodeLast() {
        ListNode head = new ListNode(4);
        head.next = new ListNode(5);
        head.next.next = new ListNode(1);
        head.next.next.next = new ListNode(9);

        ListNode node = head.next.next.next;
        head.next.next.next = null;

        ListNode expected = new ListNode(4);
        expected.next = new ListNode(5);
        expected.next.next = new ListNode(1);

        assertEquals(expected, head);
    }

    @Test
    public void testDeleteNodeEdge() {
        ListNode head = new ListNode(4);
        head.next = new ListNode(9);
        head.next.next = new ListNode(1);

        ListNode node = head;
        head = head.next;
        head.next = null;

        ListNode expected = new ListNode(9);
        expected.next = new ListNode(1);

        assertEquals(expected, head);
    }

    @Test
    public void testDeleteNodeEmpty() {
        ListNode head = null;

        ListNode node = null;
        head = deleteNode(head, node);

        assertNull(head);
    }
}

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}
```