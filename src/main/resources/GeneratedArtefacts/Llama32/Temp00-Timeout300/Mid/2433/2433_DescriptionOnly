package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2433_DescriptionOnly {

    @Test
    public void test_XOR_Satisfies_Pref() {
        int[] pref = {1, 2, 4};
        int[] arr = new int[pref.length];
        for (int i = 0; i < pref.length; i++) {
            arr[i] = pref[0]^pref[1]^...^pref[i];
        }
        assertArrayEquals(pref, arr);
    }

    @Test
    public void test_XOR_Satisfies_Pref_With_Negative() {
        int[] pref = {-1, -2, 4};
        int[] arr = new int[pref.length];
        for (int i = 0; i < pref.length; i++) {
            arr[i] = pref[0]^pref[1]^...^pref[i];
        }
        assertArrayEquals(pref, arr);
    }

    @Test
    public void test_XOR_Satisfies_Pref_With_Zero() {
        int[] pref = {0, 2, 4};
        int[] arr = new int[pref.length];
        for (int i = 0; i < pref.length; i++) {
            arr[i] = pref[0]^pref[1]^...^pref[i];
        }
        assertArrayEquals(pref, arr);
    }

    @Test
    public void test_XOR_Satisfies_Pref_With_Multiple_Zeros() {
        int[] pref = {0, 2, 4, 8};
        int[] arr = new int[pref.length];
        for (int i = 0; i < pref.length; i++) {
            arr[i] = pref[0]^pref[1]^...^pref[i];
        }
        assertArrayEquals(pref, arr);
    }

    @Test
    public void test_XOR_Satisfies_Pref_With_Multiple_Negative() {
        int[] pref = {-8, -4, 2};
        int[] arr = new int[pref.length];
        for (int i = 0; i < pref.length; i++) {
            arr[i] = pref[0]^pref[1]^...^pref[i];
        }
        assertArrayEquals(pref, arr);
    }

}