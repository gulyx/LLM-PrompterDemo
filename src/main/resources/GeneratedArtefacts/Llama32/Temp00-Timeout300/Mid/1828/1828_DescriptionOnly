package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1828_DescriptionOnly {

    @Test
    public void test1() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(answer, new int[]{4, 1, 0});
    }

    @Test
    public void test2() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{1, 1, 2}, {2, 2, 2}, {3, 3, 3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(answer, new int[]{1, 0, 0});
    }

    @Test
    public void test3() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{1, 1, 4}, {2, 2, 2}, {3, 3, 3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(answer, new int[]{0, 1, 0});
    }

    @Test
    public void test4() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{1, 1, 5}, {2, 2, 2}, {3, 3, 3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(answer, new int[]{0, 1, 0});
    }

    @Test
    public void test5() {
        int[][] points = {{1, 1}, {2, 2}, {3, 3}};
        int[][] queries = {{1, 1, 6}, {2, 2, 2}, {3, 3, 3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(answer, new int[]{0, 1, 0});
    }

    public int countPoints(int[][] points, int[] query) {
        int count = 0;
        for (int[] point : points) {
            if (Math.hypot(point[0] - query[0], point[1] - query[1]) <= query[2]) {
                count++;
            }
        }
        return count;
    }

}