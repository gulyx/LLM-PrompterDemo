package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2149_DescriptionOnlyTest {

    @Test
    public void testPositiveNegativeConsecutive() {
        int[] nums = {1, -2, 3, -4};
        int[] expected = {-2, 1, -4, 3};
        assertArrayEquals(expected, rearrangeArray(nums));
    }

    @Test
    public void testPositiveNegativeSameSignPreserved() {
        int[] nums = {-1, -2, 1, 2};
        int[] expected = {1, -1, 2, -2};
        assertArrayEquals(expected, rearrangeArray(nums));
    }

    @Test
    public void testAllPositive() {
        int[] nums = {1, 2, 3, 4};
        int[] expected = {1, 2, 3, 4};
        assertArrayEquals(expected, rearrangeArray(nums));
    }

    @Test
    public void testAllNegative() {
        int[] nums = {-1, -2, -3, -4};
        int[] expected = {-1, -2, -3, -4};
        assertArrayEquals(expected, rearrangeArray(nums));
    }

    @Test
    public void testEmptyArray() {
        int[] nums = {};
        int[] expected = {};
        assertArrayEquals(expected, rearrangeArray(nums));
    }

    private int[] rearrangeArray(int[] nums) {
        int positiveCount = 0;
        for (int num : nums) {
            if (num > 0) {
                positiveCount++;
            }
        }

        int[] positives = new int[positiveCount];
        int[] negatives = new int[nums.length - positiveCount];

        int posIndex = 0, negIndex = 0;
        for (int num : nums) {
            if (num > 0) {
                positives[posIndex++] = num;
            } else {
                negatives[negIndex++] = num;
            }
        }

        int[] result = new int[nums.length];
        for (int i = 0; i < positiveCount; i++) {
            result[i] = positives[i];
        }
        for (int i = positiveCount; i < nums.length; i++) {
            result[i] = negatives[i - positiveCount];
        }

        return result;
    }
}