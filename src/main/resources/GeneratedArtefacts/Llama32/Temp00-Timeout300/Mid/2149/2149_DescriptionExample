```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    @Test
    public void test_1() {
        int[] nums = {3, 1, -2, -5, 2, -4};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{3, -2, 1, -5, 2, -4}, result);
    }

    @Test
    public void test_2() {
        int[] nums = {-1, 1};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{1, -1}, result);
    }

    @Test
    public void test_3() {
        int[] nums = {1, 2, 3, 4, 5, 6};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{1, 2, 3, 6, 4, 5}, result);
    }

    @Test
    public void test_4() {
        int[] nums = {-1, -2, -3, -4, -5};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{-1, -2, -3, -4, -5}, result);
    }

    @Test
    public void test_5() {
        int[] nums = {0, 0, 0, 0};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{0, 0, 0, 0}, result);
    }
}

public class Main {

    public static int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        boolean[] seenPositive = new boolean[n];
        boolean[] seenNegative = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                seenPositive[i] = true;
            } else {
                seenNegative[i] = true;
            }
        }

        int positiveIndex = 0, negativeIndex = 0;

        for (int i = 0; i < n; i++) {
            if (!seenPositive[i]) {
                nums[positiveIndex++] = nums[i];
            } else {
                nums[negativeIndex++] = nums[i];
            }
        }

        return nums;
    }
}
```