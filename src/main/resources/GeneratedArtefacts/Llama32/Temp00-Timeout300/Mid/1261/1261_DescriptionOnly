package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class FindElements {

    @Test
    public void testFindElements() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);

        FindElements findElements = new FindElements(root);
        assertTrue(findElements.find(1));
        assertFalse(findElements.find(-1));
    }

    @Test
    public void testFindElementsWithLeftChild() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);

        FindElements findElements = new FindElements(root);
        assertTrue(findElements.find(3));
        assertFalse(findElements.find(-1));
    }

    @Test
    public void testFindElementsWithRightChild() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);

        FindElements findElements = new FindElements(root);
        assertTrue(findElements.find(5));
        assertFalse(findElements.find(-1));
    }

    @Test
    public void testFindElementsWithBothChildren() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);

        FindElements findElements = new FindElements(root);
        assertTrue(findElements.find(3));
        assertTrue(findElements.find(5));
        assertFalse(findElements.find(-1));
    }

    @Test
    public void testFindElementsWithNoChildren() {
        TreeNode root = new TreeNode(0);

        FindElements findElements = new FindElements(root);
        assertFalse(findElements.find(1));
        assertFalse(findElements.find(-1));
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

}