package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1310_DescriptionOnly {

    @Test
    public void test1() {
        int[] arr = {1, 3};
        int[][] queries = {{0, 1}};
        int[] answer = new int[queries.length];
        int result = xorQueries(arr, queries, answer);
        assertEquals(2, answer[0]);
    }

    @Test
    public void test2() {
        int[] arr = {2, 4};
        int[][] queries = {{0, 1}};
        int[] answer = new int[queries.length];
        int result = xorQueries(arr, queries, answer);
        assertEquals(6, answer[0]);
    }

    @Test
    public void test3() {
        int[] arr = {2, 4};
        int[][] queries = {{0, 1}, {1, 2}};
        int[] answer = new int[queries.length];
        int result = xorQueries(arr, queries, answer);
        assertEquals(6, answer[0]);
        assertEquals(10, answer[1]);
    }

    @Test
    public void test4() {
        int[] arr = {2, 4};
        int[][] queries = {{0, 2}};
        int[] answer = new int[queries.length];
        int result = xorQueries(arr, queries, answer);
        assertEquals(6, answer[0]);
    }

    @Test
    public void test5() {
        int[] arr = {1, 3};
        int[][] queries = {{0, 2}};
        int[] answer = new int[queries.length];
        int result = xorQueries(arr, queries, answer);
        assertEquals(4, answer[0]);
    }

    private int xorQueries(int[] arr, int[][] queries, int[] answer) {
        int n = arr.length;
        int[] prefixXor = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefixXor[i + 1] = prefixXor[i] ^ arr[i];
        }
        for (int i = 0; i < queries.length; i++) {
            answer[i] = prefixXor[queries[i][1] + 1] ^ prefixXor[queries[i][0]];
        }
        return answer[0];
    }
}