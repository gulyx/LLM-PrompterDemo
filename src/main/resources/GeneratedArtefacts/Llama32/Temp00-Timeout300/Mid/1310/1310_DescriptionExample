package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1310_DescriptionExample {

    @Test
    public void test1() {
        int[] arr = {1,3,4,8};
        int[][] queries = {{0,1},{1,2},{0,3},{3,3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = xorRange(arr, queries[i][0], queries[i][1]);
        }
        assertArrayEquals(new int[]{2,7,14,8}, answer);
    }

    @Test
    public void test2() {
        int[] arr = {4,8,2,10};
        int[][] queries = {{2,3},{1,3},{0,0},{0,3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = xorRange(arr, queries[i][0], queries[i][1]);
        }
        assertArrayEquals(new int[]{8,0,4,4}, answer);
    }

    @Test
    public void test3() {
        int[] arr = {1,2,3,4};
        int[][] queries = {{0,1},{1,2},{2,3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = xorRange(arr, queries[i][0], queries[i][1]);
        }
        assertArrayEquals(new int[]{1,3,7}, answer);
    }

    @Test
    public void test4() {
        int[] arr = {1,2,3,4};
        int[][] queries = {{0,0},{0,1},{1,1}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = xorRange(arr, queries[i][0], queries[i][1]);
        }
        assertArrayEquals(new int[]{1,2,3}, answer);
    }

    @Test
    public void test5() {
        int[] arr = {1,2,3,4};
        int[][] queries = {{0,3},{1,3},{2,3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = xorRange(arr, queries[i][0], queries[i][1]);
        }
        assertArrayEquals(new int[]{6,7,8}, answer);
    }

    public int xorRange(int[] arr, int left, int right) {
        int n = arr.length;
        int res = 0;
        for (int i = left; i <= right; i++) {
            res ^= arr[i];
        }
        return res;
    }
}