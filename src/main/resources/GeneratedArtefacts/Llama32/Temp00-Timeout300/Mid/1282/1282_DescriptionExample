```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.*;

public class DescriptionExample {

    @Test
    public void testGroupSizes() {
        int[] groupSizes = {3, 3, 3, 3, 3, 1, 3};
        List<List<Integer>> result = groupSizesIntoGroups(groupSizes);
        assertEquals(new ArrayList<>(Arrays.asList(5)), result.get(0));
        assertEquals(Arrays.asList(0, 1, 2), result.get(1));
        assertEquals(Arrays.asList(3, 4, 6), result.get(2));
    }

    @Test
    public void testGroupSizes_2() {
        int[] groupSizes = {2, 1, 3, 3, 3, 2};
        List<List<Integer>> result = groupSizesIntoGroups(groupSizes);
        assertEquals(Arrays.asList(1), result.get(0));
        assertEquals(Arrays.asList(0, 5), result.get(1));
        assertEquals(Arrays.asList(2, 3, 4), result.get(2));
    }

    @Test
    public void testGroupSizes_3() {
        int[] groupSizes = {1, 1, 1, 1, 1};
        List<List<Integer>> result = groupSizesIntoGroups(groupSizes);
        assertEquals(Arrays.asList(1), result.get(0));
        assertEquals(Arrays.asList(2), result.get(1));
        assertEquals(Arrays.asList(3), result.get(2));
        assertEquals(Arrays.asList(4), result.get(3));
        assertEquals(Arrays.asList(5), result.get(4));
    }

    @Test
    public void testGroupSizes_4() {
        int[] groupSizes = {2, 2, 2, 2};
        List<List<Integer>> result = groupSizesIntoGroups(groupSizes);
        assertEquals(Arrays.asList(1), result.get(0));
        assertEquals(Arrays.asList(3), result.get(1));
        assertEquals(Arrays.asList(5), result.get(2));
        assertEquals(Arrays.asList(7), result.get(3));
    }

    @Test
    public void testGroupSizes_5() {
        int[] groupSizes = {1, 1, 1, 1};
        List<List<Integer>> result = groupSizesIntoGroups(groupSizes);
        assertEquals(Arrays.asList(1), result.get(0));
        assertEquals(Arrays.asList(2), result.get(1));
        assertEquals(Arrays.asList(3), result.get(2));
        assertEquals(Arrays.asList(4), result.get(3));
    }

    public List<List<Integer>> groupSizesIntoGroups(int[] groupSizes) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            map.computeIfAbsent(groupSizes[i], k -> new ArrayList<>()).add(i);
        }
        List<List<Integer>> result = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            if (!entry.getValue().isEmpty()) {
                result.add(entry.getValue());
            }
        }
        return result;
    }
}
```