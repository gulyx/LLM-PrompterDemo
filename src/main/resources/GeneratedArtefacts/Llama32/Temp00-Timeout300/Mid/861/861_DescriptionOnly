```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionOnly {

    @Test
    public void test1() {
        int[][] grid = {{0, 1}, {1, 0}};
        assertEquals(2, maxScore(grid));
    }

    @Test
    public void test2() {
        int[][] grid = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
        assertEquals(3, maxScore(grid));
    }

    @Test
    public void test3() {
        int[][] grid = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};
        assertEquals(6, maxScore(grid));
    }

    @Test
    public void test4() {
        int[][] grid = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
        assertEquals(0, maxScore(grid));
    }

    @Test
    public void test5() {
        int[][] grid = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        assertEquals(4, maxScore(grid));
    }
}

public class Solution {

    public int maxScore(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[] row = new boolean[m];
        boolean[] col = new boolean[n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    row[i] = true;
                    col[j] = true;
                }
            }
        }

        int score = 0;

        for (int i = 0; i < m; i++) {
            if (row[i]) {
                score += (1 << i);
            }
        }

        for (int j = 0; j < n; j++) {
            if (col[j]) {
                score += (1 << j);
            }
        }

        return score;
    }
}
```