```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class SolutionTest {

    @Test
    public void testExample1() {
        int[][] logs = {{0,5},{1,2},{0,2},{0,5},{1,3}};
        int k = 5;
        int[] answer = new Solution().findDifferentUsersPerMinute(logs, k);
        assertArrayEquals(new int[]{0,2,0,0,0}, answer);
    }

    @Test
    public void testExample2() {
        int[][] logs = {{1,1},{2,2},{2,3}};
        int k = 4;
        int[] answer = new Solution().findDifferentUsersPerMinute(logs, k);
        assertArrayEquals(new int[]{1,1,0,0}, answer);
    }

    @Test
    public void testExample3() {
        int[][] logs = {{1,2},{2,3}};
        int k = 4;
        int[] answer = new Solution().findDifferentUsersPerMinute(logs, k);
        assertArrayEquals(new int[]{0,0,0,0}, answer);
    }

    @Test
    public void testExample4() {
        int[][] logs = {{1,2},{1,3}};
        int k = 4;
        int[] answer = new Solution().findDifferentUsersPerMinute(logs, k);
        assertArrayEquals(new int[]{0,0,0,0}, answer);
    }

    @Test
    public void testExample5() {
        int[][] logs = {{1,2},{1,3}};
        int k = 4;
        int[] answer = new Solution().findDifferentUsersPerMinute(logs, k);
        assertArrayEquals(new int[]{0,0,0,0}, answer);
    }
}

class Solution {

    public int[] findDifferentUsersPerMinute(int[][] logs, int k) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < logs.length; i++) {
            map.computeIfAbsent(logs[i][1], key -> new HashSet<>()).add(i);
        }
        List<Set<Integer>> list = new ArrayList<>(map.values());
        Collections.sort(list, (a, b) -> a.size() - b.size());
        int[] answer = new int[k];
        for (int i = 0; i < k; i++) {
            if (!list.get(i).isEmpty()) {
                answer[i] = list.get(i).size();
            }
        }
        return answer;
    }
}
```