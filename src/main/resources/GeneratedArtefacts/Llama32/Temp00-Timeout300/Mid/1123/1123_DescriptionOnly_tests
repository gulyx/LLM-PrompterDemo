package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1123;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1123.Solution;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class 1123_DescriptionOnly_testsTest {

    @Test
    public void testLowestCommonAncestor() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.right.right = new TreeNode(0);
        assertEquals(3, solution.lowestCommonAncestor(root).val);
    }

    @Test
    public void testLowestCommonAncestor_2() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(6);
        root.left = new TreeNode(7);
        root.right = new TreeNode(4);
        root.left.left = new TreeNode(8);
        root.left.right = new TreeNode(5);
        assertEquals(6, solution.lowestCommonAncestor(root).val);
    }

    @Test
    public void testLowestCommonAncestor_3() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        assertEquals(1, solution.lowestCommonAncestor(root).val);
    }

    @Test
    public void testLowestCommonAncestor_4() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        assertEquals(0, solution.lowestCommonAncestor(root).val);
    }

    @Test
    public void testLowestCommonAncestor_5() {
        Solution solution = new Solution();
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);
        root.right.left.left = new TreeNode(8);
        root.right.right.left = new TreeNode(4);
        root.right.right.right = new TreeNode(10);
        assertEquals(3, solution.lowestCommonAncestor(root).val);
    }
}