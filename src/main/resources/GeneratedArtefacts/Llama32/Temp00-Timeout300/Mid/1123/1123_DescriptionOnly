package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnlyTest {

    public static void main(String[] args) {
        DescriptionOnlyTest test = new DescriptionOnlyTest();
        test.test1();
        test.test2();
        test.test3();
        test.test4();
        test.test5();
    }

    public void test1() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.right.right = new TreeNode(0);
        System.out.println(testLowestCommonAncestor(root));
    }

    public void test2() {
        TreeNode root = new TreeNode(0);
        System.out.println(testLowestCommonAncestor(root));
    }

    public void test3() {
        TreeNode root = new TreeNode(1);
        System.out.println(testLowestCommonAncestor(root));
    }

    public void test4() {
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(0);
        root.right = new TreeNode(3);
        System.out.println(testLowestCommonAncestor(root));
    }

    public void test5() {
        TreeNode root = new TreeNode(7);
        root.left = new TreeNode(3);
        root.right = new TreeNode(15);
        root.right.left = new TreeNode(9);
        root.right.right = new TreeNode(20);
        System.out.println(testLowestCommonAncestor(root));
    }

    public int testLowestCommonAncestor(TreeNode root) {
        if (root == null) return 0;
        int leftDepth = testLowestCommonAncestor(root.left);
        int rightDepth = testLowestCommonAncestor(root.right);
        if (leftDepth > rightDepth) return leftDepth + 1;
        else if (rightDepth > leftDepth) return rightDepth + 1;
        else return leftDepth;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) {
        val = x;
        left = null;
        right = null;
    }
}