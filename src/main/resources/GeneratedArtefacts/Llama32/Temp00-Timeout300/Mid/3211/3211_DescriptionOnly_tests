package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.3211;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.3211.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionOnly_testsTest {

    @Test
    public void testValidStrings() {
        Solution solution = new Solution();
        String[] result = solution.validBinaryString(2);
        assertEquals(4, result.length);
        assertTrue(result[0].contains("1"));
        assertTrue(result[1].contains("1"));
        assertTrue(result[2].contains("1"));
        assertTrue(result[3].contains("1"));
    }

    @Test
    public void testValidStrings_WithOne() {
        Solution solution = new Solution();
        String[] result = solution.validBinaryString(1);
        assertEquals(2, result.length);
        assertTrue(result[0].contains("1"));
        assertTrue(result[1].contains("1"));
    }

    @Test
    public void testValidStrings_Empty() {
        Solution solution = new Solution();
        String[] result = solution.validBinaryString(0);
        assertEquals(1, result.length);
        assertTrue(result[0].isEmpty());
    }

    @Test
    public void testValidStrings_LargerThanTwo() {
        Solution solution = new Solution();
        String[] result = solution.validBinaryString(3);
        assertEquals(6, result.length);
        for (int i = 0; i < result.length; i++) {
            assertTrue(result[i].contains("1"));
        }
    }

    @Test
    public void testValidStrings_Invalid() {
        Solution solution = new Solution();
        String[] result = solution.validBinaryString(4);
        assertEquals(10, result.length);
        for (int i = 0; i < result.length; i++) {
            assertTrue(result[i].contains("1"));
        }
    }
}