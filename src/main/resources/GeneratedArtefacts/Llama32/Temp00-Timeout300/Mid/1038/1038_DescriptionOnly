package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1038_DescriptionOnlyTest {

    @Test
    public void testConvertBSTtoGreaterTree() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(3);

        convertBST(root);

        assertEquals(new TreeNode(7), root.val);
        assertEquals(new TreeNode(6), root.left.val);
        assertEquals(new TreeNode(4), root.right.val);
    }

    @Test
    public void testConvertBSTtoGreaterTree_EmptyTree() {
        TreeNode root = null;

        convertBST(root);

        assertNull(root);
    }

    @Test
    public void testConvertBSTtoGreaterTree_SingleNodeTree() {
        TreeNode root = new TreeNode(4);

        convertBST(root);

        assertEquals(new TreeNode(4), root.val);
    }

    @Test
    public void testConvertBSTtoGreaterTree_BSTWithOneChild() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);

        convertBST(root);

        assertEquals(new TreeNode(6), root.val);
        assertEquals(new TreeNode(2), root.left.val);
    }

    @Test
    public void testConvertBSTtoGreaterTree_BSTWithTwoChildren() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);

        convertBST(root);

        assertEquals(new TreeNode(7), root.val);
        assertEquals(new TreeNode(6), root.left.val);
        assertEquals(new TreeNode(4), root.right.val);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

}