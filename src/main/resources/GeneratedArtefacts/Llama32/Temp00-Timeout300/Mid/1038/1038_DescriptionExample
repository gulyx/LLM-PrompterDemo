package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    public TreeNode buildTree(int[] arr) {
        if (arr.length == 0)
            return null;
        TreeNode root = new TreeNode(arr[0]);
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        for (int i = 1; i < arr.length; i++) {
            TreeNode node = queue.poll();
            if (arr[i] != 0) {
                TreeNode left = new TreeNode(arr[i]);
                node.left = left;
                queue.add(left);
            }
            if (arr[i] != 0) {
                TreeNode right = new TreeNode(arr[i]);
                node.right = right;
                queue.add(right);
            }
        }
        return root;
    }

    public int[] inorder(TreeNode root, int[] arr) {
        if (root == null)
            return arr;
        inorder(root.left, arr);
        arr[0] += root.val;
        inorder(root.right, arr);
        return arr;
    }

    @Test
    public void testConvertToGreaterTree() {
        TreeNode root = buildTree(new int[] {4,1,6,0,2,5,7,null,null,null,3,null,null,null,8});
        int[] expected = new int[] {30,36,21,36,35,26,15,null,null,null,33,null,null,null,8};
        inorder(root, expected);
        assertArrayEquals(expected, inorder(root, new int[0]));
    }

    @Test
    public void testConvertToGreaterTree_EmptyTree() {
        TreeNode root = buildTree(new int[] {});
        int[] expected = new int[] {};
        inorder(root, expected);
        assertArrayEquals(expected, inorder(root, new int[0]));
    }

    @Test
    public void testConvertToGreaterTree_SingleNodeTree() {
        TreeNode root = buildTree(new int[] {1});
        int[] expected = new int[] {2};
        inorder(root, expected);
        assertArrayEquals(expected, inorder(root, new int[0]));
    }

    @Test
    public void testConvertToGreaterTree_BalanceTree() {
        TreeNode root = buildTree(new int[] {4,2,6,1,3,5,7});
        int[] expected = new int[] {24,14,20,10,15,12,9};
        inorder(root, expected);
        assertArrayEquals(expected, inorder(root, new int[0]));
    }

    @Test
    public void testConvertToGreaterTree_UnbalanceTree() {
        TreeNode root = buildTree(new int[] {4,1,6,0,2,5,7,null,null,null,3,null,null,null,8});
        int[] expected = new int[] {30,36,21,36,35,26,15,null,null,null,33,null,null,null,8};
        inorder(root, expected);
        assertArrayEquals(expected, inorder(root, new int[0]));
    }
}