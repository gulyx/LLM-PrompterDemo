package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testConvertToGreaterTree() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(1);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(2);
        root.right.left = new TreeNode(5);
        root.right.right = new TreeNode(7);

        TreeNode expectedRoot = new TreeNode(30);
        expectedRoot.left = new TreeNode(36);
        expectedRoot.right = new TreeNode(21);
        expectedRoot.left.left = new TreeNode(36);
        expectedRoot.left.right = new TreeNode(35);
        expectedRoot.left.left.left = new TreeNode(26);
        expectedRoot.left.left.right = new TreeNode(15);
        expectedRoot.right = new TreeNode(8);

        convertToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertToGreaterTree_Balance() {
        TreeNode root = new TreeNode(0);
        root.right = new TreeNode(1);

        TreeNode expectedRoot = new TreeNode(1);
        expectedRoot.right = new TreeNode(1);

        convertToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertToGreaterTree_Empty() {
        TreeNode root = null;

        TreeNode expectedRoot = null;

        convertToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertToGreaterTree_SingleNode() {
        TreeNode root = new TreeNode(4);

        TreeNode expectedRoot = new TreeNode(4);

        convertToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertToGreaterTree_MultipleNodes() {
        TreeNode root = new TreeNode(8);
        root.left = new TreeNode(5);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(2);
        root.left.right = new TreeNode(0);
        root.right.left = new TreeNode(1);
        root.right.right = new TreeNode(6);

        TreeNode expectedRoot = new TreeNode(8);
        expectedRoot.left = new TreeNode(11);
        expectedRoot.right = new TreeNode(15);
        expectedRoot.left.left = new TreeNode(7);
        expectedRoot.left.right = new TreeNode(0);
        expectedRoot.right.left = new TreeNode(5);
        expectedRoot.right.right = new TreeNode(6);

        convertToGreaterTree(root, expectedRoot);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

}