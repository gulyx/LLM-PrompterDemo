package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1630_DescriptionExampleTest {

    @Test
    public void testArithmeticSequence() {
        int[] nums = {4,6,5,9,3,7};
        int[][] l = {{0},{0},{2}};
        int[][] r = {{2},{3},{5}};

        boolean[] answer = canMakePairs(nums, l, r);
        for (boolean b : answer) {
            assertTrue(b);
        }
    }

    @Test
    public void testArithmeticSequenceFalse() {
        int[] nums = {-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10};
        int[][] l = {{0},{1},{6},{4},{8},{7}};
        int[][] r = {{4},{4},{9},{7},{9},{10}};

        boolean[] answer = canMakePairs(nums, l, r);
        assertFalse(answer[0]);
        assertTrue(answer[1]);
        assertFalse(answer[2]);
        assertFalse(answer[3]);
        assertTrue(answer[4]);
        assertTrue(answer[5]);
    }

    @Test
    public void testArithmeticSequenceEmpty() {
        int[] nums = {1, 2, 3};
        int[][] l = {};
        int[][] r = {};

        boolean[] answer = canMakePairs(nums, l, r);
        for (boolean b : answer) {
            assertTrue(b);
        }
    }

    @Test
    public void testArithmeticSequenceSingleElement() {
        int[] nums = {1};
        int[][] l = {};
        int[][] r = {};

        boolean[] answer = canMakePairs(nums, l, r);
        for (boolean b : answer) {
            assertTrue(b);
        }
    }

    @Test
    public void testArithmeticSequenceNull() {
        int[] nums = null;
        int[][] l = {};
        int[][] r = {};

        try {
            canMakePairs(nums, l, r);
            fail("NullPointerException expected");
        } catch (NullPointerException e) {
            // expected
        }
    }

    @Test
    public void testArithmeticSequenceEmptyRange() {
        int[] nums = {1, 2, 3};
        int[][] l = {{0},{5}};
        int[][] r = {{4},{6}};

        boolean[] answer = canMakePairs(nums, l, r);
        for (boolean b : answer) {
            assertTrue(b);
        }
    }

    private boolean[] canMakePairs(int[] nums, int[][] l, int[][] r) {
        if (nums == null || l == null || r == null) {
            throw new NullPointerException("Input arrays cannot be null");
        }

        boolean[] answer = new boolean[r.length];
        for (int i = 0; i < r.length; i++) {
            int start = l[i][0];
            int end = r[i][1];

            if (start > end) {
                continue;
            }

            int diff = nums[start + 1] - nums[start];
            boolean canMakeArithmeticSequence = true;

            for (int j = start + 1; j <= end; j++) {
                if (nums[j] - nums[j - 1] != diff) {
                    canMakeArithmeticSequence = false;
                    break;
                }
            }

            answer[i] = canMakeArithmeticSequence;
        }

        return answer;
    }
}