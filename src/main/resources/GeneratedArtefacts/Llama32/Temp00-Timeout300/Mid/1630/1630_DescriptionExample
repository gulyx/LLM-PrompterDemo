```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Main {

    @Test
    public void testArithmeticSequence() {
        int[] nums = {4,6,5,9,3,7};
        int[][] l = {{0},{0},{2}};
        int[][] r = {{2},{3},{5}};

        boolean[] answer = new boolean[l.length];
        for (int i = 0; i < l.length; i++) {
            answer[i] = isArithmeticSequence(nums, l[i], r[i]);
        }

        for (boolean b : answer) {
            assertTrue(b);
        }
    }

    @Test
    public void testNoArithmeticSequence() {
        int[] nums = {-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10};
        int[][] l = {{0},{1},{6},{4},{8},{7}};
        int[][] r = {{4},{4},{9},{7},{9},{10}};

        boolean[] answer = new boolean[l.length];
        for (int i = 0; i < l.length; i++) {
            answer[i] = isArithmeticSequence(nums, l[i], r[i]);
        }

        assertFalse(answer[0]);
        assertTrue(answer[1]);
        assertFalse(answer[2]);
        assertFalse(answer[3]);
        assertTrue(answer[4]);
        assertTrue(answer[5]);
    }

    @Test
    public void testEmptyRange() {
        int[] nums = {1, 2, 3};
        int[][] l = {{0},{1}};
        int[][] r = {{0},{1}};

        boolean[] answer = new boolean[l.length];
        for (int i = 0; i < l.length; i++) {
            answer[i] = isArithmeticSequence(nums, l[i], r[i]);
        }

        assertTrue(answer[0]);
        assertFalse(answer[1]);
    }

    @Test
    public void testSingleElementRange() {
        int[] nums = {1, 2, 3};
        int[][] l = {{0},{0}};
        int[][] r = {{0},{0}};

        boolean[] answer = new boolean[l.length];
        for (int i = 0; i < l.length; i++) {
            answer[i] = isArithmeticSequence(nums, l[i], r[i]);
        }

        assertTrue(answer[0]);
        assertTrue(answer[1]);
    }

    @Test
    public void testNoRange() {
        int[] nums = {1, 2, 3};
        int[][] l = {};
        int[][] r = {};

        boolean[] answer = new boolean[l.length];
        for (int i = 0; i < l.length; i++) {
            answer[i] = isArithmeticSequence(nums, l[i], r[i]);
        }

        assertTrue(answer[0]);
    }

    private boolean isArithmeticSequence(int[] nums, int[] left, int[] right) {
        if (left.length == 1 && right.length == 1) {
            return true;
        }
        if (right.length == 1) {
            return false;
        }

        int diff = nums[right[0]] - nums[left[0]];
        for (int i = left[0] + 1; i <= right[0]; i++) {
            if (nums[i] - nums[i-1] != diff) {
                return false;
            }
        }
        for (int i = right[0] + 1; i < right.length; i++) {
            if (nums[right[i]] - nums[right[i-1]] != diff) {
                return false;
            }
        }

        return true;
    }
}
```