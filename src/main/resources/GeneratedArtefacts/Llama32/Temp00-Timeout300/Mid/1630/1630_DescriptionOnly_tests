package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.Arrays;
import java.util.Comparator;

public class DescriptionOnlyTest {

    public static void main(String[] args) {
        System.out.println(canMakeArithmeticArray(new int[]{1, 2, 3, 4}, new int[]{0, 1, 2, 3}));
        System.out.println(canMakeArithmeticArray(new int[]{3, 1, 4, 1, 5, 9, 2}, new int[]{0, 1, 2, 3, 4, 5, 6}));
        System.out.println(canMakeArithmeticArray(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8}));
        System.out.println(canMakeArithmeticArray(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1}, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8}));
        System.out.println(canMakeArithmeticArray(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8}));
    }

    public static boolean canMakeArithmeticArray(int[] nums, int[][] queries) {
        Arrays.sort(nums);
        for (int i = 0; i < queries.length; i++) {
            int left = queries[i][0];
            int right = queries[i][1];

            if ((right - left + 1) % 2 != 0) return false;

            boolean canBeArithmetic = true;
            for (int j = left; j <= right; j++) {
                if (nums[j] != nums[left] + (j - left)) {
                    canBeArithmetic = false;
                    break;
                }
            }

            System.out.println("Can be arithmetic: " + canBeArithmetic);
        }

        return true;
    }
}