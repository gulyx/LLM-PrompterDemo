package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1008_DescriptionExample {

    @Test
    public void test_1() {
        int[] preorder = {8,5,1,7,10,12};
        TreeNode root = new Solution().bstFromPreorder(preorder);
        TreeNode expectedRoot = new TreeNode(8);
        expectedRoot.left = new TreeNode(5);
        expectedRoot.right = new TreeNode(10);
        expectedRoot.left.left = new TreeNode(1);
        expectedRoot.left.right = new TreeNode(7);
        expectedRoot.right.right = new TreeNode(12);

        assertSame(root, expectedRoot);
    }

    @Test
    public void test_2() {
        int[] preorder = {1,3};
        TreeNode root = new Solution().bstFromPreorder(preorder);
        TreeNode expectedRoot = new TreeNode(1);
        expectedRoot.right = new TreeNode(3);

        assertSame(root, expectedRoot);
    }

    @Test
    public void test_3() {
        int[] preorder = {2,1,3};
        TreeNode root = new Solution().bstFromPreorder(preorder);
        TreeNode expectedRoot = new TreeNode(2);
        expectedRoot.left = new TreeNode(1);
        expectedRoot.right = new TreeNode(3);

        assertSame(root, expectedRoot);
    }

    @Test
    public void test_4() {
        int[] preorder = {5,4,3,2,1};
        TreeNode root = new Solution().bstFromPreorder(preorder);
        TreeNode expectedRoot = new TreeNode(5);
        expectedRoot.left = new TreeNode(4);
        expectedRoot.right = new TreeNode(3);
        expectedRoot.left.left = new TreeNode(2);
        expectedRoot.left.right = new TreeNode(1);

        assertSame(root, expectedRoot);
    }

    @Test
    public void test_5() {
        int[] preorder = {7,6,4,3,5,8};
        TreeNode root = new Solution().bstFromPreorder(preorder);
        TreeNode expectedRoot = new TreeNode(7);
        expectedRoot.left = new TreeNode(6);
        expectedRoot.right = new TreeNode(8);
        expectedRoot.left.left = new TreeNode(4);
        expectedRoot.left.right = new TreeNode(3);
        expectedRoot.left.left.left = new TreeNode(5);

        assertSame(root, expectedRoot);
    }
}

class Solution {

    public TreeNode bstFromPreorder(int[] preorder) {
        return buildTree(preorder, 0, preorder.length - 1);
    }

    private TreeNode buildTree(int[] preorder, int start, int end) {
        if (start > end)
            return null;

        TreeNode root = new TreeNode(preorder[start]);
        int leftEnd = start + 1;
        for (int i = start + 1; i <= end; i++) {
            if (preorder[i] < preorder[start]) {
                root.left = buildTree(preorder, leftEnd, i - 1);
                leftEnd = i;
            }
        }

        int rightStart = leftEnd;
        for (int i = leftEnd; i <= end; i++) {
            if (preorder[i] > preorder[start]) {
                root.right = buildTree(preorder, rightStart, i);
                rightStart = i + 1;
            }
        }

        return root;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}