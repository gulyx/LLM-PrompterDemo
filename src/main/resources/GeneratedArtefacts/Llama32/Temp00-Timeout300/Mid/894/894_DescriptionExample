```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Main {

    @Test
    public void testGenerateTrees() {
        Solution solution = new Solution();
        int[][] result1 = solution.generateTrees(7);
        int[][] expected1 = {{0, 0, 0, null, null, 0, 0, null, null, 0, 0},
                {0, 0, 0, null, null, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, null, null, null, null, 0, 0},
                {0, 0, 0, 0, 0, null, null, 0, 0}};
        assertArrayEquals(expected1, result1);
    }

    @Test
    public void testGenerateTrees2() {
        Solution solution = new Solution();
        int[][] result2 = solution.generateTrees(3);
        int[][] expected2 = {{0, 0, 0}};
        assertArrayEquals(expected2, result2);
    }
}

class Solution {

    public int[][] generateTrees(int n) {
        if (n == 0) return new int[0][];
        return buildTree(1, n);
    }

    private int[][] buildTree(int left, int right) {
        if (left > right) return new int[0][];
        int[][] result = new int[n][];
        for (int i = left; i <= right; i++) {
            int[] leftChild = buildTree(left, i - 1);
            int[] rightChild = buildTree(i + 1, right);
            if (leftChild.length == 0) result[0] = new int[]{i};
            else if (rightChild.length == 0) result[0] = new int[]{i, leftChild[0]};
            else {
                for (int j = 0; j < leftChild.length; j++) {
                    for (int k = 0; k < rightChild.length; k++) {
                        result[j * rightChild.length + k] = new int[]{leftChild[j], i, rightChild[k]};
                    }
                }
            }
        }
        return result;
    }

}
```