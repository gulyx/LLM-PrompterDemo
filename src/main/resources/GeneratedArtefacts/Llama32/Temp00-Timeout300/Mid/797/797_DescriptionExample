```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.*;

public class DescriptionExample {

    @Test
    public void testAllPaths() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(Arrays.asList(1, 2));
        graph.add(Arrays.asList(3));
        graph.add(Arrays.asList(3));
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph, 0);
        assertEquals(Arrays.asList(Arrays.asList(0, 1, 3), Arrays.asList(0, 2, 3)), result);
    }

    @Test
    public void testAllPaths2() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(Arrays.asList(4, 3, 1));
        graph.add(Arrays.asList(3, 2, 4));
        graph.add(Arrays.asList(3));
        graph.add(Arrays.asList(4));
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph, 0);
        assertEquals(Arrays.asList(Arrays.asList(0, 4), Arrays.asList(0, 3, 4), Arrays.asList(0, 1, 3, 4), Arrays.asList(0, 1, 2, 3, 4), Arrays.asList(0, 1, 4)), result);
    }

    @Test
    public void testAllPaths3() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(new ArrayList<>());
        graph.add(Arrays.asList(1));
        graph.add(Arrays.asList(2));
        graph.add(Arrays.asList(3));

        List<List<Integer>> result = allPaths(graph, 0);
        assertEquals(Collections.singletonList(Arrays.asList(0, 1, 2, 3)), result);
    }

    @Test
    public void testAllPaths4() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(new ArrayList<>());
        graph.add(Arrays.asList(1));
        graph.add(Arrays.asList(2));
        graph.add(Arrays.asList(3));

        List<List<Integer>> result = allPaths(graph, 0);
        assertEquals(Collections.singletonList(Arrays.asList(0, 1)), result);
    }

    @Test
    public void testAllPaths5() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(new ArrayList<>());
        graph.add(Arrays.asList(1));
        graph.add(Arrays.asList(2));
        graph.add(Arrays.asList(3));

        List<List<Integer>> result = allPaths(graph, 0);
        assertEquals(Collections.singletonList(Arrays.asList(0)), result);
    }

    public List<List<Integer>> allPaths(List<List<Integer>> graph, int start) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<>(), graph, start);
        return result;
    }

    private void dfs(List<List<Integer>> result, List<Integer> path, List<List<Integer>> graph, int node) {
        path.add(node);
        if (node == graph.get(graph.size() - 1).size() - 1) {
            result.add(new ArrayList<>(path));
        } else {
            for (int next : graph.get(node)) {
                dfs(result, new ArrayList<>(path), graph, next);
            }
        }
        path.remove(path.size() - 1);
    }

}
```