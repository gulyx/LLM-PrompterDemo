```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 654_DescriptionExample {

    public TreeNode buildMaxTree(int[] nums) {
        if (nums.length == 0) return null;
        int maxIndex = findMax(nums);
        TreeNode root = new TreeNode(nums[maxIndex]);
        root.left = buildMaxTree(java.util.Arrays.copyOfRange(nums, 0, maxIndex));
        root.right = buildMaxTree(java.util.Arrays.copyOfRange(nums, maxIndex + 1, nums.length));
        return root;
    }

    private int findMax(int[] nums) {
        int max = Integer.MIN_VALUE;
        for (int num : nums) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    public void testBuildMaxTree() {
        int[] nums1 = {3,2,1,6,0,5};
        TreeNode root1 = buildMaxTree(nums1);
        assert(root1.val == 6 && root1.left.val == 5 && root1.right.val == 3
                && root1.left.left.val == 2 && root1.left.right.val == 1
                && root1.right.left.val == 0);

        int[] nums2 = {3,2,1};
        TreeNode root2 = buildMaxTree(nums2);
        assert(root2.val == 3 && root2.left.val == 2 && root2.right.val == 1);

        int[] nums3 = {};
        TreeNode root3 = buildMaxTree(nums3);
        assertNull(root3);

        int[] nums4 = {5};
        TreeNode root4 = buildMaxTree(nums4);
        assert(root4.val == 5 && root4.left == null && root4.right == null);

        int[] nums5 = {1,2,3,4,5};
        TreeNode root5 = buildMaxTree(nums5);
        assert(root5.val == 5
                && root5.left.val == 4
                && root5.right.val == 3
                && root5.left.left.val == 2
                && root5.left.right.val == 1
                && root5.right.left.val == 0);

    }

}
```