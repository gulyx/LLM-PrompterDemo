package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2275_DescriptionOnlyTest {

    @Test
    public void testBitwiseAnd() {
        int[] nums = {1, 5, 3};
        assertEquals(1, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndSingleElement() {
        int[] nums = {7};
        assertEquals(7, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndMultipleElements() {
        int[] nums = {2, 4, 8};
        assertEquals(0, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndLargeNumbers() {
        int[] nums = {16, 32, 64};
        assertEquals(0, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndEmptyArray() {
        int[] nums = {};
        assertEquals(0, bitwiseAnd(nums));
    }
}

public class Solution {

    public int findMaxForm(int[] candidates) {
        int n = candidates.length;
        int[][] dp = new int[n + 1][candidates[0] + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= candidates[i - 1]; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j <= candidates[i - 1]) {
                    dp[i][j] += dp[i - 1][j - candidates[i - 1]];
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= candidates[0]; j++) {
                if (dp[i][j] > max && dp[i][j] != 0) {
                    max = dp[i][j];
                }
            }
        }
        return max;
    }

    public int bitwiseAnd(int[] nums) {
        int result = nums[0];
        for (int num : nums) {
            result &= num;
        }
        return result;
    }
}