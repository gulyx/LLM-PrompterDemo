```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    public TreeNode constructTree(int[] arr) {
        if (arr.length == 0)
            return null;
        TreeNode root = new TreeNode(arr[0]);
        int i = 1;
        while (i < arr.length && arr[i] != -1) {
            root.left = constructTree(new int[]{arr[i], -1});
            i++;
        }
        if (i < arr.length)
            root.right = constructTree(new int[]{arr[i], -1});
        return root;
    }

    public void inorder(TreeNode root, int[] res) {
        if (root == null)
            return;
        inorder(root.left, res);
        res = add(res, root.val);
        inorder(root.right, res);
    }

    public int[] getAllElements(TreeNode root1, TreeNode root2) {
        int[] res1 = new int[0];
        int[] res2 = new int[0];

        inorder(root1, res1);
        inorder(root2, res2);

        return merge(res1, res2);
    }

    private int[] add(int[] a, int b) {
        int[] result = new int[a.length + 1];
        System.arraycopy(a, 0, result, 0, a.length);
        result[a.length] = b;
        return result;
    }

    private int[] merge(int[] a, int[] b) {
        int[] res = new int[a.length + b.length];
        System.arraycopy(a, 0, res, 0, a.length);
        System.arraycopy(b, 0, res, a.length, b.length);
        return res;
    }

    @Test
    public void testExample1() {
        TreeNode root1 = constructTree(new int[]{2,1,4});
        TreeNode root2 = constructTree(new int[]{1,0,3});
        int[] result = getAllElements(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 2, 3, 4}, result);
    }

    @Test
    public void testExample2() {
        TreeNode root1 = constructTree(new int[]{1,null,8});
        TreeNode root2 = constructTree(new int[]{8,1});
        int[] result = getAllElements(root1, root2);
        assertArrayEquals(new int[]{1, 1, 8, 8}, result);
    }
}
```