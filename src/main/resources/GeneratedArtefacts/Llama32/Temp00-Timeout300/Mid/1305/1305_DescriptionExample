```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testInOrderTraversal() {
        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(4);

        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(0);
        root2.right = new TreeNode(3);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 2, 3, 4}, result);
    }

    @Test
    public void testInOrderTraversalWithEmptyTree() {
        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(4);

        int[] result = inOrderTraversal(root1, null);
        assertArrayEquals(new int[]{0, 1, 2, 3, 4}, result);
    }

    @Test
    public void testInOrderTraversalWithDifferentRoot() {
        TreeNode root1 = new TreeNode(8);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(4);

        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(0);
        root2.right = new TreeNode(3);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 3, 4}, result);
    }

    @Test
    public void testInOrderTraversalWithDuplicateValues() {
        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(1);

        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(0);
        root2.right = new TreeNode(3);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 2, 3}, result);
    }

    @Test
    public void testInOrderTraversalWithNullTree() {
        TreeNode root1 = new TreeNode(2);
        root1.left = null;
        root1.right = new TreeNode(4);

        TreeNode root2 = null;

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 2, 3, 4}, result);
    }

    private int[] inOrderTraversal(TreeNode root1, TreeNode root2) {
        int[] result = new int[0];
        if (root1 != null && root2 != null) {
            result = merge(inOrderTraversal(root1.left, root2.left), inOrderTraversal(root1.right, root2.right));
            result = merge(result, new int[]{root1.val});
            result = merge(result, new int[]{root2.val});
        } else if (root1 != null) {
            return inOrderTraversal(root1.left, root2);
        } else if (root2 != null) {
            return inOrderTraversal(root1, root2.right);
        }
        return result;
    }

    private int[] merge(int[] a, int[] b) {
        int[] result = new int[a.length + b.length];
        System.arraycopy(a, 0, result, 0, a.length);
        System.arraycopy(b, 0, result, a.length, b.length);
        return result;
    }

    private static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }
}
```