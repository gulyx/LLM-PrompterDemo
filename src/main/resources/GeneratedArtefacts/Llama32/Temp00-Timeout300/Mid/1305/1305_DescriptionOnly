```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class DescriptionOnly {

    @Test
    public void test1() {
        TreeNode root1 = new TreeNode(7);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(15);
        root1.left.left = new TreeNode(2);
        root1.left.right = new TreeNode(5);
        root1.right.left = new TreeNode(10);
        root1.right.right = new TreeNode(20);

        TreeNode root2 = new TreeNode(12);
        root2.left = new TreeNode(1);
        root2.right = new TreeNode(16);
        root2.left.left = new TreeNode(0);
        root2.left.right = new TreeNode(4);
        root2.right.left = new TreeNode(9);
        root2.right.right = new TreeNode(18);

        List<Integer> result = getAllElements(root1, root2);
        assertEquals(Arrays.toString(result), "[0, 1, 2, 3, 4, 7, 9, 10, 12, 15, 16, 18, 20, 15]", result);
    }

    @Test
    public void test2() {
        TreeNode root1 = new TreeNode(5);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(8);

        TreeNode root2 = new TreeNode(9);
        root2.left = new TreeNode(4);
        root2.right = new TreeNode(10);

        List<Integer> result = getAllElements(root1, root2);
        assertEquals(Arrays.toString(result), "[3, 4, 5, 8, 9, 10]", result);
    }

    @Test
    public void test3() {
        TreeNode root1 = new TreeNode(0);
        root1.left = new TreeNode(-10);

        TreeNode root2 = new TreeNode(20);

        List<Integer> result = getAllElements(root1, root2);
        assertEquals(Arrays.toString(result), "[-10, 0, 20]", result);
    }

    @Test
    public void test4() {
        TreeNode root1 = new TreeNode(5);
        root1.left = new TreeNode(3);

        TreeNode root2 = new TreeNode(9);

        List<Integer> result = getAllElements(root1, root2);
        assertEquals(Arrays.toString(result), "[3, 5, 9]", result);
    }

    @Test
    public void test5() {
        TreeNode root1 = new TreeNode(10);
        root1.left = new TreeNode(5);
        root1.right = new TreeNode(15);

        TreeNode root2 = new TreeNode(8);

        List<Integer> result = getAllElements(root1, root2);
        assertEquals(Arrays.toString(result), "[5, 8, 10, 15]", result);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) {
        val = x;
    }
}

public class Solution {

    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();

        inorder(root1, list1);
        inorder(root2, list2);

        Collections.sort(list1);
        Collections.sort(list2);

        list1.addAll(list2);
        return list1;
    }

    private void inorder(TreeNode root, List<Integer> list) {
        if (root == null)
            return;

        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
}
```