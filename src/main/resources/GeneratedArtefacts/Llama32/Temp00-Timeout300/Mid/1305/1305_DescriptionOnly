package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.ArrayList;
import java.util.List;

public class DescriptionOnlyTest {

    public static void main(String[] args) {
        org.junit.Test
        public void test1() {
            TreeNode root1 = new TreeNode(7);
            root1.left = new TreeNode(3);
            root1.right = new TreeNode(15);
            TreeNode root2 = new TreeNode(9);
            root2.left = new TreeNode(1);
            root2.right = new TreeNode(20);

            List<Integer> result = getAllElements(root1, root2);
            org.junit.Assert.assertEquals(result, new ArrayList<>(List.of(1, 3, 7, 9, 15, 20)));
        }

        @Test
        public void test2() {
            TreeNode root1 = new TreeNode(5);
            root1.left = new TreeNode(4);
            root1.right = new TreeNode(8);

            List<Integer> result = getAllElements(root1, null);
            org.junit.Assert.assertEquals(result, new ArrayList<>(List.of(4, 5, 8)));
        }

        @Test
        public void test3() {
            TreeNode root1 = new TreeNode(2);
            root1.left = new TreeNode(1);

            List<Integer> result = getAllElements(root1, null);
            org.junit.Assert.assertEquals(result, new ArrayList<>(List.of(1, 2)));
        }

        @Test
        public void test4() {
            TreeNode root1 = new TreeNode(10);
            root1.right = new TreeNode(20);

            List<Integer> result = getAllElements(null, root1);
            org.junit.Assert.assertEquals(result, new ArrayList<>(List.of(10, 20)));
        }

        @Test
        public void test5() {
            TreeNode root1 = new TreeNode(8);
            root1.left = new TreeNode(6);
            root1.right = new TreeNode(14);

            TreeNode root2 = new TreeNode(4);
            root2.left = new TreeNode(3);
            root2.right = new TreeNode(10);

            List<Integer> result = getAllElements(root1, root2);
            org.junit.Assert.assertEquals(result, new ArrayList<>(List.of(3, 4, 6, 8, 10, 14)));
        }
    }

    public static List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> result = new ArrayList<>();
        if (root1 != null) {
            result.addAll(getAllElements(root1.left, root2));
            result.add(root1.val);
            result.addAll(getAllElements(root1.right, root2));
        }
        if (root2 != null) {
            result.addAll(getAllElements(root1, root2.left));
            result.add(root2.val);
            result.addAll(getAllElements(root1, root2.right));
        }
        return result;
    }

}