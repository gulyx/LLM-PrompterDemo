```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class DescriptionExampleTest {

    @Test
    public void test1() {
        int[] nums = {9, 12, 5, 10, 14, 3, 10};
        int pivot = 10;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{9, 5, 3, 10, 10, 12, 14}, result);
    }

    @Test
    public void test2() {
        int[] nums = {-3, 4, 3, 2};
        int pivot = 2;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{-3, 2, 4, 3}, result);
    }

    @Test
    public void test3() {
        int[] nums = {1, 2, 3};
        int pivot = 2;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{1, 3, 2}, result);
    }

    @Test
    public void test4() {
        int[] nums = {5, 6, 7, 8};
        int pivot = 5;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{5, 6, 7, 8}, result);
    }

    @Test
    public void test5() {
        int[] nums = {1, 2, 3, 4};
        int pivot = 3;
        int[] result = rearrangeArray(nums, pivot);
        assertArrayEquals(new int[]{1, 2, 4, 3}, result);
    }

    public static int[] rearrangeArray(int[] nums, int pivot) {
        // implementation of the rearrangeArray function
        // for simplicity, this example just sorts the array and then checks if each element is less than, equal to, or greater than the pivot
        Arrays.sort(nums);
        List<Integer> less = new ArrayList<>();
        List<Integer> equal = new ArrayList<>();
        List<Integer> greater = new ArrayList<>();

        for (int num : nums) {
            if (num < pivot) {
                less.add(num);
            } else if (num == pivot) {
                equal.add(num);
            } else {
                greater.add(num);
            }
        }

        int[] result = new int[less.size() + equal.size() + greater.size()];
        int index = 0;
        for (int num : less) {
            result[index++] = num;
        }
        for (int num : equal) {
            result[index++] = num;
        }
        for (int num : greater) {
            result[index++] = num;
        }

        return result;
    }
}
```