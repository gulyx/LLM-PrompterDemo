```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Arrays;
import java.util.List;

public class DescriptionExample {

    @Test
    public void testPermutations() {
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    @Test
    public void testPermutationsWithZero() {
        int[] nums = {0, 1};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    @Test
    public void testPermutationsWithSingleElement() {
        int[] nums = {1};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    private List<List<Integer>> getPermutations(int[] nums) {
        if (nums.length == 1) {
            return Arrays.asList(Arrays.asList(nums[0]));
        } else {
            List<List<Integer>> permutations = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                int[] remainingNums = getRemainingNums(nums, i);
                List<List<Integer>> subPermutations = getPermutations(remainingNums);
                for (List<Integer> permutation : subPermutations) {
                    permutations.add(Arrays.asList(nums[i], permutation));
                }
            }
            return permutations;
        }
    }

    private int[] getRemainingNums(int[] nums, int index) {
        int[] remainingNums = new int[nums.length - 1];
        System.arraycopy(nums, 0, remainingNums, 0, index);
        System.arraycopy(nums, index + 1, remainingNums, index, nums.length - index - 1);
        return remainingNums;
    }
}
```