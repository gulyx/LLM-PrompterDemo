```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Arrays;
import java.util.List;

public class DescriptionExampleTest {

    @Test
    public void testPermutations() {
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    @Test
    public void testPermutations_0_1() {
        int[] nums = {0, 1};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    @Test
    public void testPermutations_1() {
        int[] nums = {1};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    @Test
    public void testPermutations_EmptyArray() {
        int[] nums = {};
        List<List<Integer>> result = getPermutations(nums);
        if (result.isEmpty()) {
            System.out.println("Expected empty list");
        } else {
            fail("Expected empty list but got " + result.size());
        }
    }

    @Test
    public void testPermutations_DuplicateElements() {
        int[] nums = {1, 2, 2};
        List<List<Integer>> result = getPermutations(nums);
        for (List<Integer> permutation : result) {
            System.out.println(permutation);
        }
    }

    private List<List<Integer>> getPermutations(int[] nums) {
        if (nums.length == 0) {
            return Arrays.asList();
        } else if (nums.length == 1) {
            return Arrays.asList(Arrays.asList(nums[0]));
        } else {
            List<List<Integer>> result = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                int[] remaining = Arrays.copyOfRange(nums, 0, i);
                int[] swapped = swap(remaining, nums[i]);
                result.addAll(getPermutations(swapped));
            }
            return result;
        }
    }

    private int[] swap(int[] a, int b) {
        int[] result = new int[a.length];
        System.arraycopy(a, 0, result, 1, a.length - 1);
        result[0] = b;
        return result;
    }
}
```