package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1829_DescriptionOnlyTest {

    @Test
    public void test1() {
        int[] nums = {0, 1, 2};
        int maximumBit = 1;
        int[][] answer = new int[3][];
        answer[0] = getAnswer(nums, maximumBit);
        assertEquals(new int[]{0}, answer[0]);
    }

    @Test
    public void test2() {
        int[] nums = {0, 1, 2};
        int maximumBit = 2;
        int[][] answer = new int[3][];
        answer[0] = getAnswer(nums, maximumBit);
        assertEquals(new int[]{1}, answer[0]);
    }

    @Test
    public void test3() {
        int[] nums = {0, 1, 2};
        int maximumBit = 3;
        int[][] answer = new int[3][];
        answer[0] = getAnswer(nums, maximumBit);
        assertEquals(new int[]{2}, answer[0]);
    }

    @Test
    public void test4() {
        int[] nums = {0, 1, 2};
        int maximumBit = 4;
        int[][] answer = new int[3][];
        answer[0] = getAnswer(nums, maximumBit);
        assertEquals(new int[]{3}, answer[0]);
    }

    @Test
    public void test5() {
        int[] nums = {0, 1, 2};
        int maximumBit = 5;
        int[][] answer = new int[3][];
        answer[0] = getAnswer(nums, maximumBit);
        assertEquals(new int[]{4}, answer[0]);
    }

    private int[] getAnswer(int[] nums, int maximumBit) {
        int n = nums.length;
        int max = 1 << maximumBit - 1;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int k = 0;
            for (int j = 0; j <= i; j++) {
                k ^= nums[j];
            }
            if (k > max) {
                k = max;
            }
            result[i] = k;
        }
        return result;
    }

}