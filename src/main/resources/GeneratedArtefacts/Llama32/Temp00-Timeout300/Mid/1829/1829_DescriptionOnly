package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1829_DescriptionOnly {

    @Test
    public void test1() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 2;
        int[][] answer = new int[nums.length][maximumBit];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(5, result);
    }

    @Test
    public void test2() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 3;
        int[][] answer = new int[nums.length][maximumBit];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(7, result);
    }

    @Test
    public void test3() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 4;
        int[][] answer = new int[nums.length][maximumBit];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(15, result);
    }

    @Test
    public void test4() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 5;
        int[][] answer = new int[nums.length][maximumBit];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(31, result);
    }

    @Test
    public void test5() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 6;
        int[][] answer = new int[nums.length][maximumBit];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(63, result);
    }

    public int findMaxXor(int[] nums, int maximumBit, int[][] answer) {
        int n = nums.length;
        int max = (1 << maximumBit) - 1;
        for (int i = 0; i < n; i++) {
            int xor = 0;
            for (int j = 0; j < i; j++) {
                xor ^= nums[j];
            }
            answer[i][0] = max ^ xor;

            for (int j = 1; j < maximumBit; j++) {
                if ((xor & (1 << j - 1)) == 0) {
                    answer[i][j] = answer[i][j - 1];
                } else {
                    answer[i][j] = max ^ answer[i][j - 1];
                }
            }

        }
        return n;
    }
}