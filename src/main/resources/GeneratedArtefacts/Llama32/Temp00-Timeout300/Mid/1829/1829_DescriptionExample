package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1829_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] nums = {0, 1, 1, 3};
        int maximumBit = 2;
        int[] answer = new int[nums.length];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(0, answer[0]);
        assertEquals(3, answer[1]);
        assertEquals(2, answer[2]);
        assertEquals(3, answer[3]);
    }

    @Test
    public void test_2() {
        int[] nums = {2, 3, 4, 7};
        int maximumBit = 3;
        int[] answer = new int[nums.length];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(5, answer[0]);
        assertEquals(2, answer[1]);
        assertEquals(6, answer[2]);
        assertEquals(5, answer[3]);
    }

    @Test
    public void test_3() {
        int[] nums = {0, 1, 2, 2, 5, 7};
        int maximumBit = 3;
        int[] answer = new int[nums.length];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(4, answer[0]);
        assertEquals(3, answer[1]);
        assertEquals(6, answer[2]);
        assertEquals(4, answer[3]);
        assertEquals(6, answer[4]);
        assertEquals(7, answer[5]);
    }

    @Test
    public void test_4() {
        int[] nums = {0, 0, 0};
        int maximumBit = 1;
        int[] answer = new int[nums.length];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(0, answer[0]);
        assertEquals(0, answer[1]);
        assertEquals(0, answer[2]);
    }

    @Test
    public void test_5() {
        int[] nums = {1, 2, 3};
        int maximumBit = 2;
        int[] answer = new int[nums.length];
        int result = findMaxXor(nums, maximumBit, answer);
        assertEquals(0, answer[0]);
        assertEquals(1, answer[1]);
        assertEquals(2, answer[2]);
    }

    private int findMaxXor(int[] nums, int maximumBit, int[] answer) {
        int n = nums.length;
        int max = 0;
        for (int num : nums) {
            max ^= num;
        }
        int result = max;
        for (int i = 0; i < n - 1; i++) {
            if ((maximumBit - Integer.numberOfLeadingZeros(nums[i])) > 0) {
                int k = (1 << (maximumBit - Integer.numberOfLeadingZeros(nums[i])));
                int temp = result ^ k;
                for (int j = 0; j < i; j++) {
                    temp ^= nums[j];
                }
                answer[i] = temp;
            } else {
                answer[i] = result;
            }
            result ^= nums[i + 1];
        }
        return result;
    }

}