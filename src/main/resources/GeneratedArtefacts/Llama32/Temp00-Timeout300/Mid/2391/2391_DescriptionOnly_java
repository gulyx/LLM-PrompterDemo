package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2391;

public class Solution {
    public int garbageCollection(int[][] garbage, int[] travel) {
        int m = garbage[0].length();
        int n = garbage.length;
        long[][] dp = new long[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = Long.MAX_VALUE / 2;
            }
        }
        dp[0][0] = 0;
        dp[0][1] = travel[0];
        dp[0][2] = travel[0];

        for (int i = 1; i < n; i++) {
            long minTime = Long.MAX_VALUE / 2;

            for (int j = 0; j < 3; j++) {
                int index = garbage[i].charAt(j) - 'A';
                if (index >= 0 && index < m) {
                    minTime = Math.min(minTime, dp[i - 1][index] + travel[i]);
                }
            }

            for (int j = 0; j < 3; j++) {
                int index = garbage[i].charAt(j) - 'A';
                if (index >= 0 && index < m) {
                    dp[i][j] = minTime;
                } else {
                    dp[i][j] = Long.MAX_VALUE / 2;
                }
            }

        }

        long ans = Long.MAX_VALUE / 2;

        for (int i = 0; i < 3; i++) {
            ans = Math.min(ans, dp[n - 1][i]);
        }

        return (int)ans;
    }
}