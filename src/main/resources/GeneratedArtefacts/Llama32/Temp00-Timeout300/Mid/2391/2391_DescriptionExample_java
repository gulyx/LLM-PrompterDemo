package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2391;

public class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int n = garbage.length;
        long[][] dp = new long[n][3];
        for (int i = 0; i < n; i++) {
            char c = garbage[i].charAt(0);
            if (c == 'M') {
                dp[i][0] += 1;
                dp[i][1] += travel[i];
                dp[i][2] += travel[i + 1];
            } else if (c == 'P') {
                dp[i][1] += 1;
                dp[i][2] += travel[i + 1];
            } else {
                dp[i][2] += 1;
            }
        }

        long min = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int m = (int) Math.min(dp[i][0], dp[i][1]);
            int p = (int) Math.min(dp[i][1] - m, dp[i][2]);
            long cost = m + p * 2;
            min = Math.min(min, cost);
        }
        return (int) min;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String[] garbage1 = {"G","P","GP","GG"};
        int[] travel1 = {2,4,3};
        System.out.println(solution.garbageCollection(garbage1, travel1)); // 21

        String[] garbage2 = {"MMM","PGM","GP"};
        int[] travel2 = {3,10};
        System.out.println(solution.garbageCollection(garbage2, travel2)); // 37
    }
}