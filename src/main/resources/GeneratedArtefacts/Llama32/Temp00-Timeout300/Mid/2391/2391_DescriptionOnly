package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2391_DescriptionOnly {

    @Test
    public void test_0() {
        String[] garbage = {"MPG", "PG"};
        int[] travel = {2, 3};
        assertEquals(10, minCost(garbage, travel));
    }

    @Test
    public void test_1() {
        String[] garbage = {"GGG", "PPP", "MMM"};
        int[] travel = {1, 1, 1};
        assertEquals(6, minCost(garbage, travel));
    }

    @Test
    public void test_2() {
        String[] garbage = {"MPG", "PG", "MPG"};
        int[] travel = {2, 3, 2};
        assertEquals(10, minCost(garbage, travel));
    }

    @Test
    public void test_3() {
        String[] garbage = {"GGG", "PPP", "MMM", "MPG"};
        int[] travel = {1, 1, 1, 2};
        assertEquals(12, minCost(garbage, travel));
    }

    @Test
    public void test_4() {
        String[] garbage = {"MPG", "PG", "MPG", "GGG", "PPP", "MMM"};
        int[] travel = {2, 3, 2, 1, 1, 1};
        assertEquals(16, minCost(garbage, travel));
    }

    public int minCost(String[] garbage, int[] travel) {
        int n = garbage.length;
        int[][] dp = new int[3][n];
        for (int i = 0; i < 3; i++) {
            dp[i][0] = 0;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                int cost = travel[i - 1];
                if (garbage[i].charAt(j) == 'M') {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                } else if (garbage[i].charAt(j) == 'P') {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                } else {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                }
            }
        }
        return Math.min(Math.min(dp[0][n - 1], dp[1][n - 1]), dp[2][n - 1]);
    }

}