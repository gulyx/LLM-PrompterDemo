package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2391_DescriptionOnlyTest {

    @Test
    public void test_0() {
        String[] garbage = new String[]{"MPG", "PG"};
        int[] travel = new int[]{2, 3};
        assertEquals(10, minCost(garbage, travel));
    }

    @Test
    public void test_1() {
        String[] garbage = new String[]{"GGG", "PPP", "MMM"};
        int[] travel = new int[]{0, 0, 0};
        assertEquals(12, minCost(garbage, travel));
    }

    @Test
    public void test_2() {
        String[] garbage = new String[]{"MPG", "PG", "GG"};
        int[] travel = new int[]{1, 3, 4};
        assertEquals(10, minCost(garbage, travel));
    }

    @Test
    public void test_3() {
        String[] garbage = new String[]{"MPG", "PG", "GG"};
        int[] travel = new int[]{2, 3, 1};
        assertEquals(11, minCost(garbage, travel));
    }

    @Test
    public void test_4() {
        String[] garbage = new String[]{"MPG", "PG", "GG"};
        int[] travel = new int[]{0, 0, 0};
        assertEquals(6, minCost(garbage, travel));
    }
}

public class Solution {

    public int minCost(String[] garbage, int[] travel) {
        int n = garbage.length;
        int[][] dp = new int[3][n];
        for (int i = 0; i < 3; i++) {
            dp[i][0] = garbage[0].charAt(i) - 'A';
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                int cost = travel[i-1];
                if(j == 0){
                    dp[j][i] = Math.min(dp[1][i-1]+garbage[i].charAt(1) - 'A', dp[2][i-1]+garbage[i].charAt(2) - 'A');
                }else if(j == 1){
                    dp[j][i] = Math.min(dp[0][i-1]+garbage[i].charAt(0) - 'A', dp[2][i-1]+garbage[i].charAt(2) - 'A');
                }else{
                    dp[j][i] = Math.min(dp[0][i-1]+garbage[i].charAt(0) - 'A', dp[1][i-1]+garbage[i].charAt(1) - 'A');
                }
            }
        }

        return Math.min(Math.min(dp[0][n-1], dp[1][n-1]), dp[2][n-1]) + travel[n-1];
    }
}