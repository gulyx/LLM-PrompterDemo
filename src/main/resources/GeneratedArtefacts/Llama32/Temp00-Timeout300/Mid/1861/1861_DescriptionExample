package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1861_DescriptionExample {

    @Test
    public void test_1() {
        char[][] boxGrid = {{"#","."},{".","."}};
        char[][] result = rotateTheBox(boxGrid);
        assertArrayEquals(new char[][]{{"."},{"#"}},result);
    }

    @Test
    public void test_2() {
        char[][] boxGrid = {{"#",".","*","."},{"#","#","*","."}};
        char[][] result = rotateTheBox(boxGrid);
        assertArrayEquals(new char[][]{{"#"},{".","#"}},result[0]);
        assertArrayEquals(new char[][]{{"#"},{".","#"}},result[1]);
        assertArrayEquals(new char[][]{"*","*"},result[2]);
        assertArrayEquals(new char[][]{".","."},result[3]);
    }

    @Test
    public void test_3() {
        char[][] boxGrid = {{"#","#","*",".","*","."},{"#","#","#","*",".","."},{"#","#","#",".","#","."}};
        char[][] result = rotateTheBox(boxGrid);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[0]);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[1]);
        assertArrayEquals(new char[][]{"*","*"},{".","."},{"#","*","."},{".","*","."}},result[2]);
        assertArrayEquals(new char[][]{".",".","*"},{"#",".","*"},{"#",".","."}},result[3]);
        assertArrayEquals(new char[][]{".",".","."},result[4]);
    }

    @Test
    public void test_4() {
        char[][] boxGrid = {{"#","#","*",".","*","."},{"#","#","#","*",".","."},{"#","#","#",".","#","."}};
        char[][] result = rotateTheBox(boxGrid);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[0]);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[1]);
        assertArrayEquals(new char[][]{"*","*"},{".","."},{"#","*","."},{".","*","."}},result[2]);
        assertArrayEquals(new char[][]{".",".","*"},{"#",".","*"},{"#",".","."}},result[3]);
        assertArrayEquals(new char[][]{".",".","."},result[4]);
    }

    @Test
    public void test_5() {
        char[][] boxGrid = {{"#","#","*",".","*","."},{"#","#","#","*",".","."},{"#","#","#",".","#","."}};
        char[][] result = rotateTheBox(boxGrid);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[0]);
        assertArrayEquals(new char[][]{".","#","#"},{".","#","#"}},result[1]);
        assertArrayEquals(new char[][]{"*","*"},{".","."},{"#","*","."},{".","*","."}},result[2]);
        assertArrayEquals(new char[][]{".",".","*"},{"#",".","*"},{"#",".","."}},result[3]);
        assertArrayEquals(new char[][]{".",".","."},result[4]);
    }

    public char[][] rotateTheBox(char[][] boxGrid) {
        int m = boxGrid.length;
        int n = boxGrid[0].length;
        char[][] result = new char[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (boxGrid[i][j] == '#') {
                    int row = m - 1 - j;
                    result[row][i] = '#';
                } else if (boxGrid[i][j] == '*') {
                    int row = m - 1 - j;
                    result[row][i] = '*';
                }
            }
        }
        return result;
    }

}