package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1329_DescriptionExampleTest {

    @Test
    public void testDiagonalSort() {
        int[][] mat = {{3,3,1,1},{2,2,1,2},{1,1,1,2}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[]{1, 1, 1, 1}, result[0]);
        assertArrayEquals(new int[]{1, 2, 2, 2}, result[1]);
        assertArrayEquals(new int[]{1, 2, 3, 3}, result[2]);
    }

    @Test
    public void testDiagonalSort_2() {
        int[][] mat = {{11,25,66,1,69,7},{23,55,17,45,15,52},{75,31,36,44,58,8},{22,27,33,25,68,4},{84,28,14,11,5,50}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[]{5, 17, 4, 1, 52, 7}, result[0]);
        assertArrayEquals(new int[]{11, 11, 25, 45, 8, 69}, result[1]);
        assertArrayEquals(new int[]{14, 23, 25, 44, 58, 15}, result[2]);
        assertArrayEquals(new int[]{22, 27, 31, 36, 50, 66}, result[3]);
        assertArrayEquals(new int[]{84, 28, 75, 33, 55, 68}, result[4]);
    }

    public static int[][] diagonalSort(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        List<Integer>[] diagonals = new List[m + n - 1];
        for (int i = 0; i < m + n - 1; i++) {
            diagonals[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                diagonals[i + j].add(mat[i][j]);
            }
        }

        for (List<Integer> diagonal : diagonals) {
            Collections.sort(diagonal);
        }

        int[][] result = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = diagonals[i + j].remove(0);
            }
        }
        return result;
    }
}