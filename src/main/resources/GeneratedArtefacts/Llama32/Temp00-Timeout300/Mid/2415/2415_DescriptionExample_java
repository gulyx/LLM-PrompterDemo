```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2415;

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Solution {

    public TreeNode reverseOddLevel(TreeNode root) {
        if (root == null) return null;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean isOddLevel = true;
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> levelValues = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (isOddLevel) {
                    levelValues.add(node.val);
                }
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }
            isOddLevel = !isOddLevel;
            for (int i = 0; i < size; i++) {
                TreeNode node = new TreeNode(levelValues.get(i));
                if (i % 2 == 0) {
                    node.left = queue.poll();
                    node.right = queue.poll();
                }
                queue.add(node);
            }
        }
        return root;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(5);
        root1.left.left = new TreeNode(8);
        root1.left.right = new TreeNode(13);
        root1.right.left = new TreeNode(21);
        root1.right.right = new TreeNode(34);

        TreeNode root2 = new TreeNode(7);
        root2.left = new TreeNode(13);
        root2.right = new TreeNode(11);

        TreeNode root3 = new TreeNode(0);
        root3.left = new TreeNode(1);
        root3.right = new TreeNode(2);
        root3.left.left = new TreeNode(0);
        root3.left.right = new TreeNode(0);
        root3.right.left = new TreeNode(0);
        root3.right.right = new TreeNode(1);
        root3.right.right.left = new TreeNode(1);
        root3.right.right.right = new TreeNode(2);
        root3.right.right.right.left = new TreeNode(2);

        System.out.println(solution.reverseOddLevel(root1).val); // 2
        System.out.println(Arrays.toString(solution.reverseOddLevel(root2).val)); // [7, 11, 13]
        System.out.println(Arrays.toString(solution.reverseOddLevel(root3).val)); // [0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1]
    }
}
```