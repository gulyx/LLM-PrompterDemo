```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testReverseOddLevels() {
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(3);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(8);
        root.left.right = new TreeNode(13);
        root.right.left = new TreeNode(21);
        root.right.right = new TreeNode(34);

        TreeNode expectedRoot = new TreeNode(2);
        expectedRoot.left = new TreeNode(5);
        expectedRoot.right = new TreeNode(3);
        expectedRoot.left.left = new TreeNode(8);
        expectedRoot.left.right = new TreeNode(13);
        expectedRoot.right.left = new TreeNode(21);
        expectedRoot.right.right = new TreeNode(34);

        TreeNode actualRoot = reverseOddLevels(root);
        assertEquals(expectedRoot, actualRoot);
    }

    @Test
    public void testReverseOddLevels2() {
        TreeNode root = new TreeNode(7);
        root.left = new TreeNode(13);
        root.right = new TreeNode(11);

        TreeNode expectedRoot = new TreeNode(7);
        expectedRoot.left = new TreeNode(11);
        expectedRoot.right = new TreeNode(13);

        TreeNode actualRoot = reverseOddLevels(root);
        assertEquals(expectedRoot, actualRoot);
    }

    @Test
    public void testReverseOddLevels3() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(0);
        root.right.left = new TreeNode(0);
        root.right.right = new TreeNode(1);
        root.right.right.left = new TreeNode(1);
        root.right.right.right = new TreeNode(2);

        TreeNode expectedRoot = new TreeNode(0);
        expectedRoot.left = new TreeNode(2);
        expectedRoot.right = new TreeNode(1);
        expectedRoot.left.left = new TreeNode(0);
        expectedRoot.left.right = new TreeNode(0);
        expectedRoot.right.left = new TreeNode(0);
        expectedRoot.right.right = new TreeNode(1);
        expectedRoot.right.right.left = new TreeNode(1);
        expectedRoot.right.right.right = new TreeNode(2);

        TreeNode actualRoot = reverseOddLevels(root);
        assertEquals(expectedRoot, actualRoot);
    }

    @Test
    public void testReverseOddLevels4() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(0);
        root.right.left = new TreeNode(0);
        root.right.right = new TreeNode(1);
        root.right.right.left = new TreeNode(1);
        root.right.right.right = new TreeNode(2);

        TreeNode expectedRoot = new TreeNode(0);
        expectedRoot.left = new TreeNode(2);
        expectedRoot.right = new TreeNode(1);
        expectedRoot.left.left = new TreeNode(0);
        expectedRoot.left.right = new TreeNode(0);
        expectedRoot.right.left = new TreeNode(0);
        expectedRoot.right.right = new TreeNode(1);
        expectedRoot.right.right.left = new TreeNode(1);
        expectedRoot.right.right.right = new TreeNode(2);

        TreeNode actualRoot = reverseOddLevels(root);
        assertEquals(expectedRoot, actualRoot);
    }

    @Test
    public void testReverseOddLevels5() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(0);
        root.right.left = new TreeNode(0);
        root.right.right = new TreeNode(1);
        root.right.right.left = new TreeNode(1);
        root.right.right.right = new TreeNode(2);

        TreeNode expectedRoot = new TreeNode(0);
        expectedRoot.left = new TreeNode(2);
        expectedRoot.right = new TreeNode(1);
        expectedRoot.left.left = new TreeNode(0);
        expectedRoot.left.right = new TreeNode(0);
        expectedRoot.right.left = new TreeNode(0);
        expectedRoot.right.right = new TreeNode(1);
        expectedRoot.right.right.left = new TreeNode(1);
        expectedRoot.right.right.right = new TreeNode(2);

        TreeNode actualRoot = reverseOddLevels(root);
        assertEquals(expectedRoot, actualRoot);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

    @Override
    public String toString() {
        return "TreeNode{" +
                "val=" + val +
                ", left=" + (left == null ? "null" : left.val) +
                ", right=" + (right == null ? "null" : right.val) +
                '}';
    }
}

class TreeNodeBuilder {
    private int val;
    private TreeNode left;
    private TreeNode right;

    public TreeNodeBuilder withVal(int val) {
        this.val = val;
        return this;
    }

    public TreeNodeBuilder withLeft(TreeNode left) {
        this.left = left;
        return this;
    }

    public TreeNodeBuilder withRight(TreeNode right) {
        this.right = right;
        return this;
    }

    public TreeNode build() {
        return new TreeNode(val, left, right);
    }
}
```