```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class DescriptionOnlyTest {

    @Test
    public void testPartitionString() {
        String s = "ababcc";
        int[] result = partitionLabel(s);
        assertEquals(2, result.length);
        assertTrue(result[0] == 2 && result[1] == 2);
    }

    @Test
    public void testPartitionStringInvalid() {
        String s = "aba";
        int[] result = partitionLabel(s);
        assertEquals(1, result.length);
        assertTrue(result[0] == 3);
    }

    @Test
    public void testPartitionStringSingleLetter() {
        String s = "a";
        int[] result = partitionLabel(s);
        assertEquals(1, result.length);
        assertTrue(result[0] == 1);
    }

    @Test
    public void testPartitionStringEmpty() {
        String s = "";
        int[] result = partitionLabel(s);
        assertEquals(0, result.length);
    }

    @Test
    public void testPartitionStringMultipleLetters() {
        String s = "abcdefgh";
        int[] result = partitionLabel(s);
        assertEquals(8, result.length);
        assertTrue(result[0] == 1 && result[1] == 2 && result[2] == 3 && result[3] == 4 && result[4] == 5 && result[5] == 6 && result[6] == 7 && result[7] == 8);
    }
}

public class Solution {
    public int[] partitionLabel(String s) {
        int n = s.length();
        List<Integer> res = new ArrayList<>();
        int last = -1;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            while (j < n && s.charAt(j) != s.charAt(i)) j++;
            if (i == last) res.add(j - i);
            else {
                last = j;
                res.add(j - i);
            }
        }
        return res.stream().mapToInt(x -> x).toArray();
    }
}
```