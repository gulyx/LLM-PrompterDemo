```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void testMaxEqualRowsAfterFlips() {
        int[][] matrix = {{0,1},{1,1}};
        assertEquals(1, maxEqualRowsAfterFlips(matrix));
    }

    @Test
    public void testMaxEqualRowsAfterFlips2() {
        int[][] matrix = {{0,1},{1,0}};
        assertEquals(2, maxEqualRowsAfterFlips(matrix));
    }

    @Test
    public void testMaxEqualRowsAfterFlips3() {
        int[][] matrix = {{0,0,0},{0,0,1},{1,1,0}};
        assertEquals(2, maxEqualRowsAfterFlips(matrix));
    }

    @Test
    public void testMaxEqualRowsAfterFlips4() {
        int[][] matrix = {{0,0,0},{0,0,0},{0,0,0}};
        assertEquals(3, maxEqualRowsAfterFlips(matrix));
    }

    @Test
    public void testMaxEqualRowsAfterFlips5() {
        int[][] matrix = {{1,1,1},{1,1,1},{1,1,1}};
        assertEquals(3, maxEqualRowsAfterFlips(matrix));
    }
}

public class Solution {

    public int maxEqualRowsAfterFlips(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[] count = new int[cols];
        for (int i = 0; i < rows; i++) {
            boolean flip = false;
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 1) {
                    flip = !flip;
                }
                count[j] += flip;
            }
        }
        int maxCount = 0;
        for (int i : count) {
            maxCount = Math.max(maxCount, i);
        }
        return maxCount;
    }
}
```