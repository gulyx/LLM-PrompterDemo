package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2785_DescriptionOnly {

    @Test
    public void test1() {
        String s = "leetcode";
        String t = "leetcod";
        assertEquals(s, permuteString(s));
    }

    @Test
    public void test2() {
        String s = "aabb";
        String t = "abab";
        assertEquals(s, permuteString(s));
    }

    @Test
    public void test3() {
        String s = "aa";
        String t = "aa";
        assertEquals(s, permuteString(s));
    }

    @Test
    public void test4() {
        String s = "bcab";
        String t = "bcaab";
        assertEquals(s, permuteString(s));
    }

    @Test
    public void test5() {
        String s = "aaabbbcc";
        String t = "aabbbbccc";
        assertEquals(s, permuteString(s));
    }
}

public class Solution {

    public String permuteString(String s) {
        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
        int n = s.length();
        int[] vowelCounts = new int[10];
        for (char c : s.toCharArray()) {
            if (isVowel(c)) {
                vowelCounts[c - 'a']++;
            }
        }

        char[] result = new char[n];
        int vowelIndex = 0;
        for (int i = 0; i < n; i++) {
            if (isVowel(s.charAt(i))) {
                while (vowelCounts[vowelIndex] == 0) {
                    vowelIndex++;
                }
                result[i] = vowels[vowelIndex++];
                vowelCounts[vowelIndex - 1]--;
            } else {
                result[i] = s.charAt(i);
            }
        }

        return new String(result);
    }

    private boolean isVowel(char c) {
        for (char v : vowels) {
            if (v == c) {
                return true;
            }
        }
        return false;
    }
}