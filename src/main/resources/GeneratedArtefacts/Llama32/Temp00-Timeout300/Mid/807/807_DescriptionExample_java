package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.807;

public class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] increase = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                increase[i][j] = grid[i][j];
                for (int k = 0; k < rows; k++) {
                    if (grid[k][j] > increase[i][j]) {
                        increase[i][j] = grid[k][j];
                    }
                }
                for (int k = 0; k < cols; k++) {
                    if (grid[i][k] > increase[i][j]) {
                        increase[i][j] = grid[i][k];
                    }
                }
            }
        }

        int maxSum = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maxSum += Math.min(increase[i][j], grid[i][j]);
            }
        }
        return maxSum;
    }

    [--Example 1--]
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] grid = {{3,0,8,4},{2,4,5,7},{9,2,6,3},{0,3,1,0}};
        System.out.println(solution.maxIncreaseKeepingSkyline(grid)); // 35
    }

    [--Example 2--]
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] grid = {{0,0,0},{0,0,0},{0,0,0}};
        System.out.println(solution.maxIncreaseKeepingSkyline(grid)); // 0
    }
}