```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[][] grid = {{3,0,8,4},{2,4,5,7},{9,2,6,3},{0,3,1,0}};
        assertEquals(35, maxIncreaseHeight(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{0,0,0},{0,0,0},{0,0,0}};
        assertEquals(0, maxIncreaseHeight(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{1,2,3},{4,5,6},{7,8,9}};
        assertEquals(45, maxIncreaseHeight(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{100,0,0},{0,100,0},{0,0,100}};
        assertEquals(300, maxIncreaseHeight(grid));
    }

    @Test
    public void test_5() {
        int[][] grid = {{1,2},{3,4}};
        assertEquals(10, maxIncreaseHeight(grid));
    }
}

public class Solution {

    public int maxIncreaseHeight(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] rowMax = new int[m];
        int[] colMax = new int[n];

        for (int i = 0; i < m; i++) {
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < n; j++) {
                max = Math.max(max, grid[i][j]);
                rowMax[i] = Math.max(rowMax[i], max);
            }
        }

        for (int j = 0; j < n; j++) {
            int max = Integer.MIN_VALUE;
            for (int i = 0; i < m; i++) {
                max = Math.max(max, grid[i][j]);
                colMax[j] = Math.max(colMax[j], max);
            }
        }

        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }

        return ans;
    }
}
```