```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TwinSum {
    public int maxTwinSum(ListNode head) {
        ListNode slow = head, fast = head.next;
        int res = 0;
        while (slow != fast) {
            if (fast == null || fast.val < slow.val) break;
            res = Math.max(res, slow.val + fast.val);
            slow = slow.next;
            fast = fast.next.next;
        }
        return res;
    }

    public static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    @Test
    public void testMaxTwinSum() {
        ListNode head = new ListNode(5);
        head.next = new ListNode(4);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(1);
        assertEquals(6, maxTwinSum(head));
    }

    @Test
    public void testMaxTwinSum2() {
        ListNode head = new ListNode(4);
        head.next = new ListNode(2);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(3);
        assertEquals(7, maxTwinSum(head));
    }

    @Test
    public void testMaxTwinSum3() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(4);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(5);
        assertEquals(7, maxTwinSum(head));
    }

    @Test
    public void testMaxTwinSum4() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(3);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(5);
        assertEquals(9, maxTwinSum(head));
    }

    @Test
    public void testMaxTwinSum5() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(4);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(3);
        assertEquals(9, maxTwinSum(head));
    }
}
```