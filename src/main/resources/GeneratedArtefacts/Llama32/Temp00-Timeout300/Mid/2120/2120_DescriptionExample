```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    @Test
    public void test_1() {
        int n = 3;
        int[] startPos = {0, 1};
        String s = "RRDDLU";
        int[] answer = solution(n, startPos, s);
        assertEquals(new int[]{1, 5, 4, 3, 1, 0}, answer);
    }

    @Test
    public void test_2() {
        int n = 2;
        int[] startPos = {1, 1};
        String s = "LURD";
        int[] answer = solution(n, startPos, s);
        assertEquals(new int[]{4, 1, 0, 0}, answer);
    }

    @Test
    public void test_3() {
        int n = 1;
        int[] startPos = {0, 0};
        String s = "LRUD";
        int[] answer = solution(n, startPos, s);
        assertEquals(new int[]{0, 0, 0, 0}, answer);
    }

    @Test
    public void test_4() {
        int n = 5;
        int[] startPos = {2, 3};
        String s = "DDUUURRR";
        int[] answer = solution(n, startPos, s);
        assertEquals(new int[]{1, 0, 0, 0, 0}, answer);
    }

    @Test
    public void test_5() {
        int n = 10;
        int[] startPos = {9, 9};
        String s = "UUURRRDD";
        int[] answer = solution(n, startPos, s);
        assertEquals(new int[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, answer);
    }
}

public class Solution {
    public int[] solution(int n, int[] startPos, String s) {
        int m = s.length();
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int[][] dp = new int[m][n * n];
        for (int i = 0; i < m; i++) {
            int[] pos = startPos;
            for (int j = i; j < m; j++) {
                if (pos[0] + directions[s.charAt(j) - 'L'][0] >= 0 && pos[0] + directions[s.charAt(j) - 'L'][0] < n &&
                        pos[1] + directions[s.charAt(j) - 'L'][1] >= 0 && pos[1] + directions[s.charAt(j) - 'L'][1] < n) {
                    dp[j][pos[0] * n + pos[1]] = j - i + 1;
                } else {
                    break;
                }
                pos[0] += directions[s.charAt(j) - 'L'][0];
                pos[1] += directions[s.charAt(j) - 'L'][1];
            }
        }
        int[] answer = new int[m];
        for (int i = 0; i < m; i++) {
            if (i == 0 || dp[i][startPos[0] * n + startPos[1]] != dp[i - 1][startPos[0] * n + startPos[1]]) {
                answer[i] = dp[i][startPos[0] * n + startPos[1]];
            } else {
                answer[i] = 0;
            }
        }
        return answer;
    }
}
```