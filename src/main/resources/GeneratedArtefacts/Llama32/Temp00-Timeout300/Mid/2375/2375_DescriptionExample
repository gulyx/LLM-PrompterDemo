```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void test_1() {
        String pattern = "IIIDIDDD";
        String num = "123549876";
        assertEquals(num, smallestNumber(pattern));
    }

    @Test
    public void test_2() {
        String pattern = "DDD";
        String num = "4321";
        assertEquals(num, smallestNumber(pattern));
    }

    @Test
    public void test_3() {
        String pattern = "IIIDDD";
        String num = "123456789";
        assertEquals(num, smallestNumber(pattern));
    }

    @Test
    public void test_4() {
        String pattern = "DID";
        String num = "13579";
        assertEquals(num, smallestNumber(pattern));
    }

    @Test
    public void test_5() {
        String pattern = "";
        String num = "";
        assertEquals(num, smallestNumber(pattern));
    }
}

public class Solution {

    public String smallestNumber(String pattern) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < pattern.length()) {
            if (pattern.charAt(i) == 'I') {
                int j = i + 1;
                while (j < pattern.length() && pattern.charAt(j) == 'I') {
                    j++;
                }
                for (int k = i; k < j; k++) {
                    sb.append((char) ('0' + k));
                }
                i = j;
            } else if (pattern.charAt(i) == 'D') {
                int j = i + 1;
                while (j < pattern.length() && pattern.charAt(j) == 'D') {
                    j++;
                }
                for (int k = i; k < j; k++) {
                    sb.append((char) ('0' + k));
                }
                i = j;
            } else {
                i++;
            }
        }
        return sb.toString();
    }
}
```