package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.*;

public class 51_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[][] board = new int[4][4];
        List<List<String>> result = solveNQueens(4, board);
        assertEquals(result, Arrays.asList(Arrays.asList(".Q..", "...Q", "Q...", "..Q."), Arrays.asList("..Q.", "Q...", "...Q", ".Q..")));
    }

    @Test
    public void test_2() {
        int[][] board = new int[1][1];
        List<List<String>> result = solveNQueens(1, board);
        assertEquals(result, Collections.singletonList(Arrays.asList("Q")));
    }

    @Test
    public void test_3() {
        int[][] board = new int[5][5];
        List<List<String>> result = solveNQueens(5, board);
        // expected output is not provided in the problem description
    }

    @Test
    public void test_4() {
        int[][] board = new int[2][2];
        List<List<String>> result = solveNQueens(2, board);
        assertEquals(result, Collections.singletonList(Arrays.asList("Q.", ".Q")));
    }

    @Test
    public void test_5() {
        int[][] board = new int[3][3];
        List<List<String>> result = solveNQueens(3, board);
        // expected output is not provided in the problem description
    }
}

class Solution {

    public List<List<String>> solveNQueens(int n, int[][] board) {
        List<List<String>> result = new ArrayList<>();
        backtrack(result, 0, n, board);
        return result;
    }

    private void backtrack(List<List<String>> result, int row, int n, int[][] board) {
        if (row == n) {
            result.add(getBoardConfig(board));
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValidMove(row, col, n, board)) {
                placeQueen(row, col, n, board);
                backtrack(result, row + 1, n, board);
                removeQueen(row, col, n, board);
            }
        }
    }

    private boolean isValidMove(int row, int col, int n, int[][] board) {
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
        }
        for (int i = row - 1, j = col; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }
        for (int i = row - 1, j = col; j >= 0 && i < n; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }
        return true;
    }

    private void placeQueen(int row, int col, int n, int[][] board) {
        for (int i = 0; i < n; i++) {
            board[row][i] = 'Q';
        }
    }

    private void removeQueen(int row, int col, int n, int[][] board) {
        for (int i = 0; i < n; i++) {
            board[row][i] = '.';
        }
    }

    private List<String> getBoardConfig(int[][] board) {
        List<String> config = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            StringBuilder row = new StringBuilder();
            for (int j = 0; j < board[0].length; j++) {
                row.append(board[i][j]);
            }
            config.add(row.toString());
        }
        return config;
    }
}