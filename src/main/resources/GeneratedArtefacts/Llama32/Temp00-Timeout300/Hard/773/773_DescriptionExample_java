package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.773;

public class Solution {
    public int slidingPuzzle(int[][] board) {
        boolean isValidMove(int[][] board, int row, int col) {
            if (row < 0 || row >= board.length || col < 0 || col >= board[0].length)
                return false;
            int temp = board[row][col];
            board[row][col] = board[row][0];
            board[row][0] = temp;
            return true;
        }

        boolean isSolved(int[][] board) {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    if (board[i][j] != 0 && board[i][j] != i * 3 + j + 1)
                        return false;
                }
            }
            return true;
        }

        int moves = 0;
        boolean visited[][] = new boolean[2][9];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] arr = queue.poll();
                moves = arr[0];
                int row = arr[1] / 3;
                int col = arr[1] % 3;
                if (isSolved(board)) return moves;
                for (int r = -1; r <= 1; r++) {
                    for (int c = -1; c <= 1; c++) {
                        if ((r == 0 && c == 0) || !isValidMove(board, row + r, col + c))
                            continue;
                        int newRow = row + r;
                        int newCol = col + c;
                        visited[newRow][newCol] = true;
                        queue.add(new int[]{moves + 1, newRow * 3 + newCol});
                    }
                }
            }
        }
        return -1;
    }
}