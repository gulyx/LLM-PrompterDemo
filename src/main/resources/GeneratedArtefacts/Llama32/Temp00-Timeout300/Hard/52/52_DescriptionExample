```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Solution {

    public int totalNQueens(int n) {
        return solve(n, new boolean[n]);
    }

    private int solve(int n, boolean[] board) {
        if (isSafe(board)) {
            return 1 + solve(n, placeQueen(board));
        } else {
            return 0;
        }
    }

    private boolean isSafe(boolean[] board) {
        for (int i = 0; i < board.length; i++) {
            if (board[i]) {
                return false;
            }
        }
        return true;
    }

    private boolean[] placeQueen(boolean[] board) {
        int row = board.length - 1;
        while (row >= 0 && board[row]) {
            row--;
        }
        if (row < 0) {
            return new boolean[board.length];
        }
        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row] = true;
                return placeQueen(board);
            }
        }
        board[row] = false;
        return null;
    }

    private boolean isSafe(boolean[] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i]) {
                if (col - (row - i) >= 0 && col - (row - i) < board.length) {
                    return false;
                }
                if (col + (row - i) < board.length && board[col + (row - i)]) {
                    return false;
                }
            }
        }
        return true;
    }

}

class SolutionTest {

    @Test
    public void testTotalNQueens_4() {
        Solution solution = new Solution();
        int result = solution.totalNQueens(4);
        assertEquals(2, result);
    }

    @Test
    public void testTotalNQueens_1() {
        Solution solution = new Solution();
        int result = solution.totalNQueens(1);
        assertEquals(1, result);
    }
}
```