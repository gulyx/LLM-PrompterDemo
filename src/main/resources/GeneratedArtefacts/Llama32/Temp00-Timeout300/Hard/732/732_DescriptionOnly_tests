package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;

public class DescriptionOnlyTest {

    @Test
    public void test_0() {
        MyCalendarThree obj = new MyCalendarThree();
        obj.book(1, 2);
        obj.book(2, 3);
        obj.book(3, 4);
        assertEquals(2, obj.book(5, 6));
    }

    @Test
    public void test_1() {
        MyCalendarThree obj = new MyCalendarThree();
        obj.book(1, 2);
        obj.book(2, 3);
        obj.book(3, 4);
        assertEquals(0, obj.book(5, 6));
    }

    @Test
    public void test_2() {
        MyCalendarThree obj = new MyCalendarThree();
        obj.book(1, 2);
        obj.book(2, 3);
        obj.book(3, 4);
        assertEquals(0, obj.book(5, 6));
    }

    @Test
    public void test_3() {
        MyCalendarThree obj = new MyCalendarThree();
        obj.book(1, 2);
        obj.book(2, 3);
        obj.book(3, 4);
        assertEquals(0, obj.book(5, 6));
    }

    @Test
    public void test_4() {
        MyCalendarThree obj = new MyCalendarThree();
        obj.book(1, 2);
        obj.book(2, 3);
        obj.book(3, 4);
        assertEquals(0, obj.book(5, 6));
    }
}

class MyCalendarThree {

    private int[][] events;

    public MyCalendarThree() {
        events = new int[0][];
    }

    public int book(int startTime, int endTime) {
        int[] newEvent = {startTime, endTime};
        events = addEvent(events, newEvent);
        return findMaxKBooking();
    }

    private int[][] addEvent(int[][] events, int[] newEvent) {
        int[][] result = new int[events.length + 1][];
        System.arraycopy(events, 0, result, 0, events.length);
        result[events.length] = newEvent;
        return result;
    }

    private int findMaxKBooking() {
        Arrays.sort(events, (a, b) -> a[1] - b[1]);
        int maxK = 0;
        for(int i=0; i<events.length-1; i++) {
            if(hasIntersection(events[i], events[i+1])) {
                maxK++;
            }
        }
        return maxK;
    }

    private boolean hasIntersection(int[] a, int[] b) {
        return a[0] < b[1] && a[1] > b[0];
    }
}