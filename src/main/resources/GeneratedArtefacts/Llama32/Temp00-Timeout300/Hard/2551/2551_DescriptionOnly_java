package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2551;

public class Solution {
    public int minCost(int[] weights, int k) {
        int n = weights.length;
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Long.MAX_VALUE);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                if (i > 0) {
                    dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                }
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j - 1] + weights[i]);
            }
        }
        long minScore = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                if (i > 0) {
                    minScore = Math.min(minScore, dp[i][j]);
                }
                minScore = Math.min(minScore, dp[i][j - 1] + weights[i]);
            }
        }
        long maxScore = 0;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = k; j > 0; j--) {
                if (i < n - 1) {
                    maxScore = Math.max(maxScore, dp[i + 1][j]);
                }
                maxScore = Math.max(maxScore, dp[i][j - 1] + weights[i]);
            }
        }
        return (int) (maxScore - minScore);
    }

}