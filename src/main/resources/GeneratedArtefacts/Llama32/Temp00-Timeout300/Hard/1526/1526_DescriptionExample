package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void testMinOperations() {
        int[] target = {1,2,3,2,1};
        int[] initial = new int[target.length];
        for (int i = 0; i < target.length; i++) {
            initial[i] = 0;
        }
        assertEquals(3, minOperations(target, initial));
    }

    @Test
    public void testMinOperations_2() {
        int[] target = {3,1,1,2};
        int[] initial = new int[target.length];
        for (int i = 0; i < target.length; i++) {
            initial[i] = 0;
        }
        assertEquals(4, minOperations(target, initial));
    }

    @Test
    public void testMinOperations_3() {
        int[] target = {3,1,5,4,2};
        int[] initial = new int[target.length];
        for (int i = 0; i < target.length; i++) {
            initial[i] = 0;
        }
        assertEquals(7, minOperations(target, initial));
    }

    @Test
    public void testMinOperations_4() {
        int[] target = {1,2,3,2,1};
        int[] initial = new int[target.length];
        for (int i = 0; i < target.length; i++) {
            initial[i] = 0;
        }
        assertEquals(3, minOperations(target, initial));
    }

    @Test
    public void testMinOperations_5() {
        int[] target = {3,1,1,2};
        int[] initial = new int[target.length];
        for (int i = 0; i < target.length; i++) {
            initial[i] = 0;
        }
        assertEquals(4, minOperations(target, initial));
    }

    public static int minOperations(int[] target, int[] initial) {
        int operations = 0;
        for (int i = 0; i < target.length; i++) {
            if (target[i] > initial[i]) {
                operations += target[i] - initial[i];
            }
        }
        return operations;
    }

}