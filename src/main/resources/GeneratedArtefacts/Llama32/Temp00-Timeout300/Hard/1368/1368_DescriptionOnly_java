package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1368;

public class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][][] dp = new int[m][n][2];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (i + 1 < m && !visited[i + 1][j]) {
                        dp[i + 1][j][0] = dp[i][j][0] + 1;
                        visited[i + 1][j] = true;
                    }
                } else if (grid[i][j] == 2) {
                    if (i - 1 >= 0 && !visited[i - 1][j]) {
                        dp[i - 1][j][1] = dp[i][j][1] + 1;
                        visited[i - 1][j] = true;
                    }
                } else if (grid[i][j] == 3) {
                    if (j + 1 < n && !visited[i][j + 1]) {
                        dp[i][j + 1][0] = dp[i][j][0];
                        visited[i][j + 1] = true;
                    }
                } else if (grid[i][j] == 4) {
                    if (j - 1 >= 0 && !visited[i][j - 1]) {
                        dp[i][j - 1][1] = dp[i][j][1];
                        visited[i][j - 1] = true;
                    }
                } else {
                    dp[i][j][0] = Integer.MAX_VALUE;
                    dp[i][j][1] = Integer.MAX_VALUE;
                }
            }
        }

        int minCost = Math.min(dp[m - 1][n - 1][0], dp[m - 1][n - 1][1]);
        if (minCost == Integer.MAX_VALUE) {
            return grid[0][0];
        } else {
            return minCost;
        }
    }
}