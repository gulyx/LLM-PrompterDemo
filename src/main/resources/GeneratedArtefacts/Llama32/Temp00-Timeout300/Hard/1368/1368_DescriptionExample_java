package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1368;

public class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        return dfs(grid, m, n, 0, 0, visited, directions);
    }

    private int dfs(int[][] grid, int m, int n, int i, int j, boolean[][] visited, int[][] directions) {
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || grid[i][j] == -1)
            return Integer.MAX_VALUE;
        if (i == m - 1 && j == n - 1)
            return 0;
        int minCost = Integer.MAX_VALUE;
        for (int[] direction : directions) {
            int x = i + direction[0];
            int y = j + direction[1];
            minCost = Math.min(minCost, dfs(grid, m, n, x, y, visited, directions));
            if (grid[i][j] != -1)
                grid[i][j]--;
        }
        return minCost;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] grid1 = {{1, 1, 1, 1}, {2, 2, 2, 2}, {1, 1, 1, 1}, {2, 2, 2, 2}};
        System.out.println(solution.minCost(grid1)); // Output: 3

        int[][] grid2 = {{1, 1, 3}, {3, 2, 2}, {1, 1, 4}};
        System.out.println(solution.minCost(grid2)); // Output: 0

        int[][] grid3 = {{1, 2}, {4, 3}};
        System.out.println(solution.minCost(grid3)); // Output: 1
    }
}