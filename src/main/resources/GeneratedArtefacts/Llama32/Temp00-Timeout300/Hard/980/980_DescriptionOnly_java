package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.980;

public class Solution {
    public int uniquePathsIII(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int startRow = 0, startCol = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    startRow = i;
                    startCol = j;
                }
            }
        }
        int count = 0, visited = 0;
        boolean[][] visitedGrid = new boolean[m][n];
        dfs(grid, startRow, startCol, count, visited, visitedGrid);
        return count - 1;
    }

    private void dfs(int[][] grid, int row, int col, int count, int visited, boolean[][] visitedGrid) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] == -1 || visitedGrid[row][col]) return;
        if (grid[row][col] == 2) count++;
        else visited++;
        visitedGrid[row][col] = true;
        dfs(grid, row + 1, col, count, visited, visitedGrid);
        dfs(grid, row - 1, col, count, visited, visitedGrid);
        dfs(grid, row, col + 1, count, visited, visitedGrid);
        dfs(grid, row, col - 1, count, visited, visitedGrid);
    }
}