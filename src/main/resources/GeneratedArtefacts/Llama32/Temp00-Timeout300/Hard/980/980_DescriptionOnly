```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;

public class DescriptionOnlyTest {

    @Test
    public void test_1() {
        int[][] grid = {{1, 2}, {0, 0}};
        assertEquals(6, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{1, -1, 2}, {-1, 0, 0}, {0, 0, 1}};
        assertEquals(4, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{1, 0, 0, 0, 2}, {0, -1, 0, 0, 0}, {0, 0, 0, 0, 0}};
        assertEquals(4, numUniquePaths(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{1, 2, 0, 0, 0}, {0, -1, 0, 0, 0}, {0, 0, 0, 0, 0}};
        assertEquals(8, numUniquePaths(grid));
    }

    @Test
    public void test_5() {
        int[][] grid = {{1, 2, 0, 0, 0}, {0, -1, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
        assertEquals(16, numUniquePaths(grid));
    }
}

public class Solution {
    public int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return helper(grid, 0, 0, visited);
    }

    private int helper(int[][] grid, int i, int j, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == -1)
            return 0;
        if (grid[i][j] == 2)
            return 1;
        visited[i][j] = true;
        int count = helper(grid, i + 1, j, visited) + helper(grid, i - 1, j, visited) + helper(grid, i, j + 1, visited) + helper(grid, i, j - 1, visited);
        visited[i][j] = false;
        return count;
    }
}
```