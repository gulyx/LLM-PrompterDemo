```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class 980_DescriptionExample {

    @Test
    public void test_1() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,2,-1}};
        assertEquals(2, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,0,2}};
        assertEquals(4, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{0,1},{2,0}};
        assertEquals(0, numUniquePaths(grid));
    }

    private int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[] visited = new boolean[m * n];
        return dfs(grid, 0, 0, visited);
    }

    private int dfs(int[][] grid, int i, int j, boolean[] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == -1 || visited[(i * grid[0].length) + j]) {
            return 0;
        }
        if (grid[i][j] == 2) {
            return 1;
        }
        visited[(i * grid[0].length) + j] = true;
        int count = dfs(grid, i - 1, j, visited);
        count += dfs(grid, i + 1, j, visited);
        count += dfs(grid, i, j - 1, visited);
        count += dfs(grid, i, j + 1, visited);
        return count;
    }
}
```