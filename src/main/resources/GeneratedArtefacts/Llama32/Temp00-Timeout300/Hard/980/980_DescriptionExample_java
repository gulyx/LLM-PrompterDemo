```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.980;

public class Solution {
    public int uniquePathsIII(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int startRow = 0, startCol = 0;
        int endRow = 0, endCol = 0;
        boolean visited[][] = new boolean[m][n];
        int count = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    startRow = i;
                    startCol = j;
                } else if (grid[i][j] == 2) {
                    endRow = i;
                    endCol = j;
                }
            }
        }

        dfs(startRow, startCol, visited, count);

        return count - 1;
    }

    private void dfs(int row, int col, boolean[][] visited, int count) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col] || grid[row][col] == -1)
            return;

        if (grid[row][col] != 0 && !visited[row][col]) {
            count++;
            visited[row][col] = true;
            dfs(row + 1, col, visited, count);
            dfs(row - 1, col, visited, count);
            dfs(row, col + 1, visited, count);
            dfs(row, col - 1, visited, count);
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] grid1 = {{1,0,0,0},{0,0,0,0},{0,0,2,-1}};
        System.out.println(solution.uniquePathsIII(grid1)); // Output: 2

        int[][] grid2 = {{1,0,0,0},{0,0,0,0},{0,0,0,2}};
        System.out.println(solution.uniquePathsIII(grid2)); // Output: 4

        int[][] grid3 = {{0,1},{2,0}};
        System.out.println(solution.uniquePathsIII(grid3)); // Output: 0
    }
}
```