package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1312;

public class Solution {
    public int minInsertionsToMakePalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1];
                } else {
                    dp[i][j] = dp[i][j - 1] || dp[i + 1][j];
                }
            }
        }
        return n - dp[0][n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.minInsertionsToMakePalindrome("ab")); // Output: 1
        System.out.println(solution.minInsertionsToMakePalindrome("abc")); // Output: 1
        System.out.println(solution.minInsertionsToMakePalindrome("abcd")); // Output: 3
    }
}