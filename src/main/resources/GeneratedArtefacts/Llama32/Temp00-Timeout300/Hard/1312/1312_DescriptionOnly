package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class 1312_DescriptionOnly {

    @Test
    public void testMinStepsPalindrome() {
        String s = "abc";
        int minSteps = minStepsToMakePalindrome(s);
        assertEquals(1, minSteps);
    }

    @Test
    public void testMinStepsPalindrome_WithTwoChars() {
        String s = "ab";
        int minSteps = minStepsToMakePalindrome(s);
        assertEquals(1, minSteps);
    }

    @Test
    public void testMinStepsPalindrome_EmptyString() {
        String s = "";
        int minSteps = minStepsToMakePalindrome(s);
        assertTrue(minSteps == 0);
    }

    @Test
    public void testMinStepsPalindrome_SingleChar() {
        String s = "a";
        int minSteps = minStepsToMakePalindrome(s);
        assertEquals(0, minSteps);
    }

    @Test
    public void testMinStepsPalindrome_LargerString() {
        String s = "abba";
        int minSteps = minStepsToMakePalindrome(s);
        assertEquals(0, minSteps);
    }
}

private int minStepsToMakePalindrome(String s) {
        int n = s.length();
        boolean[] dp = new boolean[n];
        dp[0] = true;
        for (int i = 1; i < n; i++) {
            dp[i] = (s.charAt(i - 1) == s.charAt(n - i));
        }
        int minSteps = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (dp[i]) {
                minSteps = Math.min(minSteps, i);
            }
        }
        return minSteps;
    }