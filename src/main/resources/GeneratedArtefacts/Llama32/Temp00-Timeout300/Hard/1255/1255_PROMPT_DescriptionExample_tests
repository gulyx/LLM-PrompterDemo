As a professional Software Tester, generate a complete Junit test-class (name the test-class as: '1255_DescriptionExample_testsTest', and use as first line the declaration: 'package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1255;') with 5 different JUnit tests for a Java class-under-test (you can assume the class-under-test is named: Solution, and import it as: 'import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1255.Solution;'). The class-under-test implements the following description in natural language with examples. Specifically below the description, each example is introduced by the keyword [--Example XX--] (where XX is a number), and it is composed by an input tuple and an expected output. Emit only the Java code, without any other tag or text.  Here is the description for the class-under-test: 
Given a list of "words", list of single "letters" (might be repeating) and "score" of every character.
Return the maximum score of any valid set of words formed by using the given letters ("words[i]" cannot be used two or more times).
It is not necessary to use all characters in "letters", and each letter can only be used once. Score of letters "a", "b", "c", ... , "z" is given by "score[0]", "score[1]", ..., "score[25]" respectively.
Constraints:
- "1 <= words.length <= 14"
- "1 <= words[i].length <= 15"
- "1 <= letters.length <= 100"
- "letters[i].length == 1"
- "score.length == 26"
- "0 <= score[i] <= 10"
- "words[i]", "letters[i]" contain only lowercase English letters.

[--Example 1--]
Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23

[--Example 2--]
Input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27

[--Example 3--]
Input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
