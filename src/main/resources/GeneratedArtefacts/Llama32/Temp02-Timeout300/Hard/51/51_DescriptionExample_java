package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.51;

import java.util.*;

public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        backtrack(result, board, 0);
        return result;
    }

    private void backtrack(List<List<String>> result, char[][] board, int row) {
        if (row == board.length) {
            List<String> solution = new ArrayList<>();
            for (char[] rowBoard : board) {
                StringBuilder sb = new StringBuilder();
                for (char c : rowBoard) {
                    sb.append(c);
                }
                solution.add(sb.toString());
            }
            result.add(solution);
        } else {
            for (int col = 0; col < board.length; col++) {
                if (isValid(board, row, col)) {
                    board[row][col] = 'Q';
                    backtrack(result, board, row + 1);
                    board[row][col] = '.';
                }
            }
        }
    }

    private boolean isValid(char[][] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
            int j = col - (row - i);
            if (j >= 0 && j < board.length) {
                if (board[i][j] == 'Q') return false;
            }
            j = col + (row - i);
            if (j < board.length) {
                if (board[i][j] == 'Q') return false;
            }
        }
        return true;
    }
}