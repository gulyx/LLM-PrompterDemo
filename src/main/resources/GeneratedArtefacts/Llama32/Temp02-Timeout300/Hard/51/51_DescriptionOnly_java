package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.51;

import java.util.*;

public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        backtrack(result, new int[n], board);
        return result;
    }

    private void backtrack(List<List<String>> result, int[] col, char[][] board) {
        if (isSafe(col, board)) {
            List<String> row = new ArrayList<>();
            for (int i = 0; i < board.length; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < board[0].length; j++) {
                    if (col[i] == j) {
                        sb.append("Q");
                    } else {
                        sb.append(".");
                    }
                }
                row.add(sb.toString());
            }
            result.add(row);
        }
        for (int i = 0; i < col.length; i++) {
            if (col[i] > -1 && isSafe(col, board)) {
                col[i]--;
                backtrack(result, col, board);
                col[i]++;
            }
        }
    }

    private boolean isSafe(int[] col, char[][] board) {
        for (int i = 0; i < col.length; i++) {
            if (col[i] == col[0]) return false;
            int row = 0;
            while (row < board.length && col[i] > -1 && col[i] >= col[row]) {
                if (board[row][col[i]] == 'Q') return false;
                row++;
            }
        }
        for (int i = 0; i < col.length; i++) {
            int row = col[0];
            while (row < board.length && col[i] > -1 && col[i] >= col[row]) {
                if (board[row][col[i]] == 'Q') return false;
                row++;
            }
        }
        return true;
    }
}