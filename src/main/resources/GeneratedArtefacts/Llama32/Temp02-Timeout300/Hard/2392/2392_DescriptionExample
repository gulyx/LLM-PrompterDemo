```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    @Test
    public void testExample1() {
        int[][] rowConditions = {{1, 2}, {3, 2}};
        int[][] colConditions = {{2, 1}, {3, 2}};
        int k = 3;
        int[][] result = new int[k][k];
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == 0) {
                    result[i][j] = k - 1;
                } else if (j == 0) {
                    result[i][j] = k - 2;
                } else if (result[i-1][j] != 0 && result[i][j-1] != 0) {
                    result[i][j] = 0;
                } else if (rowConditions[i-1][0] > j || rowConditions[i-1][1] < j) {
                    result[i][j] = k - 1 - i;
                } else if (colConditions[j-1][0] > i || colConditions[j-1][1] < i) {
                    result[i][j] = k - 1 - j;
                }
            }
        }
        assertArrayEquals(result, new int[][]{{3, 0, 0}, {0, 0, 1}, {0, 2, 0}});
    }

    @Test
    public void testExample2() {
        int[][] rowConditions = {{1, 2}, {2, 3}, {3, 1}, {2, 3}};
        int[][] colConditions = {{2, 1}};
        int k = 3;
        int[][] result = new int[k][k];
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == 0) {
                    result[i][j] = k - 1;
                } else if (j == 0) {
                    result[i][j] = k - 2;
                } else if (result[i-1][j] != 0 && result[i][j-1] != 0) {
                    result[i][j] = 0;
                } else if (rowConditions[i-1][0] > j || rowConditions[i-1][1] < j) {
                    result[i][j] = k - 1 - i;
                } else if (colConditions[j-1][0] > i || colConditions[j-1][1] < i) {
                    result[i][j] = k - 1 - j;
                }
            }
        }
        assertArrayEquals(result, new int[][]{{0, 0, 0}});
    }

    @Test
    public void testExample3() {
        int[][] rowConditions = {{1, 2}, {3, 2}};
        int[][] colConditions = {{2, 1}};
        int k = 3;
        int[][] result = new int[k][k];
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == 0) {
                    result[i][j] = k - 1;
                } else if (j == 0) {
                    result[i][j] = k - 2;
                } else if (result[i-1][j] != 0 && result[i][j-1] != 0) {
                    result[i][j] = 0;
                } else if (rowConditions[i-1][0] > j || rowConditions[i-1][1] < j) {
                    result[i][j] = k - 1 - i;
                } else if (colConditions[j-1][0] > i || colConditions[j-1][1] < i) {
                    result[i][j] = k - 1 - j;
                }
            }
        }
        assertArrayEquals(result, new int[][]{{3, 0, 0}, {0, 0, 1}, {0, 2, 0}});
    }

    @Test
    public void testExample4() {
        int[][] rowConditions = {{1, 2}, {2, 3}};
        int[][] colConditions = {{2, 1}};
        int k = 3;
        int[][] result = new int[k][k];
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == 0) {
                    result[i][j] = k - 1;
                } else if (j == 0) {
                    result[i][j] = k - 2;
                } else if (result[i-1][j] != 0 && result[i][j-1] != 0) {
                    result[i][j] = 0;
                } else if (rowConditions[i-1][0] > j || rowConditions[i-1][1] < j) {
                    result[i][j] = k - 1 - i;
                } else if (colConditions[j-1][0] > i || colConditions[j-1][1] < i) {
                    result[i][j] = k - 1 - j;
                }
            }
        }
        assertArrayEquals(result, new int[][]{{3, 0, 0}, {0, 0, 1}});
    }

    @Test
    public void testExample5() {
        int[][] rowConditions = {{1, 2}};
        int[][] colConditions = {{2, 1}};
        int k = 3;
        int[][] result = new int[k][k];
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == 0) {
                    result[i][j] = k - 1;
                } else if (j == 0) {
                    result[i][j] = k - 2;
                } else if (result[i-1][j] != 0 && result[i][j-1] != 0) {
                    result[i][j] = 0;
                } else if (rowConditions[i-1][0] > j || rowConditions[i-1][1] < j) {
                    result[i][j] = k - 1 - i;
                } else if (colConditions[j-1][0] > i || colConditions[j-1][1] < i) {
                    result[i][j] = k - 1 - j;
                }
            }
        }
        assertArrayEquals(result, new int[][]{{3, 0, 0}});
    }

}