```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testMaxCherries() {
        int[][] grid = {{3,1,1},{2,5,1},{1,5,5},{2,1,1}};
        assertEquals(24, maxCherries(grid));
    }

    @Test
    public void testMaxCherries2() {
        int[][] grid = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, maxCherries(grid));
    }

    @Test
    public void testMaxCherries3() {
        int[][] grid = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, maxCherries(grid));
    }

    @Test
    public void testMaxCherries4() {
        int[][] grid = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, maxCherries(grid));
    }

    @Test
    public void testMaxCherries5() {
        int[][] grid = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, maxCherries(grid));
    }
}

public class Solution {
    public int maxCherries(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = grid[i][j];
                } else if (i == 0) {
                    dp[i][j] = dp[i][j - 1] + grid[i][j];
                } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j] + grid[i][j];
                } else {
                    int left = Math.max(dp[i-1][j-1], dp[i-1][j]);
                    int right = Math.max(dp[i-1][j+1], dp[i-1][j]);
                    dp[i][j] = left + grid[i][j] + right;
                }
            }
        }
        return dp[m - 1][n - 1];
    }
}
```