```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.52;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;

public class Solution {

    public int totalNQueens(int n) {
        return solve(n, new boolean[n]);
    }

    private int solve(int n, boolean[] board) {
        if (isSolution(board)) {
            return 1;
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!board[i]) {
                board[i] = true;
                count += solve(n, board);
                board[i] = false;
            }
        }
        return count;
    }

    private boolean isSolution(boolean[] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = i + 1; j < board.length; j++) {
                if (board[i] == board[j]) {
                    return false;
                }
                int rowDiff = Math.abs(i - j);
                int colDiff = i - j;
                if (rowDiff == 0 && colDiff == 0) continue;
                if (rowDiff == colDiff) {
                    if (colDiff < 0) {
                        if (j + colDiff < 0 || i + rowDiff < 0) continue;
                    } else {
                        if (j - colDiff >= board.length || i - rowDiff < 0) continue;
                    }
                } else {
                    if (rowDiff < 0) {
                        if (j + rowDiff < 0 || i + colDiff < 0) continue;
                    } else {
                        if (j - rowDiff >= board.length || i - colDiff < 0) continue;
                    }
                }
                return false;
            }
        }
        return true;
    }

}

public class 52_DescriptionOnly_testsTest {

    @Test
    public void testTotalNQueens_1() {
        Solution solution = new Solution();
        int n = 1;
        int expected = 1;
        assertEquals(expected, solution.totalNQueens(n));
    }

    @Test
    public void testTotalNQueens_2() {
        Solution solution = new Solution();
        int n = 2;
        int expected = 0;
        assertEquals(expected, solution.totalNQueens(n));
    }

    @Test
    public void testTotalNQueens_3() {
        Solution solution = new Solution();
        int n = 3;
        int expected = 0;
        assertEquals(expected, solution.totalNQueens(n));
    }

    @Test
    public void testTotalNQueens_4() {
        Solution solution = new Solution();
        int n = 5;
        int expected = 10;
        assertEquals(expected, solution.totalNQueens(n));
    }

    @Test
    public void testTotalNQueens_9() {
        Solution solution = new Solution();
        int n = 9;
        int expected = 0;
        assertEquals(expected, solution.totalNQueens(n));
    }
}
```