package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1368;

public class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int cost = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == m - 1 && cur[1] == n - 1) return cost;
            visited[cur[0]][cur[1]] = true;
            for (int i = 0; i < 4; i++) {
                int dx = 0, dy = 0;
                switch (i) {
                    case 0:
                        dx = 1;
                        break;
                    case 1:
                        dx = -1;
                        break;
                    case 2:
                        dy = 1;
                        break;
                    default:
                        dy = -1;
                        break;
                }
                int nx = cur[0] + dx, ny = cur[1] + dy;
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny]) {
                    switch (grid[nx][ny]) {
                        case 1:
                            queue.offer(new int[]{nx, ny, cost + 1});
                            break;
                        case 2:
                            if (!visited[nx - 1][ny]) {
                                queue.offer(new int[]{nx - 1, ny, cost + 1});
                            }
                            break;
                        case 3:
                            if (!visited[nx][ny + 1]) {
                                queue.offer(new int[]{nx, ny + 1, cost + 1});
                            }
                            break;
                        default:
                            if (!visited[nx - 1][ny] && !visited[nx][ny + 1]) {
                                queue.offer(new int[]{nx - 1, ny, cost + 1});
                                queue.offer(new int[]{nx, ny + 1, cost + 1});
                            }
                            break;
                    }
                }
            }
        }
        return -1;
    }
}