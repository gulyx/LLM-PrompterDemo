package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1368;

public class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][][] dp = new int[m][n][2];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j][0] = grid[i][j];
                } else if (i == 0) {
                    dp[i][j][1] = dp[i][j - 1][1] + grid[i][j];
                } else if (j == 0) {
                    dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];
                } else {
                    int costToRight = dp[i][j - 1][1] + grid[i][j];
                    int costToLeft = dp[i][j - 1][0] + grid[i][j];
                    int costDown = dp[i + 1][j][1] + grid[i][j];
                    int costUp = dp[i - 1][j][0] + grid[i][j];

                    if (costToRight < costToLeft && costToRight < costDown && costToRight < costUp) {
                        dp[i][j][0] = costToRight;
                    } else if (costToLeft < costToRight && costToLeft < costDown && costToLeft < costUp) {
                        dp[i][j][1] = costToLeft;
                    } else if (costDown < costToRight && costDown < costToLeft && costDown < costUp) {
                        dp[i][j][1] = costDown;
                    } else if (costUp < costToRight && costUp < costToLeft && costUp < costDown) {
                        dp[i][j][0] = costUp;
                    }
                }

                visited[i][j] = true;
            }
        }

        int minCost = Math.min(dp[m - 1][n - 1][0], dp[m - 1][n - 1][1]);
        return minCost == Integer.MAX_VALUE ? -1 : minCost;
    }
}