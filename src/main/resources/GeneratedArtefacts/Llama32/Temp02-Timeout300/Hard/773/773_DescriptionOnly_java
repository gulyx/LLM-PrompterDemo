package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.773;

import java.util.*;

public class Solution {
    public int slidingPuzzle(int[][] board) {
        Set<String> visited = new HashSet<>();
        Queue<int[]> queue = new LinkedList<>();

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 0) {
                    int[] current = {i, j};
                    queue.offer(current);
                    visited.add(toString(current));
                }
            }
        }

        while (!queue.isEmpty()) {
            int[] currentState = queue.poll();
            int i = currentState[0];
            int j = currentState[1];

            if (board[i][j] == 5 && board[(i + 1) % 2][j] == 1 &&
                    board[(i - 1 + 2) % 2][j] == 2 &&
                    board[(i + 2) % 2][j] == 3 &&
                    board[(i - 2 + 4) % 2][j] == 4) {
                return queue.size();
            }

            int[] directions = {0, 1, 2, 3};
            for (int k : directions) {
                if (k == 0 && j > 0) {
                    int[] next = {i, j - 1};
                    if (!visited.contains(toString(next))) {
                        queue.offer(next);
                        visited.add(toString(next));
                    }
                } else if (k == 1 && i < 1) {
                    int[] next = {i + 1, j};
                    if (!visited.contains(toString(next))) {
                        queue.offer(next);
                        visited.add(toString(next));
                    }
                } else if (k == 2 && j < 2) {
                    int[] next = {i, j + 1};
                    if (!visited.contains(toString(next))) {
                        queue.offer(next);
                        visited.add(toString(next));
                    }
                } else if (k == 3 && i > 0) {
                    int[] next = {i - 1, j};
                    if (!visited.contains(toString(next))) {
                        queue.offer(next);
                        visited.add(toString(next));
                    }
                }
            }
        }

        return -1;
    }

    private String toString(int[] arr) {
        StringBuilder sb = new StringBuilder();
        for (int i : arr) {
            sb.append(i).append(",");
        }
        return sb.toString().substring(0, sb.length() - 1);
    }
}