package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.773;

import java.util.*;

public class Solution {
    public int slidingPuzzle(int[][] board) {
        Set<String> visited = new HashSet<>();
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        visited.add(Arrays.toString(board[0]));
        visited.add(Arrays.toString(board[1]));

        while (!queue.isEmpty()) {
            int[] state = queue.poll();
            int moves = state[0];
            int[][] boardCopy = copyBoard(state[1]);

            if (isSolved(boardCopy)) {
                return moves;
            }

            for (int i = 0; i < 9; i++) {
                int[] nextState = getNextState(i, boardCopy);
                if (!visited.contains(Arrays.toString(nextState[1]))) {
                    queue.add(new int[]{moves + 1, nextState[1]});
                    visited.add(Arrays.toString(nextState[1]));
                }
            }
        }

        return -1;
    }

    private boolean isSolved(int[][] board) {
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 0 && board[i][j] != i * 3 + j + 1) {
                    return false;
                }
            }
        }

        return true;
    }

    private int[][] copyBoard(int[][] board) {
        int[][] boardCopy = new int[2][3];
        for (int i = 0; i < 2; i++) {
            System.arraycopy(board[i], 0, boardCopy[i], 0, 3);
        }
        return boardCopy;
    }

    private int[] getNextState(int index, int[][] board) {
        int zeroIndex = -1;

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 0) {
                    zeroIndex = i * 3 + j;
                    break;
                }
            }

            if (zeroIndex != -1) {
                break;
            }
        }

        int[] nextZeroIndex = new int[]{-1, -1};
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                if ((i + 1) * 3 + j == zeroIndex || i * 3 + (j + 1) % 3 == zeroIndex) {
                    nextZeroIndex[0] = i;
                    nextZeroIndex[1] = j;
                    break;
                }
            }

            if (nextZeroIndex[0] != -1) {
                break;
            }
        }

        int[] nextState = new int[]{zeroIndex, nextZeroIndex[0] * 3 + nextZeroIndex[1]};
        return nextState;
    }
}