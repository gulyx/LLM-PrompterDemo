package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 773_DescriptionOnlyTest {

    @Test
    public void test_1() {
        int[][] board = {{1,2,3},{4,5,0}};
        assertEquals(0, minMovesToTransform(board));
    }

    @Test
    public void test_2() {
        int[][] board = {{5,1,9,11},{2,6,3,8},{4,7,10,12},{8,13,15,14}};
        assertEquals(-1, minMovesToTransform(board));
    }

    @Test
    public void test_3() {
        int[][] board = {{0,2,3},{4,5,1}};
        assertEquals(6, minMovesToTransform(board));
    }

    @Test
    public void test_4() {
        int[][] board = {{8,9,1,2},{3,1,4,7},{6,4,2,5},{5,3,9,0}};
        assertEquals(-1, minMovesToTransform(board));
    }

    @Test
    public void test_5() {
        int[][] board = {{7,8,9,11},{2,1,10,12},{4,6,15,14},{8,13,3,5}};
        assertEquals(11, minMovesToTransform(board));
    }
}

public class Solution {

    private static final int[] DIRECTIONS = {0, 1, -1, 0, 1, -1, -1, 1};

    public int minMovesToTransform(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        boolean visited[][] = new boolean[rows][cols];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        visited[0][0] = true;

        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            if (board[curr[0]][curr[1]] == 0) {
                return 0;
            }
            for (int i = 0; i < DIRECTIONS.length; i += 2) {
                int row = curr[0] + DIRECTIONS[i];
                int col = curr[1] + DIRECTIONS[i+1];
                if (row >= 0 && row < rows && col >= 0 && col < cols && !visited[row][col]) {
                    queue.add(new int[]{row, col});
                    visited[row][col] = true;
                    board[curr[0]][curr[1]] = board[row][col];
                    board[row][col] = 0;
                }
            }
        }

        return -1;
    }
}