```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.*;

public class DescriptionOnlyTest {

    @Test
    public void test_0() {
        int[][] grid = {{1, 2}, {3, 4}};
        assertEquals(6, numUniquePaths(grid));
    }

    @Test
    public void test_1() {
        int[][] grid = {{1, -1, 2}, {-1, 1, -1}, {1, 2, -1}};
        assertEquals(0, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};
        assertEquals(0, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        assertEquals(36, numUniquePaths(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{1, -1, 2}, {-1, 1, -1}, {1, -1, 2}};
        assertEquals(0, numUniquePaths(grid));
    }
}

public class Solution {

    private static final int[][] DIRECTIONS = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    public int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        Set<String> set = new HashSet<>();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            String key = current[0] + "," + current[1];
            if (grid[current[0]][current[1]] == 2 && !set.contains(key)) {
                set.add(key);
                return set.size() - 1;
            }

            for (int[] direction : DIRECTIONS) {
                int x = current[0] + direction[0];
                int y = current[1] + direction[1];

                if (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && grid[x][y] != -1) {
                    queue.offer(new int[]{x, y});
                    visited[x][y] = true;
                }
            }
        }

        return 0;
    }
}
```