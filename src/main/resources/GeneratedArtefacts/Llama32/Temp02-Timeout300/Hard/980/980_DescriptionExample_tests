```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class 980_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,2,-1}};
        assertEquals(2, numUniquePaths(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,0,2}};
        assertEquals(4, numUniquePaths(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{0,1},{2,0}};
        assertEquals(0, numUniquePaths(grid));
    }
}

public class Solution {

    private static final int[][] DIRECTIONS = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    public int numUniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, 0, 0, visited);
    }

    private int dfs(int[][] grid, int i, int j, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == -1)
            return 0;
        if (grid[i][j] == 2)
            return 1;
        visited[i][j] = true;
        int count = 0;
        for (int[] dir : DIRECTIONS) {
            count += dfs(grid, i + dir[0], j + dir[1], visited);
        }
        visited[i][j] = false;
        return count;
    }
}
```