package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnlyTest {

    public static void main(String[] args) {
        DescriptionOnlyTest test = new DescriptionOnlyTest();
        // Test cases
        System.out.println(test.recoverFromPreorder("1--2--3--4--5"));
        System.out.println(test.recoverFromPreorder("1--2--3--4-5"));
        System.out.println(test.recoverFromPreorder("1--2---3--4--5"));
        System.out.println(test.recoverFromPreorder("1--2---3--4-5"));
        System.out.println(test.recoverFromPreorder("1--2---3--4---5"));
    }

    public TreeNode recoverFromPreorder(String traversal) {
        List<String> nodes = new ArrayList<>();
        String current = "";
        for (char c : traversal.toCharArray()) {
            if (c == '-') {
                nodes.add(current);
                current = "";
            } else {
                current += c;
            }
        }
        nodes.add(current);

        return recover(nodes, 0);
    }

    private TreeNode recover(List<String> nodes, int index) {
        String node = nodes.get(index);
        int depth = node.length() - node.replace("-", "").length();
        TreeNode root = new TreeNode(Integer.parseInt(node.replace("-", "")));
        if (index + 1 < nodes.size()) {
            root.left = recover(nodes, index + 1);
        }
        if (index + depth + 1 < nodes.size()) {
            root.right = recover(nodes, index + depth + 1);
        }
        return root;
    }

}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}