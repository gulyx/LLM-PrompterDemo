package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1284;

public class Solution {
    public int minFlips(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;
        boolean[][] visited = new boolean[rows][cols];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        visited[0][0] = true;
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cur = queue.poll();
                if (mat[cur[0]][cur[1]] == 0) continue;
                mat[cur[0]][cur[1]] = 0;
                steps++;
                if (cur[0] - 1 >= 0 && !visited[cur[0] - 1][cur[1]]) {
                    queue.offer(new int[]{cur[0] - 1, cur[1]});
                    visited[cur[0] - 1][cur[1]] = true;
                }
                if (cur[0] + 1 < rows && !visited[cur[0] + 1][cur[1]]) {
                    queue.offer(new int[]{cur[0] + 1, cur[1]});
                    visited[cur[0] + 1][cur[1]] = true;
                }
                if (cur[1] - 1 >= 0 && !visited[cur[0]][cur[1] - 1]) {
                    queue.offer(new int[]{cur[0], cur[1] - 1});
                    visited[cur[0]][cur[1] - 1] = true;
                }
                if (cur[1] + 1 < cols && !visited[cur[0]][cur[1] + 1]) {
                    queue.offer(new int[]{cur[0], cur[1] + 1});
                    visited[cur[0]][cur[1] + 1] = true;
                }
            }
        }
        return steps == rows * cols ? 0 : -1;
    }
}