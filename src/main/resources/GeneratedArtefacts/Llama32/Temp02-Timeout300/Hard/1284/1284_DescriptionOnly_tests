package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1284_DescriptionOnlyTest {

    @Test
    public void testFlipAll() {
        int[][] mat = {{1,0},{0,0}};
        assertEquals(2, flipAll(mat));
    }

    @Test
    public void testFlipAllZero() {
        int[][] mat = {{0,0},{0,0}};
        assertEquals(0, flipAll(mat));
    }

    @Test
    public void testNoFlip() {
        int[][] mat = {{1,1},{1,1}};
        assertEquals(-1, flipAll(mat));
    }

    @Test
    public void testOneFlip() {
        int[][] mat = {{1,0},{0,0}};
        assertEquals(2, flipAll(mat));
    }

    @Test
    public void testTwoFlips() {
        int[][] mat = {{1,0},{0,1}};
        assertEquals(3, flipAll(mat));
    }
}

int flipAll(int[][] mat) {
    boolean[][] visited = new boolean[mat.length][mat[0].length];
    return helper(mat, 0, 0, visited);
}

int helper(int[][] mat, int i, int j, boolean[][] visited) {
    if (i < 0 || i >= mat.length || j < 0 || j >= mat[0].length || visited[i][j] || mat[i][j] == 0)
        return 0;
    visited[i][j] = true;
    int steps = helper(mat, i-1, j, visited) + 1;
    if (mat[i][j] == 1) {
        mat[i][j] = 0;
        steps += flipNeighbors(mat, i, j, visited);
    }
    return steps;
}

int flipNeighbors(int[][] mat, int i, int j, boolean[][] visited) {
    int count = 0;
    if (i > 0 && !visited[i-1][j] && mat[i-1][j] == 1)
        count++;
    if (i < mat.length - 1 && !visited[i+1][j] && mat[i+1][j] == 1)
        count++;
    if (j > 0 && !visited[i][j-1] && mat[i][j-1] == 1)
        count++;
    if (j < mat[0].length - 1 && !visited[i][j+1] && mat[i][j+1] == 1)
        count++;
    return count;
}