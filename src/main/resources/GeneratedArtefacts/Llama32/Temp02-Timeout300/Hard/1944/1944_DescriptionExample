```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1944_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] heights = {10,6,8,5,11,9};
        int[] answer = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], heights[j-1])) {
                    count++;
                } else {
                    break;
                }
            }
            answer[i] = count;
        }
        assertArrayEquals(new int[]{3,1,2,1,1,0}, answer);
    }

    @Test
    public void test_2() {
        int[] heights = {5,1,2,3,10};
        int[] answer = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], heights[j-1])) {
                    count++;
                } else {
                    break;
                }
            }
            answer[i] = count;
        }
        assertArrayEquals(new int[]{4,1,1,1,0}, answer);
    }

    @Test
    public void test_3() {
        int[] heights = {10,6,8,5,11,9};
        int[] answer = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], heights[j-1])) {
                    count++;
                } else {
                    break;
                }
            }
            answer[i] = count;
        }
        assertArrayEquals(new int[]{3,1,2,1,1,0}, answer);
    }

    @Test
    public void test_4() {
        int[] heights = {5,1,2,3,10};
        int[] answer = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], heights[j-1])) {
                    count++;
                } else {
                    break;
                }
            }
            answer[i] = count;
        }
        assertArrayEquals(new int[]{4,1,1,1,0}, answer);
    }

    @Test
    public void test_5() {
        int[] heights = {10,6,8,5,11,9};
        int[] answer = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], heights[j-1])) {
                    count++;
                } else {
                    break;
                }
            }
            answer[i] = count;
        }
        assertArrayEquals(new int[]{3,1,2,1,1,0}, answer);
    }

}
```