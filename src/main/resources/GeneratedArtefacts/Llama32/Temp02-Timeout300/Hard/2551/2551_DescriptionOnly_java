package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2551;

import java.util.*;

public class Solution {
    public int minCost(int[] weights, int k) {
        int n = weights.length;
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Long.MAX_VALUE);
        }
        dp[0][0] = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                if (i == 1) {
                    dp[i][j] = weights[i - 1];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1] + weights[i - 1]);
                }
            }
        }

        long minScore = Long.MAX_VALUE;
        for (int i = 0; i < k; i++) {
            minScore = Math.min(minScore, dp[n][i]);
        }

        int maxScore = 0;
        for (int i = n - 1; i >= 0; i--) {
            long score = 0;
            for (int j = i + 1; j <= n; j++) {
                score += weights[j - 1];
                if (score > maxScore) {
                    maxScore = score;
                }
            }
        }

        return Math.abs(maxScore - minScore);
    }
}