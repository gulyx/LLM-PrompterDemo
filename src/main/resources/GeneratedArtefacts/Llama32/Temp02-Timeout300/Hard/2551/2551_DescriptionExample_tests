```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testMaxMinScore() {
        int[] weights = {1, 3, 5, 1};
        int k = 2;
        assertEquals(4, maxMinScore(weights, k));
    }

    @Test
    public void testMaxMinScore2() {
        int[] weights = {1, 3};
        int k = 2;
        assertEquals(0, maxMinScore(weights, k));
    }

    @Test
    public void testMaxMinScore3() {
        int[] weights = {10, 20, 30};
        int k = 3;
        assertEquals(60, maxMinScore(weights, k));
    }

    @Test
    public void testMaxMinScore4() {
        int[] weights = {1, 2, 3, 4, 5};
        int k = 2;
        assertEquals(12, maxMinScore(weights, k));
    }

    @Test
    public void testMaxMinScore5() {
        int[] weights = {1000000, 2000000, 3000000};
        int k = 3;
        assertEquals(6000000, maxMinScore(weights, k));
    }
}

public class Solution {

    public int maxMinScore(int[] weights, int k) {
        int n = weights.length;
        long[][] dp = new long[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (i == 0) {
                    dp[i][j] = Long.MAX_VALUE;
                } else if (j == 1) {
                    dp[i][j] = weights[i - 1];
                } else {
                    long minScore = Long.MAX_VALUE;
                    for (int l = i - 1; l >= 0; l--) {
                        int r = i - 1;
                        while (r < n - 1 && weights[r + 1] <= weights[l]) {
                            r++;
                        }
                        if (l == 0) {
                            minScore = Math.min(minScore, dp[l][j - 2]);
                        } else {
                            minScore = Math.min(minScore, dp[l - 1][j - 2] + weights[i - 1] + weights[r]);
                        }
                    }
                    dp[i][j] = minScore;
                }
            }
        }
        long maxScore = Long.MIN_VALUE;
        for (int i = n; i >= 0; i--) {
            if (i == 0) {
                continue;
            }
            for (int j = k; j > 0; j--) {
                maxScore = Math.max(maxScore, dp[i][j]);
            }
        }
        return (int) (maxScore - Long.MIN_VALUE);
    }
}
```