package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;

public class 2391_DescriptionOnly {

    @Test
    public void test_0() {
        String[] garbage = {"MPG", "PG", "MPG"};
        int[] travel = {2, 3, 4};
        assertEquals(12, minCost(garbage, travel));
    }

    @Test
    public void test_1() {
        String[] garbage = {"GGG", "PPP", "MMM"};
        int[] travel = {1, 1, 1};
        assertEquals(6, minCost(garbage, travel));
    }

    @Test
    public void test_2() {
        String[] garbage = {"MPM", "PGG", "MPG"};
        int[] travel = {3, 4, 5};
        assertEquals(15, minCost(garbage, travel));
    }

    @Test
    public void test_3() {
        String[] garbage = {"GGG", "PPP", "MMM"};
        int[] travel = {1, 2, 3};
        assertEquals(9, minCost(garbage, travel));
    }

    @Test
    public void test_4() {
        String[] garbage = {"MPM", "PGG", "MPG"};
        int[] travel = {5, 6, 7};
        assertEquals(21, minCost(garbage, travel));
    }
}

public class Solution {

    public int minCost(String[] garbage, int[] travel) {
        int n = garbage.length;
        int[][] dp = new int[3][n];
        for (int i = 0; i < 3; i++) {
            dp[i][0] = 0;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                int cost = travel[i - 1];
                if (garbage[i].charAt(j) == 'M') {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                } else if (garbage[i].charAt(j) == 'P') {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                } else {
                    dp[j][i] = Math.min(dp[(j + 1) % 3][i - 1], dp[(j + 2) % 3][i - 1]) + cost;
                }
            }
        }
        int minCost = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            minCost = Math.min(minCost, dp[i][n - 1]);
        }
        return minCost;
    }

}