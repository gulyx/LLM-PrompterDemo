```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void testMaxScore() {
        int[][] grid = {{0, 0, 1, 1}, {1, 0, 1, 0}, {1, 1, 0, 0}};
        assertEquals(39, maxScore(grid));
    }

    @Test
    public void testSingleRow() {
        int[][] grid = {{0}};
        assertEquals(1, maxScore(grid));
    }

    @Test
    public void testAllOnes() {
        int[][] grid = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        assertEquals(9, maxScore(grid));
    }

    @Test
    public void testAllZeros() {
        int[][] grid = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
        assertEquals(0, maxScore(grid));
    }

    @Test
    public void testMixed() {
        int[][] grid = {{1, 0, 1, 0}, {0, 1, 0, 1}, {1, 1, 0, 0}};
        assertEquals(11, maxScore(grid));
    }
}

public class Solution {

    public int maxScore(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        boolean[] rowSelected = new boolean[rows];
        boolean[] colSelected = new boolean[cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    rowSelected[i] = true;
                    colSelected[j] = true;
                }
            }
        }

        int score = 0;

        for (int i = 0; i < rows; i++) {
            if (rowSelected[i]) {
                score += Integer.parseInt(Integer.toBinaryString(grid[i].length - 1), 2);
            }
        }

        for (int j = 0; j < cols; j++) {
            if (colSelected[j]) {
                score += Integer.parseInt(Integer.toBinaryString(rows - 1).substring(1, rows), 2);
            }
        }

        return score;
    }
}
```