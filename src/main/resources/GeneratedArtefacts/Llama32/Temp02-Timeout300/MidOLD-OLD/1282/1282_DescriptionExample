```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionExample {

    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        Map<Integer, List<Integer>> groups = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            if (!groups.containsKey(groupSizes[i])) {
                groups.put(groupSizes[i], new ArrayList<>());
            }
            groups.get(groupSizes[i]).add(i);
        }

        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> group : groups.values()) {
            int size = group.size();
            for (int i = 0; i < size; i += size) {
                result.add(group.subList(i, i + size));
            }
        }
        return result;
    }

    @Test
    public void testGroupThePeople() {
        int[] groupSizes = {3, 3, 3, 3, 3, 1, 3};
        List<List<Integer>> expected = Arrays.asList(Arrays.asList(5), Arrays.asList(0, 1, 2), Arrays.asList(3, 4, 6));
        assertEquals(expected, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupThePeople_2() {
        int[] groupSizes = {2, 1, 3, 3, 3, 2};
        List<List<Integer>> expected = Arrays.asList(Arrays.asList(1), Arrays.asList(0, 5), Arrays.asList(2, 3, 4));
        assertEquals(expected, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupThePeople_3() {
        int[] groupSizes = {1, 1, 1, 1};
        List<List<Integer>> expected = Arrays.asList(Arrays.asList(0), Arrays.asList(1), Arrays.asList(2), Arrays.asList(3));
        assertEquals(expected, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupThePeople_4() {
        int[] groupSizes = {5};
        List<List<Integer>> expected = Arrays.asList(Arrays.asList(0, 1, 2, 3, 4));
        assertEquals(expected, groupThePeople(groupSizes));
    }

    @Test
    public void testGroupThePeople_5() {
        int[] groupSizes = {};
        List<List<Integer>> expected = new ArrayList<>();
        assertEquals(expected, groupThePeople(groupSizes));
    }
}
```