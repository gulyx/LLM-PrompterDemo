package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2044_DescriptionExample {

    @Test
    public void test_1() {
        int[] nums = {3,1};
        int expected = 2;
        assertEquals(expected, maxBitwiseOr(nums));
    }

    @Test
    public void test_2() {
        int[] nums = {2,2,2};
        int expected = 7;
        assertEquals(expected, maxBitwiseOr(nums));
    }

    @Test
    public void test_3() {
        int[] nums = {3,2,1,5};
        int expected = 6;
        assertEquals(expected, maxBitwiseOr(nums));
    }

    @Test
    public void test_4() {
        int[] nums = {0,1,2,3};
        int expected = 7;
        assertEquals(expected, maxBitwiseOr(nums));
    }

    @Test
    public void test_5() {
        int[] nums = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
        int expected = 1023;
        assertEquals(expected, maxBitwiseOr(nums));
    }
}

public class Solution {
    public int maxBitwiseOr(int[] nums) {
        int n = nums.length;
        boolean[] dp = new boolean[1 << n];
        dp[0] = true;

        for (int num : nums) {
            for (int mask = (1 << n) - 1; mask >= 0; --mask) {
                if ((num & mask) == 0 || !dp[mask]) continue;
                int newMask = mask | (1 << nums.length - 1 - Integer.numberOfTrailingZeros(num));
                dp[newMask] = true;
            }
        }

        int maxOr = 0;
        for (int i = (1 << n) - 1; i >= 0; --i) {
            if (dp[i]) {
                maxOr |= i;
            }
        }

        return maxOr;
    }
}