```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class2415_DescriptionExample {

    public TreeNode reverseOddLevel(TreeNode root) {
        if (root == null) return null;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if ((level & 1) == 1) {
                    TreeNode temp = node.val;
                    node.val = node.left != null ? node.left.val : 0;
                    node.left = node.right != null ? node.right : null;
                    node.right = temp;
                }
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }
            level++;
        }
        return root;
    }

    @Test
    public void testReverseOddLevel() {
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(3);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(8);
        root.left.right = new TreeNode(13);
        root.right.left = new TreeNode(21);
        root.right.right = new TreeNode(34);

        TreeNode reversedRoot = reverseOddLevel(root);
        assertEquals(2, reversedRoot.val);
        assertEquals(5, reversedRoot.left.val);
        assertEquals(3, reversedRoot.right.val);
        assertEquals(8, reversedRoot.left.left.val);
        assertEquals(13, reversedRoot.left.right.val);
        assertEquals(21, reversedRoot.right.left.val);
        assertEquals(34, reversedRoot.right.right.val);
    }

    @Test
    public void testReverseOddLevel2() {
        TreeNode root = new TreeNode(7);
        root.left = new TreeNode(13);
        root.right = new TreeNode(11);

        TreeNode reversedRoot = reverseOddLevel(root);
        assertEquals(7, reversedRoot.val);
        assertEquals(11, reversedRoot.left.val);
        assertEquals(13, reversedRoot.right.val);
    }

    @Test
    public void testReverseOddLevel3() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(0);
        root.right.left = new TreeNode(0);
        root.right.right = new TreeNode(1);
        root.right.right.left = new TreeNode(1);
        root.right.right.right = new TreeNode(2);

        TreeNode reversedRoot = reverseOddLevel(root);
        assertEquals(0, reversedRoot.val);
        assertEquals(2, reversedRoot.left.val);
        assertEquals(1, reversedRoot.right.val);
        assertEquals(0, reversedRoot.left.left.val);
        assertEquals(0, reversedRoot.left.right.val);
        assertEquals(0, reversedRoot.right.left.val);
        assertEquals(1, reversedRoot.right.right.val);
        assertEquals(1, reversedRoot.right.right.left.val);
        assertEquals(2, reversedRoot.right.right.right.val);
    }
}
```