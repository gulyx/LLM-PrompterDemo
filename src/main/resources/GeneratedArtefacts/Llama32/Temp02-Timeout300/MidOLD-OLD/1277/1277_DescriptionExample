```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void testCountSquares() {
        int[][] matrix = {{0,1,1,1},{1,1,1,1},{0,1,1,1}};
        assertEquals(15, countSquares(matrix));
    }

    @Test
    public void testCountSquares2() {
        int[][] matrix = {{1,0,1},{1,1,0},{1,1,0}};
        assertEquals(7, countSquares(matrix));
    }

    @Test
    public void testCountSquares3() {
        int[][] matrix = {{1,1,1,1},{1,1,1,1},{1,1,1,1}};
        assertEquals(9, countSquares(matrix));
    }

    @Test
    public void testCountSquares4() {
        int[][] matrix = {{0,0,0,0},{0,0,0,0},{0,0,0,0}};
        assertEquals(0, countSquares(matrix));
    }

    @Test
    public void testCountSquares5() {
        int[][] matrix = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
        assertEquals(16, countSquares(matrix));
    }
}

public class Solution {

    public int countSquares(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 1) {
                    if (i == 0 || j == 0) dp[i][j] = 1;
                    else {
                        int min = Math.min(dp[i-1][j], dp[i][j-1]);
                        dp[i][j] = matrix[i][j] + min;
                    }
                }
            }
        }
        int count = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (dp[i][j] == 1) count++;
            }
        }
        return count;
    }
}
```