package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1861_DescriptionOnly {

    @Test
    public void test_0() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", ".", "."}};
        char[][] expected = {{".", ".*"}, {".#","."}};

        assertArrayEquals(expected, rotateTheBox(boxGrid));
    }

    @Test
    public void test_1() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", ".", "."}};
        char[][] expected = {{"#", ".*"}, {".#","."}};

        assertArrayEquals(expected, rotateTheBox(boxGrid));
    }

    @Test
    public void test_2() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", ".", "."}};
        char[][] expected = {{"#", ".*"}};

        assertArrayEquals(expected, rotateTheBox(boxGrid));
    }

    @Test
    public void test_3() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", ".", "."}};
        char[][] expected = {".#","."};

        assertArrayEquals(expected, rotateTheBox(boxGrid));
    }

    @Test
    public void test_4() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", ".", "."}};
        char[][] expected = {".#",".*"};

        assertArrayEquals(expected, rotateTheBox(boxGrid));
    }

    public char[][] rotateTheBox(char[][] boxGrid) {
        int rows = boxGrid.length;
        int cols = boxGrid[0].length;
        char[][] rotated = new char[cols][rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                rotated[j][rows - i - 1] = boxGrid[i][j];
            }
        }

        return rotated;
    }
}