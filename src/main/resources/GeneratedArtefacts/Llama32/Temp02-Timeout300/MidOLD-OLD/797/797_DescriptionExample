```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.*;

public class DescriptionExample {

    @Test
    public void testAllPaths() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(Arrays.asList(1, 2));
        graph.add(Arrays.asList(3));
        graph.add(Arrays.asList(3));
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph);
        assertEquals(Arrays.asList(Arrays.asList(0, 1, 3), Arrays.asList(0, 2, 3)), result);
    }

    @Test
    public void testAllPathsWithMultiplePaths() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(Arrays.asList(4, 3, 1));
        graph.add(Arrays.asList(3, 2, 4));
        graph.add(Arrays.asList(3));
        graph.add(Arrays.asList(4));
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph);
        assertEquals(Arrays.asList(
                Arrays.asList(0, 4),
                Arrays.asList(0, 3, 4),
                Arrays.asList(0, 1, 3, 4),
                Arrays.asList(0, 1, 2, 3, 4)
        ), result);
    }

    @Test
    public void testEmptyGraph() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testSingleNodeGraph() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(Arrays.asList(0));

        List<List<Integer>> result = allPaths(graph);
        assertEquals(Collections.singletonList(Arrays.asList(0)), result);
    }

    @Test
    public void testGraphWithNoEdges() {
        List<List<Integer>> graph = new ArrayList<>();
        graph.add(new ArrayList<>());

        List<List<Integer>> result = allPaths(graph);
        assertTrue(result.isEmpty());
    }
}
```