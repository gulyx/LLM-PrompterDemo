```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testReverseDigits() {
        int[] nums = {1, 13, 10, 12, 31};
        assertEquals(6, reverseDigits(nums));
    }

    @Test
    public void testReverseDigitsSameNumber() {
        int[] nums = {2, 2, 2};
        assertEquals(1, reverseDigits(nums));
    }

    @Test
    public void testReverseDigitsSingleDigit() {
        int[] nums = {5};
        assertEquals(1, reverseDigits(nums));
    }

    @Test
    public void testReverseDigitsLargeNumber() {
        int[] nums = {1000, 2000, 3000};
        assertEquals(3, reverseDigits(nums));
    }

    @Test
    public void testReverseDigitsEmptyArray() {
        int[] nums = {};
        assertEquals(0, reverseDigits(nums));
    }
}

public class Solution {

    public int reverseDigits(int[] nums) {
        int count = 0;
        for (int num : nums) {
            String strNum = Integer.toString(num);
            StringBuilder sb = new StringBuilder(strNum).reverse();
            int reversedNum = Integer.parseInt(sb.toString());
            if (!contains(nums, reversedNum)) {
                nums = addElement(nums, reversedNum);
                count++;
            }
        }
        return count;
    }

    private boolean contains(int[] nums, int num) {
        for (int n : nums) {
            if (n == num) {
                return true;
            }
        }
        return false;
    }

    private int[] addElement(int[] nums, int num) {
        int[] newNums = new int[nums.length + 1];
        System.arraycopy(nums, 0, newNums, 0, nums.length);
        newNums[nums.length] = num;
        return newNums;
    }
}
```