package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testConvertBSTtoGreaterTree() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(1);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(2);
        root.right.left = new TreeNode(5);
        root.right.right = new TreeNode(7);

        TreeNode expectedRoot = new TreeNode(30);
        expectedRoot.left = new TreeNode(36);
        expectedRoot.right = new TreeNode(21);
        expectedRoot.left.left = new TreeNode(36);
        expectedRoot.left.right = new TreeNode(35);
        expectedRoot.left.left.left = new TreeNode(26);
        expectedRoot.left.left.right = new TreeNode(15);

        convertBSTToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertBSTtoGreaterTreeWithEmptyLeft() {
        TreeNode root = new TreeNode(4);
        root.right = new TreeNode(6);
        root.right.left = new TreeNode(5);
        root.right.right = new TreeNode(7);

        TreeNode expectedRoot = new TreeNode(30);
        expectedRoot.right = new TreeNode(21);
        expectedRoot.right.left = new TreeNode(36);
        expectedRoot.right.right = new TreeNode(15);

        convertBSTToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertBSTtoGreaterTreeWithEmptyRight() {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(1);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(2);

        TreeNode expectedRoot = new TreeNode(30);
        expectedRoot.left = new TreeNode(36);
        expectedRoot.left.left = new TreeNode(26);
        expectedRoot.left.right = new TreeNode(15);

        convertBSTToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertBSTtoGreaterTreeWithSingleNode() {
        TreeNode root = new TreeNode(0);

        TreeNode expectedRoot = new TreeNode(1);

        convertBSTToGreaterTree(root, expectedRoot);
    }

    @Test
    public void testConvertBSTtoGreaterTreeWithTwoNodes() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);

        TreeNode expectedRoot = new TreeNode(1);
        expectedRoot.left = new TreeNode(1);

        convertBSTToGreaterTree(root, expectedRoot);
    }

    private void convertBSTToGreaterTree(TreeNode root, TreeNode expectedRoot) {
        if (root == null) {
            return;
        }
        int sum = 0;
        while (root.right != null) {
            sum += root.right.val;
            root.right = root.right.right;
        }
        root.val += sum;
        convertBSTToGreaterTree(root.left, expectedRoot);
        convertBSTToGreaterTree(root.right, expectedRoot);
    }

}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }
}