```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class 2482_DescriptionExampleTest {

    @Test
    public void testDiffMatrix() {
        int[][] grid = {{0,1,1},{1,0,1},{0,0,1}};
        int[][] expected = {{0,0,4},{0,0,4},{-2,-2,2}};
        assertArrayEquals(expected, diffMatrix(grid));
    }

    @Test
    public void testDiffMatrix_2() {
        int[][] grid = {{1,1,1},{1,1,1}};
        int[][] expected = {{5,5,5},{5,5,5}};
        assertArrayEquals(expected, diffMatrix(grid));
    }

    @Test
    public void testDiffMatrix_3() {
        int[][] grid = {{0,0,0},{0,0,0},{0,0,0}};
        int[][] expected = {{0,0,0},{0,0,0},{0,0,0}};
        assertArrayEquals(expected, diffMatrix(grid));
    }

    @Test
    public void testDiffMatrix_4() {
        int[][] grid = {{1,0,0},{0,1,0},{0,0,1}};
        int[][] expected = {{2,1,1},{1,2,1},{1,1,2}};
        assertArrayEquals(expected, diffMatrix(grid));
    }

    @Test
    public void testDiffMatrix_5() {
        int[][] grid = {{0,1},{1,0}};
        int[][] expected = {{1,1},{1,1}};
        assertArrayEquals(expected, diffMatrix(grid));
    }

    private int[][] diffMatrix(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] diff = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            int onesRow = 0;
            int zerosRow = 0;
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    onesRow++;
                } else {
                    zerosRow++;
                }
            }

            for (int j = 0; j < cols; j++) {
                int onesCol = 0;
                int zerosCol = 0;
                for (int k = 0; k < rows; k++) {
                    if (grid[k][j] == 1) {
                        onesCol++;
                    } else {
                        zerosCol++;
                    }
                }

                diff[i][j] = onesRow + onesCol - zerosRow - zerosCol;
            }
        }

        return diff;
    }
}
```