```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 654_DescriptionOnly {

    @Test
    public void testBuildTree() {
        int[] nums = {3,2,1,5,6,4};
        TreeNode root = new Solution().buildMaxBinaryTree(nums);
        assertNotNull(root);
    }

    @Test
    public void testBuildTree_EmptyArray() {
        int[] nums = {};
        TreeNode root = new Solution().buildMaxBinaryTree(nums);
        assertNull(root);
    }

    @Test
    public void testBuildTree_SingleElementArray() {
        int[] nums = {1};
        TreeNode root = new Solution().buildMaxBinaryTree(nums);
        assertNotNull(root);
    }

    @Test
    public void testBuildTree_DuplicateValues() {
        int[] nums = {3,2,2,5,6,4};
        TreeNode root = new Solution().buildMaxBinaryTree(nums);
        assertNotNull(root);
    }

    @Test
    public void testBuildTree_NullArray() {
        int[] nums = null;
        assertThrows(NullPointerException.class, () -> new Solution().buildMaxBinaryTree(nums));
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Solution {
    public TreeNode buildMaxBinaryTree(int[] nums) {
        return buildMaxBinaryTree(nums, 0, nums.length - 1);
    }

    private TreeNode buildMaxBinaryTree(int[] nums, int start, int end) {
        if (start > end) {
            return null;
        }
        int maxIndex = start;
        for (int i = start + 1; i <= end; i++) {
            if (nums[i] > nums[maxIndex]) {
                maxIndex = i;
            }
        }
        TreeNode root = new TreeNode(nums[maxIndex]);
        root.left = buildMaxBinaryTree(nums, start, maxIndex - 1);
        root.right = buildMaxBinaryTree(nums, maxIndex + 1, end);
        return root;
    }
}
```