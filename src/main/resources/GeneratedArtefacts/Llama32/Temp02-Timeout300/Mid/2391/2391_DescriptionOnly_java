package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2391;

public class Solution {
    public int garbageCollection(int[][] garbage, int[] travel) {
        int m = garbage[0].length();
        int n = garbage.length;
        long[][] dp = new long[n][3];
        for (int i = 0; i < n; i++) {
            char c = garbage[i].charAt(0);
            if (c == 'M') {
                dp[i][0] += m;
            } else if (c == 'P') {
                dp[i][1] += m;
            } else {
                dp[i][2] += m;
            }
        }

        for (int i = 1; i < n; i++) {
            int t = travel[i - 1];
            for (int j = 0; j < 3; j++) {
                long min = Long.MAX_VALUE;
                for (int k = 0; k < 3; k++) {
                    if (k != j) {
                        min = Math.min(min, dp[i - 1][k] + t);
                    }
                }
                dp[i][j] = min;
            }
        }

        return (int) Math.min(Math.min(dp[n - 1][0], dp[n - 1][1]), dp[n - 1][2]);
    }
}