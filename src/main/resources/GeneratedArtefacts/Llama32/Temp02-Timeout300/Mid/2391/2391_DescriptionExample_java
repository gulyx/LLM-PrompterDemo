package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2391;

public class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int n = garbage.length;
        long[][] dp = new long[n][3];
        for (int i = 0; i < n; i++) {
            char c = garbage[i].charAt(0);
            if (c == 'M') {
                dp[i][0] += 1;
                dp[i][2] += 1;
            } else if (c == 'P') {
                dp[i][1] += 1;
                dp[i][2] += 1;
            } else {
                dp[i][2] += 1;
            }
        }

        for (int i = 0; i < n - 1; i++) {
            int time = travel[i];
            long min = Long.MAX_VALUE;
            for (int j = 0; j < 3; j++) {
                if (dp[i][j] > 0) {
                    min = Math.min(min, dp[i][j]);
                }
            }

            dp[i + 1][0] += min;
            dp[i + 1][1] += min;
            dp[i + 1][2] += min;

            for (int j = 0; j < 3; j++) {
                if (dp[i][j] > 0) {
                    dp[i + 1][j] += time;
                }
            }

        }

        long ans = Long.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            ans = Math.min(ans, dp[n - 1][i]);
        }

        return (int) ans;
    }
}