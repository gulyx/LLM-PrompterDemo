package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnlyTest {

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root.val > 1000)
            return null;
        if (p.val < root.val && q.val < root.val) {
            return lowestCommonAncestor(root.left, p, q);
        } else if (p.val > root.val && q.val > root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
    }

    public TreeNode lowestCommonAncestor(TreeNode root, int p, int q) {
        if (root == null || root.val > 1000)
            return null;
        if (p < root.val && q < root.val) {
            return lowestCommonAncestor(root.left, p, q);
        } else if (p > root.val && q > root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
    }

    public TreeNode lowestCommonAncestor(TreeNode root, int p, int q, int[] depth) {
        if (root == null || root.val > 1000)
            return null;
        if (p < root.val && q < root.val) {
            depth[0]++;
            return lowestCommonAncestor(root.left, p, q, depth);
        } else if (p > root.val && q > root.val) {
            depth[0]++;
            return lowestCommonAncestor(root.right, p, q, depth);
        }
        return root;
    }

    public TreeNode lowestCommonAncestor(TreeNode root, int[] depth) {
        if (root == null || root.val > 1000)
            return null;
        if (depth.length == 1 && depth[0] < root.val) {
            return lowestCommonAncestor(root.left, depth);
        } else if (depth.length == 1 && depth[0] > root.val) {
            return lowestCommonAncestor(root.right, depth);
        }
        return root;
    }

    public TreeNode lowestCommonAncestor(TreeNode root) {
        if (root == null || root.val > 1000)
            return null;
        if (root.left == null && root.right == null) {
            return root;
        } else if (root.left == null) {
            return root.right;
        } else if (root.right == null) {
            return root.left;
        }
        int[] depth = new int[1];
        return lowestCommonAncestor(root, 0, depth);
    }

}