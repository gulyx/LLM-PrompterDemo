```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testLowestCommonAncestor() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.left.right.left = new TreeNode(0);
        root.left.right.right = new TreeNode(8);
        root.right.left = new TreeNode(7);
        root.right.right = new TreeNode(4);

        int[] result = lowestCommonAncestor(root, new int[]{6, 7, 4});
        assertArrayEquals(new int[]{2}, result);
    }

    @Test
    public void testLowestCommonAncestorSingleNode() {
        TreeNode root = new TreeNode(1);

        int[] result = lowestCommonAncestor(root, new int[]{1});
        assertArrayEquals(new int[]{1}, result);
    }

    @Test
    public void testLowestCommonAncestorEmptyTree() {
        TreeNode root = null;

        int[] result = lowestCommonAncestor(root, new int[]{1});
        assertArrayEquals(new int[]{0}, result);
    }

    @Test
    public void testLowestCommonAncestorNoChildren() {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);

        int[] result = lowestCommonAncestor(root, new int[]{5});
        assertArrayEquals(new int[]{3}, result);
    }

    @Test
    public void testLowestCommonAncestorMultipleLeaves() {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);

        int[] result = lowestCommonAncestor(root, new int[]{1, 2});
        assertArrayEquals(new int[]{0}, result);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

}
```