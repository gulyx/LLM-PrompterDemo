```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2807_DescriptionExampleTest {

    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    @Test
    public void testInsertGCD() {
        ListNode head = new ListNode(18);
        head.next = new ListNode(6);
        head.next.next = new ListNode(10);
        head.next.next.next = new ListNode(3);

        head = insertGCD(head);

        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }

    @Test
    public void testInsertGCDSingleNode() {
        ListNode head = new ListNode(7);

        head = insertGCD(head);

        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }

    @Test
    public void testInsertGCDTwoNodes() {
        ListNode head = new ListNode(6);
        head.next = new ListNode(10);

        head = insertGCD(head);

        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }

    @Test
    public void testInsertGCDThreeNodes() {
        ListNode head = new ListNode(18);
        head.next = new ListNode(6);
        head.next.next = new ListNode(10);

        head = insertGCD(head);

        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }

    @Test
    public void testInsertGCDFourNodes() {
        ListNode head = new ListNode(18);
        head.next = new ListNode(6);
        head.next.next = new ListNode(10);
        head.next.next.next = new ListNode(3);

        head = insertGCD(head);

        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }

    public static ListNode insertGCD(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        int gcdVal = gcd(head.val, head.next.val);
        ListNode newNode = new ListNode(gcdVal);

        newNode.next = insertGCD(head.next.next);

        return newNode;
    }
}

class ListNode {
    int val;
    ListNode next;

    public ListNode(int x) {
        val = x;
    }
}
```