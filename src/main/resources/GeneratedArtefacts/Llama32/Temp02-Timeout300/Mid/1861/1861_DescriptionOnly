package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1861_DescriptionOnlyTest {

    @Test
    public void test_0() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", "*", "."}};
        int n = boxGrid.length;
        int m = boxGrid[0].length;
        char[][] result = rotateTheBox(boxGrid);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                assertEquals(result[i][j], boxGrid[m - j - 1][i]);
            }
        }
    }

    @Test
    public void test_1() {
        char[][] boxGrid = {{"#", ".", "."}, {"*", "#", "."}};
        int n = boxGrid.length;
        int m = boxGrid[0].length;
        char[][] result = rotateTheBox(boxGrid);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                assertEquals(result[i][j], boxGrid[m - j - 1][i]);
            }
        }
    }

    @Test
    public void test_2() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", "*", "."}};
        int n = boxGrid.length;
        int m = boxGrid[0].length;
        char[][] result = rotateTheBox(boxGrid);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                assertEquals(result[i][j], boxGrid[m - j - 1][i]);
            }
        }
    }

    @Test
    public void test_3() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", "*", "."}};
        int n = boxGrid.length;
        int m = boxGrid[0].length;
        char[][] result = rotateTheBox(boxGrid);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                assertEquals(result[i][j], boxGrid[m - j - 1][i]);
            }
        }
    }

    @Test
    public void test_4() {
        char[][] boxGrid = {{"#", "#", "."}, {"*", "*", "."}};
        int n = boxGrid.length;
        int m = boxGrid[0].length;
        char[][] result = rotateTheBox(boxGrid);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                assertEquals(result[i][j], boxGrid[m - j - 1][i]);
            }
        }
    }

}