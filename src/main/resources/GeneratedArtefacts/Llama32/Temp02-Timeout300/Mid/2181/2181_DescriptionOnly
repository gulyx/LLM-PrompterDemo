package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2181_DescriptionOnly {

    public ListNode mergeNodes(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        int sum = 0;
        ListNode prev = null;
        for (ListNode node = head; node != null; node = node.next) {
            if (node.val == 0 && prev != null) {
                prev.next = mergeList(prev.next, node.next);
            } else if (node.val != 0) {
                sum += node.val;
            }
            prev = node;
        }
        dummy.next.next = mergeList(dummy.next, head);
        return dummy.next;
    }

    private ListNode mergeList(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val >= l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }
        if (l1 != null) {
            curr.next = l1;
        } else if (l2 != null) {
            curr.next = l2;
        }
        return dummy.next;
    }

    @Test
    public void testMergeNodes() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(1);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(0);
        head.next.next.next.next = new ListNode(2);
        head.next.next.next.next.next = new ListNode(0);
        head.next.next.next.next.next.next = new ListNode(3);

        ListNode mergedHead = mergeNodes(head);
        while (mergedHead != null) {
            System.out.print(mergedHead.val + " ");
            mergedHead = mergedHead.next;
        }
    }

    @Test
    public void testMergeNodes_EmptyList() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(1);

        ListNode mergedHead = mergeNodes(head);
        while (mergedHead != null) {
            System.out.print(mergedHead.val + " ");
            mergedHead = mergedHead.next;
        }
    }

    @Test
    public void testMergeNodes_SingleNode() {
        ListNode head = new ListNode(0);

        ListNode mergedHead = mergeNodes(head);
        while (mergedHead != null) {
            System.out.print(mergedHead.val + " ");
            mergedHead = mergedHead.next;
        }
    }

    @Test
    public void testMergeNodes_NoZeros() {
        ListNode head = new ListNode(1);

        ListNode mergedHead = mergeNodes(head);
        while (mergedHead != null) {
            System.out.print(mergedHead.val + " ");
            mergedHead = mergedHead.next;
        }
    }

    @Test
    public void testMergeNodes_MultipleZeros() {
        ListNode head = new ListNode(0);
        head.next = new ListNode(1);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(2);

        ListNode mergedHead = mergeNodes(head);
        while (mergedHead != null) {
            System.out.print(mergedHead.val + " ");
            mergedHead = mergedHead.next;
        }
    }

}