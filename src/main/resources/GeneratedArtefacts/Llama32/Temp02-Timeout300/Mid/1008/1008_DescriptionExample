package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1008_DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] preorder = {8,5,1,7,10,12};
        TreeNode root = new Solution().buildTree(preorder);
        String result = inorderTraversal(root);
        assertEquals("[8,5,10,1,7,null,12]", result);
    }

    @Test
    public void test_2() {
        int[] preorder = {1,3};
        TreeNode root = new Solution().buildTree(preorder);
        String result = inorderTraversal(root);
        assertEquals("[1,null,3]", result);
    }

    @Test
    public void test_3() {
        int[] preorder = {4,2,5,1,3};
        TreeNode root = new Solution().buildTree(preorder);
        String result = inorderTraversal(root);
        assertEquals("[4,2,5,1,3]", result);
    }

    @Test
    public void test_4() {
        int[] preorder = {8,7,6,2,5,9};
        TreeNode root = new Solution().buildTree(preorder);
        String result = inorderTraversal(root);
        assertEquals("[8,7,6,2,5,null,null,9]", result);
    }

    @Test
    public void test_5() {
        int[] preorder = {1,2,3};
        TreeNode root = new Solution().buildTree(preorder);
        String result = inorderTraversal(root);
        assertEquals("[1,2,null,3]", result);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {

    public TreeNode buildTree(int[] preorder) {
        if (preorder == null || preorder.length == 0)
            return null;

        TreeNode root = new TreeNode(preorder[0]);
        int i = 1;
        for (; i < preorder.length; i++) {
            if (preorder[i] != -1) {
                root.left = new TreeNode(preorder[i]);
                break;
            }
        }

        if (root.left == null)
            return root;

        int leftIndex = i + 1;
        while (leftIndex < preorder.length && preorder[leftIndex] != -1) {
            root.right = new TreeNode(preorder[leftIndex++]);
        }

        return root;
    }

    public String inorderTraversal(TreeNode root) {
        StringBuilder result = new StringBuilder();
        if (root == null)
            return result.toString();

        dfs(root, result);
        return result.toString();
    }

    private void dfs(TreeNode node, StringBuilder result) {
        if (node.left != null)
            dfs(node.left, result);

        result.append(node.val).append(",");
        if (node.right != null)
            dfs(node.right, result);
    }
}