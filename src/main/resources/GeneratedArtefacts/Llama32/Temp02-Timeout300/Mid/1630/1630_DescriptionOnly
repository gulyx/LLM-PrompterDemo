package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.Arrays;
import java.util.Comparator;

public class DescriptionOnly {

    public static boolean isArithmetic(int[] nums, int[] l, int[] r) {
        for (int i = 0; i < l.length; i++) {
            if (!canBeArithmetic(nums, l[i], r[i])) {
                return false;
            }
        }
        return true;
    }

    public static boolean canBeArithmetic(int[] nums, int left, int right) {
        Arrays.sort(nums, left, right + 1);
        for (int i = 0; i < right - left + 1; i++) {
            if ((right - left + 1 - i) * (nums[i + 1] - nums[i]) != nums[right] - nums[left]) {
                return false;
            }
        }
        return true;
    }

    public static boolean canBeArithmetic(int[] nums, int left, int right) {
        Arrays.sort(nums, left, right + 1);
        for (int i = 0; i < right - left + 1; i++) {
            if ((right - left + 1 - i) * (nums[i + 1] - nums[i]) != nums[right] - nums[left]) {
                return false;
            }
        }
        return true;
    }

    public static boolean canBeArithmetic(int[] nums, int left, int right) {
        Arrays.sort(nums, left, right + 1);
        for (int i = 0; i < right - left + 1; i++) {
            if ((right - left + 1 - i) * (nums[i + 1] - nums[i]) != nums[right] - nums[left]) {
                return false;
            }
        }
        return true;
    }

    public static boolean canBeArithmetic(int[] nums, int left, int right) {
        Arrays.sort(nums, left, right + 1);
        for (int i = 0; i < right - left + 1; i++) {
            if ((right - left + 1 - i) * (nums[i + 1] - nums[i]) != nums[right] - nums[left]) {
                return false;
            }
        }
        return true;
    }

    public static boolean canBeArithmetic(int[] nums, int left, int right) {
        Arrays.sort(nums, left, right + 1);
        for (int i = 0; i < right - left + 1; i++) {
            if ((right - left + 1 - i) * (nums[i + 1] - nums[i]) != nums[right] - nums[left]) {
                return false;
            }
        }
        return true;
    }

}