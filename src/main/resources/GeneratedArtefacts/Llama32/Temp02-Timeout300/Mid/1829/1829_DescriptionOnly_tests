package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 1829_DescriptionOnlyTest {

    @Test
    public void test1() {
        int[] nums = {0, 1, 2, 3};
        int maximumBit = 2;
        int[][] answer = new int[4][];
        answer[0] = getMaxXor(nums, maximumBit);
        assertArrayEquals(new int[]{3}, answer[0]);
    }

    @Test
    public void test2() {
        int[] nums = {1, 2, 3};
        int maximumBit = 2;
        int[][] answer = new int[3][];
        answer[0] = getMaxXor(nums, maximumBit);
        assertArrayEquals(new int[]{3}, answer[0]);
    }

    @Test
    public void test3() {
        int[] nums = {1, 2};
        int maximumBit = 2;
        int[][] answer = new int[2][];
        answer[0] = getMaxXor(nums, maximumBit);
        assertArrayEquals(new int[]{3}, answer[0]);
    }

    @Test
    public void test4() {
        int[] nums = {1};
        int maximumBit = 2;
        int[][] answer = new int[1][];
        answer[0] = getMaxXor(nums, maximumBit);
        assertArrayEquals(new int[]{3}, answer[0]);
    }

    @Test
    public void test5() {
        int[] nums = {0};
        int maximumBit = 2;
        int[][] answer = new int[1][];
        answer[0] = getMaxXor(nums, maximumBit);
        assertArrayEquals(new int[]{3}, answer[0]);
    }

    private int[] getMaxXor(int[] nums, int maximumBit) {
        int n = nums.length;
        int[] prefixSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] ^ nums[i];
        }
        int maxXor = Integer.MIN_VALUE;
        int[] answer = new int[n];
        for (int k = 1; k < (1 << maximumBit); k++) {
            int currXor = prefixSum[n] ^ k;
            if (currXor > maxXor) {
                maxXor = currXor;
            }
        }
        return new int[]{maxXor};
    }

}