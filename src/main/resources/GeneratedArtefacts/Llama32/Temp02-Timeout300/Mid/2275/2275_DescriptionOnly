package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2275_DescriptionOnly {

    @Test
    public void testBitwiseAnd() {
        int[] nums = {1, 5, 3};
        assertEquals(1, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndSingleElement() {
        int[] nums = {7};
        assertEquals(7, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndMultipleElements() {
        int[] nums = {2, 4, 8};
        assertEquals(0, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndLargeNumber() {
        int[] nums = {16, 32, 64};
        assertEquals(0, bitwiseAnd(nums));
    }

    @Test
    public void testBitwiseAndAllElementsEqual() {
        int[] nums = {1, 1, 1};
        assertEquals(1, bitwiseAnd(nums));
    }
}

public class Solution {

    public int findMaxForm(int[] candidates) {
        Arrays.sort(candidates);
        int maxLen = 0;
        for (int i = 0; i < candidates.length; i++) {
            int currLen = binaryCount(candidates[i]);
            int j = i + 1;
            while (j < candidates.length && binaryCount(candidates[j]) == currLen) {
                j++;
            }
            maxLen = Math.max(maxLen, j - i);
        }
        return maxLen;
    }

    public int binaryCount(int n) {
        int count = 0;
        while (n > 0) {
            count += n & 1;
            n >>= 1;
        }
        return count;
    }
}