```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.1072;

public class Solution {
    public int maxEqualRowsAfterFlips(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        boolean[] rowCounts = new boolean[rows];
        for (int i = 0; i < rows; i++) {
            if (!matrix[i][0]) {
                for (int j = 1; j < cols; j++) {
                    if (matrix[i][j] != matrix[i][j - 1]) {
                        break;
                    }
                }
            } else {
                for (int j = 0; j < cols; j++) {
                    if (matrix[i][j] != matrix[i][j + 1]) {
                        break;
                    }
                }
            }
            rowCounts[i] = true;
        }
        int maxCount = 0;
        int count = 0;
        for (boolean b : rowCounts) {
            if (b) {
                count++;
            } else {
                maxCount = Math.max(maxCount, count);
                count = 1;
            }
        }
        return Math.max(maxCount, count);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] matrix1 = {{0,1},{1,1}};
        System.out.println(solution.maxEqualRowsAfterFlips(matrix1)); // 1

        int[][] matrix2 = {{0,1},{1,0}};
        System.out.println(solution.maxEqualRowsAfterFlips(matrix2)); // 2

        int[][] matrix3 = {{0,0,0},{0,0,1},{1,1,0}};
        System.out.println(solution.maxEqualRowsAfterFlips(matrix3)); // 2
    }
}
```