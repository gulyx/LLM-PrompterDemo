package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {
    private String shortUrlMap = "";
    private int shortUrlCounter = 0;

    public Solution() {}

    @Test
    public void testEncodeDecode() {
        Solution solution = new Solution();
        String longUrl = "https://leetcode.com/problems/design-tinyurl";
        String shortUrl = solution.encode(longUrl);
        assertEquals("http://tinyurl.com/" + shortUrlCounter, shortUrl);
        String decodedUrl = solution.decode(shortUrl);
        assertEquals(longUrl, decodedUrl);
    }

    @Test
    public void testEncodeDecodeWithLongerUrl() {
        Solution solution = new Solution();
        String longUrl = "https://leetcode.com/problems/design-tinyurl";
        for (int i = 0; i < 100; i++) {
            longUrl += "a";
        }
        String shortUrl = solution.encode(longUrl);
        assertEquals("http://tinyurl.com/" + shortUrlCounter, shortUrl);
        String decodedUrl = solution.decode(shortUrl);
        assertEquals(longUrl, decodedUrl);
    }

    @Test
    public void testEncodeDecodeWithSpecialChars() {
        Solution solution = new Solution();
        String longUrl = "https://leetcode.com/problems/design-tinyurl";
        for (int i = 0; i < 100; i++) {
            longUrl += "'";
        }
        String shortUrl = solution.encode(longUrl);
        assertEquals("http://tinyurl.com/" + shortUrlCounter, shortUrl);
        String decodedUrl = solution.decode(shortUrl);
        assertEquals(longUrl, decodedUrl);
    }

    @Test
    public void testEncodeDecodeWithMultipleUrls() {
        Solution solution = new Solution();
        for (int i = 0; i < 100; i++) {
            String longUrl = "https://leetcode.com/problems/design-tinyurl";
            solution.encode(longUrl);
        }
        for (int i = 0; i < 100; i++) {
            String shortUrl = solution.shortUrlMap + Integer.toString(solution.shortUrlCounter);
            assertEquals("http://tinyurl.com/" + solution.shortUrlCounter, shortUrl);
            solution.decode(shortUrl);
        }
    }

    @Test
    public void testEncodeDecodeWithNull() {
        Solution solution = new Solution();
        assertNull(solution.encode(null));
        String decodedUrl = solution.decode(null);
        assertNull(decodedUrl);
    }
}