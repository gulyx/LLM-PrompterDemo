```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {

    public TreeNode buildTree(int[] arr) {
        if (arr == null || arr.length == 0)
            return null;
        TreeNode root = new TreeNode(0);
        int i = 0;
        for (TreeNode node : root.lefts) {
            if (node != null) {
                node.val = arr[i++];
                if (i < arr.length && arr[i] != -1) {
                    node.lefts.add(buildTree(new int[]{arr[i]}));
                }
                if (i < arr.length && arr[i] != -1) {
                    node.rights.add(buildTree(new int[]{arr[i]}));
                }
            }
        }
        return root;
    }

    @Test
    public void testBuildTree_Example1() {
        TreeNode[] result = new TreeNode[5];
        buildTree(result);
        assertEquals(5, result.length);
        for (TreeNode node : result) {
            assertNotNull(node);
            assertEquals(0, node.val);
            if (node.lefts != null && !node.lefts.isEmpty()) {
                assertEquals(1, node.lefts.size());
                TreeNode left = node.lefts.get(0);
                assertNotNull(left);
                assertEquals(0, left.val);
                assertEquals(2, left.rights.size());
                for (TreeNode right : left.rights) {
                    assertNotNull(right);
                    assertEquals(0, right.val);
                }
            } else if (node.rights != null && !node.rights.isEmpty()) {
                assertEquals(1, node.rights.size());
                TreeNode right = node.rights.get(0);
                assertNotNull(right);
                assertEquals(0, right.val);
                assertEquals(2, right.lefts.size());
                for (TreeNode left : right.lefts) {
                    assertNotNull(left);
                    assertEquals(0, left.val);
                }
            } else {
                fail("Expected at least one child");
            }
        }
    }

    @Test
    public void testBuildTree_Example2() {
        TreeNode[] result = new TreeNode[1];
        buildTree(result);
        assertEquals(1, result.length);
        for (TreeNode node : result) {
            assertNotNull(node);
            assertEquals(0, node.val);
            if (node.lefts != null && !node.lefts.isEmpty()) {
                fail("Expected no left child");
            } else if (node.rights != null && !node.rights.isEmpty()) {
                fail("Expected no right child");
            }
        }
    }

    @Test
    public void testBuildTree_EmptyArray() {
        TreeNode[] result = new TreeNode[0];
        buildTree(result);
        assertEquals(0, result.length);
    }

    @Test
    public void testBuildTree_NullArray() {
        TreeNode[] result = null;
        try {
            buildTree(result);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // expected
        }
    }

    @Test
    public void testBuildTree_EmptyArrayWithNegativeValue() {
        int[] arr = new int[]{-1};
        TreeNode[] result = new TreeNode[0];
        buildTree(result);
        assertEquals(0, result.length);
    }
}
```