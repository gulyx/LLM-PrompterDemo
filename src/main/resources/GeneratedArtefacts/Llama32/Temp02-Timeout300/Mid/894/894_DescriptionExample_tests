```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testGenerateTrees() {
        Solution solution = new Solution();
        int[] result1 = solution.generateTrees(7);
        int[][] expected1 = {{0, 0, 0, null, null, 0, 0, null, null, 0, 0},
                {0, 0, 0, null, null, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, null, null, null, null, 0, 0},
                {0, 0, 0, 0, 0, null, null, 0, 0}};
        assertArrayEquals(expected1, result1);
    }

    @Test
    public void testGenerateTrees2() {
        Solution solution = new Solution();
        int[] result2 = solution.generateTrees(3);
        int[][] expected2 = {{0, 0, 0}};
        assertArrayEquals(expected2, result2);
    }
}

class Solution {

    public int[][] generateTrees(int n) {
        if (n == 0) return new int[0][];
        return generate(n);
    }

    private int[][] generate(int n) {
        if (n == 1) return new int[][]{{new Node(0)}};
        int[][] result = new int[n][];
        for (int i = 0; i < n; i++) {
            if (i == 0 || i == n - 1) {
                result[i] = new int[]{new Node(i)};
            } else {
                for (int[] left : generate(i)) {
                    for (int[] right : generate(n - i - 1)) {
                        result[i] = merge(left, right);
                    }
                }
            }
        }
        return result;
    }

    private int[][] merge(int[] left, int[] right) {
        if (left == null) return right;
        if (right == null) return left;

        Node root = new Node(0);
        int i = 0, j = 0;
        while (i < left.length && j < right.length) {
            if (left[i].val < right[j].val) {
                root.left = merge(left, Arrays.copyOfRange(right, j, right.length));
                root.right = left[i++];
                return new int[][]{root};
            } else {
                root.right = merge(Arrays.copyOfRange(left, i, left.length), right);
                root.left = right[j++];
                return new int[][]{root};
            }
        }

        if (i < left.length) {
            root.left = Arrays.copyOfRange(left, i, left.length);
            return new int[][]{root};
        } else {
            root.right = Arrays.copyOfRange(right, j, right.length);
            return new int[][]{root};
        }
    }

    private class Node {
        int val;
        Node left;
        Node right;

        public Node(int val) {
            this.val = val;
        }
    }
}
```