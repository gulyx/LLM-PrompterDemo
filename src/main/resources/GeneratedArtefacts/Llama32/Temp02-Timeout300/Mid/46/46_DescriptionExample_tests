package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.46;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.46.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class 46_DescriptionExample_testsTest {

    @Test
    public void test1() {
        Solution solution = new Solution();
        int[] nums = {1,2,3};
        Object[][] result = solution.permute(nums);
        assertEquals(6, result.length);
        for (Object[] perm : result) {
            assertTrue(perm[0] == 1 || perm[0] == 2 || perm[0] == 3);
            assertTrue(perm[1] == 1 || perm[1] == 2 || perm[1] == 3);
            assertTrue(perm[2] == 1 || perm[2] == 2 || perm[2] == 3);
        }
    }

    @Test
    public void test2() {
        Solution solution = new Solution();
        int[] nums = {0,1};
        Object[][] result = solution.permute(nums);
        assertEquals(2, result.length);
        for (Object[] perm : result) {
            assertTrue(perm[0] == 0 || perm[0] == 1);
            assertTrue(perm[1] == 0 || perm[1] == 1);
        }
    }

    @Test
    public void test3() {
        Solution solution = new Solution();
        int[] nums = {1};
        Object[][] result = solution.permute(nums);
        assertEquals(1, result.length);
        assertTrue(result[0][0] == 1);
    }

    @Test
    public void test4() {
        Solution solution = new Solution();
        int[] nums = {2,3,1};
        Object[][] result = solution.permute(nums);
        assertEquals(6, result.length);
        for (Object[] perm : result) {
            assertTrue(perm[0] == 2 || perm[0] == 3 || perm[0] == 1);
            assertTrue(perm[1] == 2 || perm[1] == 3 || perm[1] == 1);
            assertTrue(perm[2] == 2 || perm[2] == 3 || perm[2] == 1);
        }
    }

    @Test
    public void test5() {
        Solution solution = new Solution();
        int[] nums = {0,0};
        Object[][] result = solution.permute(nums);
        assertEquals(3, result.length);
        for (Object[] perm : result) {
            assertTrue(perm[0] == 0 || perm[0] == 1);
            assertTrue(perm[1] == 0 || perm[1] == 1);
        }
    }

}