package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2120;

import java.util.*;

public class Solution {
    public int[] executeInstructions(int n, int[] startPos, String s) {
        int m = s.length();
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int[][] dp = new int[m][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0) {
                    dp[i][j] = Math.min(j, n - startPos[1]) + 1;
                } else {
                    int[] nextPos = new int[]{startPos[0] + directions[j % 4][0], startPos[1] + directions[j % 4][1]};
                    if (nextPos[0] < 0 || nextPos[0] >= n || nextPos[1] < 0 || nextPos[1] >= n) {
                        dp[i][j] = 0;
                    } else {
                        int index = Arrays.binarySearch(new int[]{i - 1}, j);
                        if (index < 0) {
                            index = ~index;
                        }
                        dp[i][j] = Math.min(index, m - i) + dp[index][j % 4];
                    }
                }
            }
        }
        return dp[m - 1];
    }

}