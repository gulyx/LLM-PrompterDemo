package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 2120_DescriptionOnly {

    @Test
    public void test_1() {
        int n = 2;
        int[] startPos = {0, 0};
        String s = "DR";
        int[][] result = new int[s.length()][];
        for (int i = 0; i < s.length(); i++) {
            int[] res = new int[n * n];
            res[startPos[1] + 1]++;
            res[startPos[1] - 1]--;
            res[startPos[0]]++;
            res[startPos[0]]--;
            for (int j = i + 1; j < s.length(); j++) {
                char c = s.charAt(j);
                if (c == 'L') {
                    res[startPos[1] - 1]++;
                    res[startPos[1]+1]--;
                } else if (c == 'R') {
                    res[startPos[1] + 1]++;
                    res[startPos[1]-1]--;
                } else if (c == 'U') {
                    res[startPos[0]]++;
                    res[startPos[0]]--;
                } else if (c == 'D') {
                    res[startPos[0]]--;
                    res[startPos[0]+1]++;
                }
            }
            int sum = 0;
            for (int k = 0; k < n * n; k++) {
                sum += res[k];
            }
            result[i] = new int[]{sum};
        }
    }

    @Test
    public void test_2() {
        int n = 3;
        int[] startPos = {1, 1};
        String s = "LDR";
        int[][] result = new int[s.length()][];
        for (int i = 0; i < s.length(); i++) {
            int[] res = new int[n * n];
            res[startPos[1] + 1]++;
            res[startPos[1] - 1]--;
            res[startPos[0]]++;
            res[startPos[0]]--;
            for (int j = i + 1; j < s.length(); j++) {
                char c = s.charAt(j);
                if (c == 'L') {
                    res[startPos[1] - 1]++;
                    res[startPos[1]+1]--;
                } else if (c == 'R') {
                    res[startPos[1] + 1]++;
                    res[startPos[1]-1]--;
                } else if (c == 'U') {
                    res[startPos[0]]++;
                    res[startPos[0]]--;
                } else if (c == 'D') {
                    res[startPos[0]]--;
                    res[startPos[0]+1]++;
                }
            }
            int sum = 0;
            for (int k = 0; k < n * n; k++) {
                sum += res[k];
            }
            result[i] = new int[]{sum};
        }
    }

    @Test
    public void test_3() {
        int n = 4;
        int[] startPos = {1, 2};
        String s = "LDRU";
        int[][] result = new int[s.length()][];
        for (int i = 0; i < s.length(); i++) {
            int[] res = new int[n * n];
            res[startPos[1] + 1]++;
            res[startPos[1] - 1]--;
            res[startPos[0]]++;
            res[startPos[0]]--;
            for (int j = i + 1; j < s.length(); j++) {
                char c = s.charAt(j);
                if (c == 'L') {
                    res[startPos[1] - 1]++;
                    res[startPos[1]+1]--;
                } else if (c == 'R') {
                    res[startPos[1] + 1]++;
                    res[startPos[1]-1]--;
                } else if (c == 'U') {
                    res[startPos[0]]++;
                    res[startPos[0]]--;
                } else if (c == 'D') {
                    res[startPos[0]]--;
                    res[startPos[0]+1]++;
                }
            }
            int sum = 0;
            for (int k = 0; k < n * n; k++) {
                sum += res[k];
            }
            result[i] = new int[]{sum};
        }
    }

    @Test
    public void test_4() {
        int n = 5;
        int[] startPos = {2, 3};
        String s = "LDRU";
        int[][] result = new int[s.length()][];
        for (int i = 0; i < s.length(); i++) {
            int[] res = new int[n * n];
            res[startPos[1] + 1]++;
            res[startPos[1] - 1]--;
            res[startPos[0]]++;
            res[startPos[0]]--;
            for (int j = i + 1; j < s.length(); j++) {
                char c = s.charAt(j);
                if (c == 'L') {
                    res[startPos[1] - 1]++;
                    res[startPos[1]+1]--;
                } else if (c == 'R') {
                    res[startPos[1] + 1]++;
                    res[startPos[1]-1]--;
                } else if (c == 'U') {
                    res[startPos[0]]++;
                    res[startPos[0]]--;
                } else if (c == 'D') {
                    res[startPos[0]]--;
                    res[startPos[0]+1]++;
                }
            }
            int sum = 0;
            for (int k = 0; k < n * n; k++) {
                sum += res[k];
            }
            result[i] = new int[]{sum};
        }
    }

    @Test
    public void test_5() {
        int n = 6;
        int[] startPos = {3, 4};
        String s = "LDRU";
        int[][] result = new int[s.length()][];
        for (int i = 0; i < s.length(); i++) {
            int[] res = new int[n * n];
            res[startPos[1] + 1]++;
            res[startPos[1] - 1]--;
            res[startPos[0]]++;
            res[startPos[0]]--;
            for (int j = i + 1; j < s.length(); j++) {
                char c = s.charAt(j);
                if (c == 'L') {
                    res[startPos[1] - 1]++;
                    res[startPos[1]+1]--;
                } else if (c == 'R') {
                    res[startPos[1] + 1]++;
                    res[startPos[1]-1]--;
                } else if (c == 'U') {
                    res[startPos[0]]++;
                    res[startPos[0]]--;
                } else if (c == 'D') {
                    res[startPos[0]]--;
                    res[startPos[0]+1]++;
                }
            }
            int sum = 0;
            for (int k = 0; k < n * n; k++) {
                sum += res[k];
            }
            result[i] = new int[]{sum};
        }
    }

}