```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[][] grid = {{3, 0, 8, 4}, {2, 4, 5, 7}, {9, 2, 6, 3}, {0, 3, 1, 0}};
        assertEquals(35, maxIncreaseHeight(grid));
    }

    @Test
    public void test_2() {
        int[][] grid = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
        assertEquals(0, maxIncreaseHeight(grid));
    }

    @Test
    public void test_3() {
        int[][] grid = {{100, 0, 8, 4}, {2, 4, 5, 7}, {9, 2, 6, 3}, {0, 3, 1, 0}};
        assertEquals(35, maxIncreaseHeight(grid));
    }

    @Test
    public void test_4() {
        int[][] grid = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
        assertEquals(0, maxIncreaseHeight(grid));
    }

    @Test
    public void test_5() {
        int[][] grid = {{3, 0, 8, 4}, {2, 4, 5, 7}, {9, 2, 6, 3}, {0, 3, 1, 100}};
        assertEquals(35, maxIncreaseHeight(grid));
    }
}

public class Solution {
    public int maxIncreaseHeight(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] rowMax = new int[m];
        int[] colMax = new int[n];

        for (int i = 0; i < m; i++) {
            int minVal = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                minVal = Math.min(minVal, grid[i][j]);
                rowMax[i] = Math.max(rowMax[i], minVal);
            }
        }

        for (int i = 0; i < n; i++) {
            int minVal = Integer.MAX_VALUE;
            for (int j = 0; j < m; j++) {
                minVal = Math.min(minVal, grid[j][i]);
                colMax[i] = Math.max(colMax[i], minVal);
            }
        }

        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }
        return ans;
    }
}
```