```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;
public class 1828_DescriptionExample {

    @Test
    public void test1() {
        int[][] points = {{1,3},{3,3},{5,3},{2,2}};
        int[][] queries = {{2,3,1},{4,3,1},{1,1,2}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(new int[]{3,2,2},answer);
    }

    @Test
    public void test2() {
        int[][] points = {{1,1},{2,2},{3,3},{4,4},{5,5}};
        int[][] queries = {{1,2,2},{2,2,2},{4,3,2},{4,3,3}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(new int[]{2,3,2,4},answer);
    }

    @Test
    public void test3() {
        int[][] points = {{1,1},{2,2},{3,3}};
        int[][] queries = {{1,1,1},{2,2,1},{3,3,1}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(new int[]{1,1,1},answer);
    }

    @Test
    public void test4() {
        int[][] points = {{1,1},{2,2}};
        int[][] queries = {{1,1,1},{2,2,1}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(new int[]{1,1},answer);
    }

    @Test
    public void test5() {
        int[][] points = {{1,1},{2,2}};
        int[][] queries = {{3,3,1},{4,4,1}};
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = countPoints(points, queries[i]);
        }
        assertArrayEquals(new int[]{0,0},answer);
    }

    public static int countPoints(int[][] points, int[] query) {
        int count = 0;
        for (int[] point : points) {
            if (Math.hypot(point[0] - query[0], point[1] - query[1]) <= query[2]) {
                count++;
            }
        }
        return count;
    }

}
```