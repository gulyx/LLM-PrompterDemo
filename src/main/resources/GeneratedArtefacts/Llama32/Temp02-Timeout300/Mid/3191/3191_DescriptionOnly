```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionOnly {

    @Test
    public void testFlippingAllOnes() {
        int[] nums = {1, 1, 1};
        assertEquals(0, minOperations(nums));
    }

    @Test
    public void testNoOnes() {
        int[] nums = {0, 0, 0};
        assertEquals(-1, minOperations(nums));
    }

    @Test
    public void testFlippingAllZeros() {
        int[] nums = {0, 0, 0};
        assertEquals(3, minOperations(nums));
    }

    @Test
    public void testMixedOnesAndZeros() {
        int[] nums = {1, 0, 1, 0, 1};
        assertEquals(2, minOperations(nums));
    }

    @Test
    public void testFlippingAllToOnes() {
        int[] nums = {0, 0, 0, 0, 0};
        assertEquals(6, minOperations(nums));
    }
}

public class Solution {

    public int minOperations(int[] nums) {
        int ones = 0;
        for (int num : nums) {
            if (num == 1) {
                ones++;
            }
        }

        if (ones == nums.length) {
            return 0;
        } else if (ones == 0) {
            return -1;
        } else {
            int flips = nums.length - ones;
            for (int i = 0; i < nums.length - 2; i++) {
                if (nums[i] == 0 && nums[i + 1] == 0 && nums[i + 2] == 0) {
                    flips--;
                }
            }

            return flips;
        }
    }
}
```