```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testInOrderTraversal() {
        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(4);

        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(0);
        root2.right = new TreeNode(3);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 2, 3, 4}, result);
    }

    @Test
    public void testInOrderTraversalWithNull() {
        TreeNode root1 = new TreeNode(2);
        root1.right = new TreeNode(4);

        TreeNode root2 = new TreeNode(8);
        root2.left = new TreeNode(1);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{1, 8}, result);
    }

    @Test
    public void testInOrderTraversalWithEmpty() {
        TreeNode root1 = null;

        TreeNode root2 = new TreeNode(8);
        root2.left = new TreeNode(1);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{1, 8}, result);
    }

    @Test
    public void testInOrderTraversalWithSameTree() {
        TreeNode root1 = new TreeNode(2);
        root1.left = new TreeNode(1);
        root1.right = new TreeNode(4);

        TreeNode root2 = root1;

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 1, 2, 3, 4}, result);
    }

    @Test
    public void testInOrderTraversalWithDifferentTree() {
        TreeNode root1 = new TreeNode(8);
        root1.left = new TreeNode(1);

        TreeNode root2 = new TreeNode(3);
        root2.right = new TreeNode(0);

        int[] result = inOrderTraversal(root1, root2);
        assertArrayEquals(new int[]{0, 1, 3}, result);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) { val = x; }

}
```