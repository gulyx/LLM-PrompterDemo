package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import java.util.*;

public class DescriptionOnly {

    public int[] describingUserMinutes(int[][] logs, int k) {
        Map<Integer, Set<Integer>> minutes = new HashMap<>();
        for (int[] log : logs) {
            minutes.computeIfAbsent(log[0], key -> new HashSet<>()).add(log[1]);
        }

        List<List<Integer>> uniqueMinutes = new ArrayList<>(minutes.values());
        Collections.sort(uniqueMinutes, Comparator.comparingInt(List::size));

        int[] answer = new int[k];
        for (int i = 0; i < k; i++) {
            answer[i] = uniqueMinutes.get(i).size();
        }
        return answer;
    }

    public static void main(String[] args) {
        DescriptionOnly solution = new DescriptionOnly();

        // Test case 1:
        int[][] logs1 = {{1, 0}, {2, 1}};
        int k1 = 2;
        int[] expected1 = {1, 1};
        assertArrayEquals(expected1, solution.describingUserMinutes(logs1, k1));

        // Test case 2:
        int[][] logs2 = {{1, 0}, {2, 1}, {3, 1}};
        int k2 = 2;
        int[] expected2 = {1, 2};
        assertArrayEquals(expected2, solution.describingUserMinutes(logs2, k2));

        // Test case 3:
        int[][] logs3 = {{1, 0}, {2, 1}, {3, 1}, {4, 1}};
        int k3 = 2;
        int[] expected3 = {1, 2};
        assertArrayEquals(expected3, solution.describingUserMinutes(logs3, k3));

        // Test case 4:
        int[][] logs4 = {{1, 0}, {2, 1}, {3, 1}, {4, 1}, {5, 1}};
        int k4 = 2;
        int[] expected4 = {1, 2};
        assertArrayEquals(expected4, solution.describingUserMinutes(logs4, k4));

        // Test case 5:
        int[][] logs5 = {{1, 0}, {2, 1}, {3, 1}, {4, 1}, {5, 1}};
        int k5 = 3;
        int[] expected5 = {1, 2, 1};
        assertArrayEquals(expected5, solution.describingUserMinutes(logs5, k5));
    }
}