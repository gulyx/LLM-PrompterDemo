package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import java.util.Arrays;

public class DescriptionOnly {

    @Test
    public void testDiagonalSort() {
        int[][] mat = {{3, 7, 8}, {9, 11, 13}, {15, 16, 17}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[]{[3, 9, 15], [7, 11, 16], [8, 13, 17]}, result);
    }

    @Test
    public void testDiagonalSortEmptyMatrix() {
        int[][] mat = {};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[][]{}, result);
    }

    @Test
    public void testDiagonalSortSingleElementMatrix() {
        int[][] mat = {{1}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[][]{[1]}, result);
    }

    @Test
    public void testDiagonalSortSmallMatrix() {
        int[][] mat = {{2, 4}, {6, 8}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[][]{[2, 6], [4, 8]}, result);
    }

    @Test
    public void testDiagonalSortLargeMatrix() {
        int[][] mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int[][] result = diagonalSort(mat);
        assertArrayEquals(new int[][]{[1, 4, 7], [2, 5, 8], [3, 6, 9]}, result);
    }
}

private int[][] diagonalSort(int[][] mat) {
    int m = mat.length;
    int n = mat[0].length;
    List<Integer>[] diagonals = new List[m + n - 1];
    for (int i = 0; i < m + n - 1; i++) {
        diagonals[i] = new ArrayList<>();
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            diagonals[i + j].add(mat[i][j]);
        }
    }

    for (List<Integer> diagonal : diagonals) {
        Collections.sort(diagonal);
    }

    int[][] result = new int[m][n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            result[i][j] = diagonals[i + j].get(j);
        }
    }
    return result;
}