```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testFindDifferentBinaryString() {
        String[] nums = {"01","10"};
        String result = findDifferentBinaryString(nums);
        assertEquals("11", result);
    }

    @Test
    public void testFindDifferentBinaryString_2() {
        String[] nums = {"00","01"};
        String result = findDifferentBinaryString(nums);
        assertEquals("11", result);
    }

    @Test
    public void testFindDifferentBinaryString_3() {
        String[] nums = {"111","011","001"};
        String result = findDifferentBinaryString(nums);
        assertEquals("101", result);
    }

    @Test
    public void testFindDifferentBinaryString_4() {
        String[] nums = {"000","010","100"};
        String result = findDifferentBinaryString(nums);
        assertEquals("110", result);
    }

    @Test
    public void testFindDifferentBinaryString_5() {
        String[] nums = {"1111","0111","0011"};
        String result = findDifferentBinaryString(nums);
        assertEquals("0000", result);
    }
}

public class Solution {

    public String findDifferentBinaryString(String[] nums) {
        int n = nums[0].length();
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < n; i++) {
            boolean isOne = false;
            for (String s : nums) {
                if (s.charAt(i) == '1') {
                    isOne = true;
                    break;
                }
            }

            if (!isOne) {
                sb.append('1');
            } else {
                sb.append('0');
            }
        }

        return sb.toString();
    }
}
```