package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void test_1() {
        int[] nums = {3, 1, -2, -5, 2, -4};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{3, -2, 1, -5, 2, -4}, result);
    }

    @Test
    public void test_2() {
        int[] nums = {-1, 1};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{1, -1}, result);
    }

    @Test
    public void test_3() {
        int[] nums = {1, 2, 3, 4, 5, 6};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{1, 2, 3, 6, 5, 4}, result);
    }

    @Test
    public void test_4() {
        int[] nums = {-1, -2, -3, -4, -5};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, result);
    }

    @Test
    public void test_5() {
        int[] nums = {0, 0, 0, 0, 0};
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{0, 0, 0, 0, 0}, result);
    }

    private int[] rearrangeArray(int[] nums) {
        int pos = 0;
        int neg = 0;

        for (int num : nums) {
            if (num > 0) {
                pos++;
            } else if (num < 0) {
                neg++;
            }
        }

        int[] result = new int[nums.length];
        int p = 0, n = 0;
        while (pos > 0 && neg > 0) {
            result[p++] = nums[neg--];
            result[n++] = nums[pos--];
        }

        while (neg > 0) {
            result[p++] = nums[neg--];
        }
        while (pos > 0) {
            result[n++] = nums[pos--];
        }

        return result;
    }
}