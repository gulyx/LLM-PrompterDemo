package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2149_DescriptionOnly {

    @Test
    public void test1() {
        int[] nums = { -1, 2, -3, 4, -5 };
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{ 2, -1, 4, -3, 5 }, result);
    }

    @Test
    public void test2() {
        int[] nums = { 1, 2, 3, 4 };
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{ 1, 3, 2, 4 }, result);
    }

    @Test
    public void test3() {
        int[] nums = { -1, -2, -3, -4 };
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{ -1, -3, -2, -4 }, result);
    }

    @Test
    public void test4() {
        int[] nums = { 1, 2, 3, 4, 5 };
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{ 1, 3, 5, 2, 4 }, result);
    }

    @Test
    public void test5() {
        int[] nums = { -1, -2, -3, -4, -5 };
        int[] result = rearrangeArray(nums);
        assertArrayEquals(new int[]{ -1, -3, -5, -2, -4 }, result);
    }

    public int[] rearrangeArray(int[] nums) {
        int positiveCount = 0;
        for (int num : nums) {
            if (num >= 0) {
                positiveCount++;
            }
        }

        int[] positives = new int[positiveCount];
        int[] negatives = new int[nums.length - positiveCount];

        int posIndex = 0, negIndex = 0;

        for (int num : nums) {
            if (num >= 0) {
                positives[posIndex++] = num;
            } else {
                negatives[negIndex++] = num;
            }
        }

        int[] result = new int[nums.length];
        result[0] = positives[0];

        for (int i = 1; i < positiveCount; i++) {
            result[i] = positives[i];
        }

        for (int i = positiveCount; i < nums.length; i++) {
            result[i] = negatives[negIndex - 1--];
        }

        return result;
    }
}