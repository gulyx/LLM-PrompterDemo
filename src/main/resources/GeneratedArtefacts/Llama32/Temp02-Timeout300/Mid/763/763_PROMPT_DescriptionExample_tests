As a professional Software Tester, generate a complete Junit test-class (name the test-class as: '763_DescriptionExample_testsTest', and use as first line the declaration: 'package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.763;') with 5 different JUnit tests for a Java class-under-test (you can assume the class-under-test is named: Solution, and import it as: 'import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.763.Solution;'). The class-under-test implements the following description in natural language with examples. Specifically below the description, each example is introduced by the keyword [--Example XX--] (where XX is a number), and it is composed by an input tuple and an expected output. Emit only the Java code, without any other tag or text.  Here is the description for the class-under-test: 
You are given a string "s". We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string "ababcc" can be partitioned into "["abab", "cc"]", but partitions such as "["aba", "bcc"]" or "["ab", "ab", "cc"]" are invalid.
Note that the partition is done so that after concatenating all the parts in order, the resultant string should be "s".
Return a list of integers representing the size of these parts.


[--Example 1--]
Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]

[--Example 2--]
Input: s = "eccbbbbdec"
Output: [10]