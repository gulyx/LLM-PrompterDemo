```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExample {

    @Test
    public void testPartitionString() {
        String s = "ababcbacadefegdehijhklij";
        int[] result = partition(s);
        assertEquals(9, result[0]);
        assertEquals(7, result[1]);
        assertEquals(8, result[2]);
    }

    @Test
    public void testPartitionStringSingle() {
        String s = "eccbbbbdec";
        int[] result = partition(s);
        assertEquals(10, result[0]);
    }

    @Test
    public void testPartitionStringEmpty() {
        String s = "";
        int[] result = partition(s);
        assertTrue(result.length == 0);
    }

    @Test
    public void testPartitionStringSingleChar() {
        String s = "a";
        int[] result = partition(s);
        assertEquals(1, result[0]);
    }

    @Test
    public void testPartitionStringTwoChars() {
        String s = "ab";
        int[] result = partition(s);
        assertEquals(2, result[0]);
    }
}

public class Solution {

    public int[] partition(String s) {
        char[] chars = s.toCharArray();
        boolean[] seen = new boolean[256];
        int count = 0;
        StringBuilder current = new StringBuilder();

        for (char c : chars) {
            if (!seen[c]) {
                current.append(c);
                seen[c] = true;
            } else {
                count++;
                seen[c] = false;
                current.setLength(0);
                current.append(c);
            }
        }

        int[] result = new int[count + 1];
        result[0] = current.length();
        for (int i = 1; i <= count; i++) {
            result[i] = result[i - 1] + current.length();
        }
        return result;
    }
}
```