```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class DescriptionExampleTest {

    @Test
    public void testPartitionString() {
        String s = "ababcbacadefegdehijhklij";
        int[] result = partition(s);
        assertEquals(new int[]{9, 7, 8}, result);
    }

    @Test
    public void testPartitionSingleElement() {
        String s = "a";
        int[] result = partition(s);
        assertEquals(new int[]{1}, result);
    }

    @Test
    public void testPartitionEmptyString() {
        String s = "";
        int[] result = partition(s);
        assertTrue(result.length == 0);
    }

    @Test
    public void testPartitionDuplicateLetters() {
        String s = "eccbbbbdec";
        int[] result = partition(s);
        assertEquals(new int[]{10}, result);
    }

    @Test
    public void testPartitionNoDuplicates() {
        String s = "abcdefg";
        int[] result = partition(s);
        assertTrue(result.length == 1 && result[0] == 7);
    }
}

public class Solution {

    public int[] partition(String s) {
        int n = s.length();
        boolean[] used = new boolean[n];
        int[] res = new int[n];

        for (int i = 0; i < n; ++i) {
            if (!used[i]) {
                int j = i;
                while (j < n && !isUsed(s, j)) {
                    used[j] = true;
                    ++j;
                }
                res[i] = j - i;
            }
        }

        return res;
    }

    private boolean isUsed(String s, int i) {
        for (int j = 0; j < i; ++j) {
            if (s.charAt(i) == s.charAt(j)) {
                return true;
            }
        }
        return false;
    }
}
```