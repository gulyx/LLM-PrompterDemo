package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2610;

import it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen.2610.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class 2610_DescriptionExample_testsTest {

    @Test
    public void test1() {
        Solution solution = new Solution();
        int[][] result = solution.generateMatrix(new int[]{1,3,4,1,2,3,1});
        assertEquals(3, result.length);
        assertEquals(4, result[0].length);
        assertTrue(result[0][0] == 1 && result[0][1] == 3 && result[0][2] == 4 && result[0][3] == 2);
        assertTrue(result[1][0] == 1 && result[1][1] == 3 && result[1][2] == 1 && result[1][3] == 1);
        assertTrue(result[2][0] == 1 && result[2][1] == 2 && result[2][2] == 3 && result[2][3] == 1);
    }

    @Test
    public void test2() {
        Solution solution = new Solution();
        int[][] result = solution.generateMatrix(new int[]{1,2,3,4});
        assertEquals(1, result.length);
        assertEquals(4, result[0].length);
        assertTrue(result[0][0] == 4 && result[0][1] == 3 && result[0][2] == 2 && result[0][3] == 1);
    }

    @Test
    public void test3() {
        Solution solution = new Solution();
        int[][] result = solution.generateMatrix(new int[]{1,1,1,1});
        assertEquals(1, result.length);
        assertEquals(4, result[0].length);
        assertTrue(result[0][0] == 1 && result[0][1] == 1 && result[0][2] == 1 && result[0][3] == 1);
    }

    @Test
    public void test4() {
        Solution solution = new Solution();
        int[][] result = solution.generateMatrix(new int[]{1,2});
        assertEquals(2, result.length);
        assertEquals(2, result[0].length);
        assertTrue(result[0][0] == 1 && result[0][1] == 2);
        assertTrue(result[1][0] == 1 && result[1][1] == 2);
    }

    @Test
    public void test5() {
        Solution solution = new Solution();
        int[][] result = solution.generateMatrix(new int[]{1});
        assertEquals(1, result.length);
        assertEquals(1, result[0].length);
        assertTrue(result[0][0] == 1);
    }
}