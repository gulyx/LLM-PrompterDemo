package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 2482_DescriptionOnly {

    @Test
    public void test_1x1() {
        int[][] grid = {{1}};
        int[][] diff = new int[0][0];
        assertArrayEquals(diff, findDiff(grid));
    }

    @Test
    public void test_2x2() {
        int[][] grid = {{1, 0}, {0, 1}};
        int[][] diff = new int[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                diff[i][j] = findDiff(grid)[i][j];
            }
        }
        assertArrayEquals(diff, new int[][]{{1, -1}, {-1, 1}});
    }

    @Test
    public void test_3x3() {
        int[][] grid = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        int[][] diff = new int[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                diff[i][j] = findDiff(grid)[i][j];
            }
        }
        assertArrayEquals(diff, new int[][]{{2, -1, -1}, {-1, 2, -1}, {-1, -1, 2}});
    }

    @Test
    public void test_4x4() {
        int[][] grid = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};
        int[][] diff = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                diff[i][j] = findDiff(grid)[i][j];
            }
        }
        assertArrayEquals(diff, new int[][]{{2, -1, -1, -1}, {-1, 2, -1, -1}, {-1, -1, 2, -1}, {-1, -1, -1, 2}});
    }

    @Test
    public void test_5x5() {
        int[][] grid = {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}};
        int[][] diff = new int[5][5];
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                diff[i][j] = findDiff(grid)[i][j];
            }
        }
        assertArrayEquals(diff, new int[][]{{2, -1, -1, -1, -1}, {-1, 2, -1, -1, -1}, {-1, -1, 2, -1, -1}, {-1, -1, -1, 2, -1}, {-1, -1, -1, -1, 2}});
    }

    private int[][] findDiff(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] onesRow = new int[m];
        int[] zerosRow = new int[m];
        int[] onesCol = new int[n];
        int[] zerosCol = new int[n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    onesRow[i]++;
                    onesCol[j]++;
                } else {
                    zerosRow[i]++;
                    zerosCol[j]++;
                }
            }
        }

        int[][] diff = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                diff[i][j] = onesRow[i] + onesCol[j] - zerosRow[i] - zerosCol[j];
            }
        }

        return diff;
    }
}