```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void testRemapKeys() {
        String word = "abcde";
        int expectedOutput = 5;
        assertEquals(expectedOutput, minPushes(word));
    }

    @Test
    public void testRemapKeys2() {
        String word = "xyzxyzxyzxyz";
        int expectedOutput = 12;
        assertEquals(expectedOutput, minPushes(word));
    }

    @Test
    public void testRemapKeys3() {
        String word = "hello";
        int expectedOutput = 8;
        assertEquals(expectedOutput, minPushes(word));
    }

    @Test
    public void testRemapKeys4() {
        String word = "world";
        int expectedOutput = 6;
        assertEquals(expectedOutput, minPushes(word));
    }

    @Test
    public void testRemapKeys5() {
        String word = "abcdefghijklmnopqrstuvwxyz";
        int expectedOutput = 26;
        assertEquals(expectedOutput, minPushes(word));
    }
}

public class Solution {

    private static final String[] KEYS = {"a", "b", "c", "d", "e"};

    public int minPushes(String word) {
        int[][] dp = new int[word.length() + 1][26];
        for (int i = 0; i < 26; i++) {
            dp[0][i] = 0;
        }
        for (int i = 1; i <= word.length(); i++) {
            for (int j = 0; j < 26; j++) {
                if (j == word.charAt(i - 1) - 'a') {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);
                }
                int k = i + 1;
                while (k <= word.length() && word.charAt(k - 1) != word.charAt(i - 1)) {
                    k++;
                }
                if (k > word.length()) {
                    break;
                }
                dp[k][word.charAt(k - 1) - 'a'] = Math.min(dp[k][word.charAt(k - 1) - 'a'], dp[i - 1][j] + i);
            }
        }
        int minPushes = Integer.MAX_VALUE;
        for (int j = 0; j < 26; j++) {
            minPushes = Math.min(minPushes, dp[word.length()][j]);
        }
        return minPushes;
    }

}
```