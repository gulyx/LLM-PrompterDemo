package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.HashMap;
import java.util.Map;

public class DescriptionOnlyTest {

    @Test
    public void testExample1() {
        String word = "a";
        int expected = 1;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void testExample2() {
        String word = "ab";
        int expected = 2;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void testExample3() {
        String word = "abc";
        int expected = 4;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void testExample4() {
        String word = "abccdd";
        int expected = 6;
        assertEquals(expected, minPushes(word));
    }

    @Test
    public void testExample5() {
        String word = "abcdefghijklmnopqrstuvwxyz";
        int expected = 26;
        assertEquals(expected, minPushes(word));
    }
}

public class Solution {

    public int minPushes(String word) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (!map.containsKey(c)) {
                map.put(c, i + 1);
            }
        }

        int pushes = 0;
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pushes += entry.getValue();
        }

        return pushes;
    }
}