```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExampleTest {

    @Test
    public void test1() {
        int[][] matrix = {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}};
        long target = 0;
        assertEquals(4, numSubmatrix(matrix, target));
    }

    @Test
    public void test2() {
        int[][] matrix = {{1, -1}, {-1, 1}};
        long target = 0;
        assertEquals(5, numSubmatrix(matrix, target));
    }

    @Test
    public void test3() {
        int[][] matrix = {{904}};
        long target = 0;
        assertEquals(0, numSubmatrix(matrix, target));
    }

    @Test
    public void test4() {
        int[][] matrix = {{1, 2}, {3, 4}};
        long target = 5;
        assertEquals(9, numSubmatrix(matrix, target));
    }

    @Test
    public void test5() {
        int[][] matrix = {{-1, -1}, {-1, -1}};
        long target = 0;
        assertEquals(1, numSubmatrix(matrix, target));
    }
}

public class Solution {

    public int numSubmatrix(int[][] matrix, long target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int count = 0;

        for (int left = 0; left < n; left++) {
            int[] prefixSum = new int[m];
            for (int right = left + 1; right <= n; right++) {
                for (int i = 0; i < m; i++) {
                    prefixSum[i] += matrix[i][right - 1];
                }

                int currentSum = 0;
                for (int i = 0; i < m; i++) {
                    currentSum += prefixSum[i];
                    if (currentSum == target) {
                        count++;
                    } else if (currentSum > target) {
                        break;
                    }
                }
            }
        }

        return count;
    }
}
```