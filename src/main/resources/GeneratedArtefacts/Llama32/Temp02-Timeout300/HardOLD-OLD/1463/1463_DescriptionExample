```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Solution {

    public int cherryPickup(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][][] dp = new int[rows][cols][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols - 1; j++) {
                for (int k = j + 1; k < cols; k++) {
                    if (i == 0 && j == 0) {
                        dp[i][j][k] = grid[i][j];
                    } else if (i == 0) {
                        dp[i][j][k] = Math.max(dp[i][j - 1][k], dp[i][j + 1][k]) + grid[i][j];
                    } else if (k == cols - 1) {
                        dp[i][j][k] = Math.max(dp[i - 1][j][k - 1], dp[i - 1][j][k]) + grid[i][j];
                    } else {
                        dp[i][j][k] = Math.max(Math.max(dp[i - 1][j][k - 1], dp[i - 1][j][k]), Math.max(dp[i - 1][j + 1][k - 1], dp[i - 1][j + 1][k])) + grid[i][j];
                    }
                }
            }
        }

        return dp[rows - 1][0][cols - 1];
    }

    @Test
    public void testCherryPickup() {
        int[][] grid = {{3,1,1},{2,5,1},{1,5,5},{2,1,1}};
        assertEquals(24, new Solution().cherryPickup(grid));

        int[][] grid2 = {{1,0,0,0,0,0,1},{2,0,0,0,0,3,0},{2,0,9,0,0,0,0},{0,3,0,5,4,0,0},{1,0,2,3,0,0,6}};
        assertEquals(28, new Solution().cherryPickup(grid2));
    }
}
```