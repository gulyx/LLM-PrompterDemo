package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;

public class 732_DescriptionOnly {

    @Test
    public void test_0() {
        MyCalendarThree obj = new MyCalendarThree();
        int result = obj.book(1,3);
        assertEquals(2, result);
    }

    @Test
    public void test_1() {
        MyCalendarThree obj = new MyCalendarThree();
        int result = obj.book(2,4);
        assertEquals(1, result);
    }

    @Test
    public void test_2() {
        MyCalendarThree obj = new MyCalendarThree();
        int[] events = {1, 2};
        int result = obj.book(events[0],events[1]);
        assertEquals(1, result);
    }

    @Test
    public void test_3() {
        MyCalendarThree obj = new MyCalendarThree();
        int[] events = {1, 2, 3,4,5};
        int result = obj.book(events[0],events[1]);
        assertEquals(3, result);
    }

    @Test
    public void test_4() {
        MyCalendarThree obj = new MyCalendarThree();
        int[] events = {1, 2, 3,4,5};
        int result = obj.book(events[0],events[1]);
        assertEquals(3, result);
    }
}

class MyCalendarThree {

    private int[][] events;

    public MyCalendarThree() {
        this.events = new int[0][];
    }

    public int book(int startTime, int endTime) {
        int count = 0;
        for (int i = 0; i < events.length; i++) {
            if (events[i][1] >= startTime && events[i][0] <= endTime) {
                count++;
            }
        }
        int[] newEvents = new int[count][2];
        int j = 0;
        for (int i = 0; i < events.length; i++) {
            if (events[i][1] >= startTime && events[i][0] <= endTime) {
                newEvents[j][0] = Math.min(events[i][0], startTime);
                newEvents[j++][1] = Math.max(events[i][1], endTime);
            }
        }
        this.events = Arrays.copyOf(newEvents, j);
        return count;
    }

}