package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class 773_DescriptionOnly {

    @Test
    public void test_1() {
        int[][] board = {{1,2,3},{4,5,0}};
        assertEquals(0, minMovesToTransform(board));
    }

    @Test
    public void test_2() {
        int[][] board = {{5,4,3},{2,1,0}};
        assertEquals(-1, minMovesToTransform(board));
    }

    @Test
    public void test_3() {
        int[][] board = {{0,1,2},{3,4,5}};
        assertEquals(6, minMovesToTransform(board));
    }

    @Test
    public void test_4() {
        int[][] board = {{5,0,1},{2,4,3}};
        assertEquals(2, minMovesToTransform(board));
    }

    @Test
    public void test_5() {
        int[][] board = {{3,1,5},{2,4,0}};
        assertEquals(-1, minMovesToTransform(board));
    }
}

public class Solution {

    public int minMovesToTransform(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int moves = 0;
        boolean visited[][] = new boolean[n][m];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            moves++;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (i == 0 && j == 0) continue;
                    int x = curr[0] + i;
                    int y = curr[1] + j;
                    if (x < 0 || x >= n || y < 0 || y >= m) continue;
                    if (!visited[x][y]) {
                        queue.offer(new int[]{x, y});
                        visited[x][y] = true;
                        board[curr[0]][curr[1]] = board[x][y];
                        board[x][y] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] != 5) return -1;
            }
        }
        return moves;
    }
}