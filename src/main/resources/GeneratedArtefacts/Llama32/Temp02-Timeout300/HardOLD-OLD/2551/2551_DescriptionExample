```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DescriptionExample {

    @Test
    public void test1() {
        int[] weights = {1,3,5,1};
        int k = 2;
        assertEquals(4, calculateScore(weights, k));
    }

    @Test
    public void test2() {
        int[] weights = {1, 3};
        int k = 2;
        assertEquals(0, calculateScore(weights, k));
    }

    @Test
    public void test3() {
        int[] weights = {10,20,30,40,50};
        int k = 5;
        assertEquals(1500, calculateScore(weights, k));
    }

    @Test
    public void test4() {
        int[] weights = {1,2,3,4,5};
        int k = 3;
        assertEquals(15, calculateScore(weights, k));
    }

    @Test
    public void test5() {
        int[] weights = {1000000,2000000,3000000,4000000,5000000};
        int k = 5;
        assertEquals(15000000, calculateScore(weights, k));
    }
}

public class Solution {

    public int calculateScore(int[] weights, int k) {
        int n = weights.length;
        long maxScore = 0;
        long minScore = Long.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            long score = 0;
            for (int j = i; j < n; j++) {
                if (j - i + 1 > k) break;
                score += weights[i] + weights[j];
            }
            maxScore = Math.max(maxScore, score);
        }

        for (int i = 0; i < n; i++) {
            long score = 0;
            for (int j = i; j >= 0; j--) {
                if (j - i + 1 > k) break;
                score += weights[i] + weights[j];
            }
            minScore = Math.min(minScore, score);
        }

        return (int)(maxScore - minScore);
    }
}
```