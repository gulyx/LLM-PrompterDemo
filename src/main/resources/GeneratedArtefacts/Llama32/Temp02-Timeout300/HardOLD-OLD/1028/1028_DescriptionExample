```java
package it.cnr.iasi.saks.llmPrompter.leetCodeDemo.gen;

import org.junit.Test;
import static org.junit.Assert.*;

public class Solution {

    public TreeNode recoverFromPreorder(String traversal) {
        return buildTree(traversal);
    }

    private TreeNode buildTree(String traversal) {
        int i = 0;
        while (i < traversal.length() && Character.isDigit(traversal.charAt(i))) {
            i++;
        }
        if (i == traversal.length()) {
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(traversal.substring(0, i)));
        int leftIndex = i + 1;
        int rightIndex = findRightmostTraverseIndex(traversal, leftIndex);
        while (leftIndex <= rightIndex) {
            if (traversal.charAt(leftIndex) == '-') {
                leftIndex++;
                continue;
            }
            TreeNode node = buildTree(traversal.substring(leftIndex));
            if (node != null) {
                root.left = node;
            } else {
                break;
            }
            leftIndex = findRightmostTraverseIndex(traversal, leftIndex);
        }
        return root;
    }

    private int findRightmostTraverseIndex(String traversal, int start) {
        int rightmost = start;
        while (rightmost < traversal.length() && Character.isDigit(traversal.charAt(rightmost))) {
            rightmost++;
        }
        return rightmost - 1;
    }

}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
```